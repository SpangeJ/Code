
f407g_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000931c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080094a4  080094a4  000194a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094c8  080094c8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080094c8  080094c8  000194c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094d0  080094d0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094d0  080094d0  000194d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094d4  080094d4  000194d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080094d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000a64  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae0  20000ae0  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017f92  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b9e  00000000  00000000  00038081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001350  00000000  00000000  0003bc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ee2  00000000  00000000  0003cf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000241ba  00000000  00000000  0003de52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019f8a  00000000  00000000  0006200c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cdd8b  00000000  00000000  0007bf96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005430  00000000  00000000  00149d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0014f154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800948c 	.word	0x0800948c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800948c 	.word	0x0800948c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fc87 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f833 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f959 	bl	8000798 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e6:	f000 f899 	bl	800061c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004ea:	f000 f8c5 	bl	8000678 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004ee:	f000 f8f3 	bl	80006d8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004f2:	f008 fb75 	bl	8008be0 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004f6:	f000 f925 	bl	8000744 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char *message = "Hi!\r\n";
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <main+0x64>)
 80004fc:	607b      	str	r3, [r7, #4]
  while (1)
  {
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET) {
 80004fe:	2101      	movs	r1, #1
 8000500:	480e      	ldr	r0, [pc, #56]	; (800053c <main+0x68>)
 8000502:	f000 ffb7 	bl	8001474 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d00a      	beq.n	8000522 <main+0x4e>
    	HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), 100);
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f7ff fe5b 	bl	80001c8 <strlen>
 8000512:	4603      	mov	r3, r0
 8000514:	b29a      	uxth	r2, r3
 8000516:	2364      	movs	r3, #100	; 0x64
 8000518:	6879      	ldr	r1, [r7, #4]
 800051a:	4809      	ldr	r0, [pc, #36]	; (8000540 <main+0x6c>)
 800051c:	f004 fda7 	bl	800506e <HAL_UART_Transmit>
 8000520:	e004      	b.n	800052c <main+0x58>
    	//strcpy((char*)buf, "Hello World!\r\n");
		//HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
    } else {
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000526:	4807      	ldr	r0, [pc, #28]	; (8000544 <main+0x70>)
 8000528:	f000 ffd5 	bl	80014d6 <HAL_GPIO_TogglePin>
    }
    HAL_Delay(100);
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f000 fccf 	bl	8000ed0 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000532:	f008 fb7b 	bl	8008c2c <MX_USB_HOST_Process>
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET) {
 8000536:	e7e2      	b.n	80004fe <main+0x2a>
 8000538:	080094a4 	.word	0x080094a4
 800053c:	40020000 	.word	0x40020000
 8000540:	2000018c 	.word	0x2000018c
 8000544:	40020c00 	.word	0x40020c00

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f008 ff08 	bl	800936c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <SystemClock_Config+0xcc>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SystemClock_Config+0xd0>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b8:	2308      	movs	r3, #8
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c6:	2307      	movs	r3, #7
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 fe9a 	bl	8004308 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005da:	f000 f9db 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2302      	movs	r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2105      	movs	r1, #5
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 f8fb 	bl	80047f8 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000608:	f000 f9c4 	bl	8000994 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	; 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_I2C1_Init+0x50>)
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <MX_I2C1_Init+0x54>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_I2C1_Init+0x50>)
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_I2C1_Init+0x58>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_I2C1_Init+0x50>)
 800063a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_I2C1_Init+0x50>)
 800065a:	f003 f871 	bl	8003740 <HAL_I2C_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000664:	f000 f996 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000098 	.word	0x20000098
 8000670:	40005400 	.word	0x40005400
 8000674:	000186a0 	.word	0x000186a0

08000678 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_I2S3_Init+0x54>)
 800067e:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <MX_I2S3_Init+0x58>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_I2S3_Init+0x54>)
 8000684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000688:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_I2S3_Init+0x54>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_I2S3_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_I2S3_Init+0x54>)
 8000698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_I2S3_Init+0x54>)
 80006a0:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <MX_I2S3_Init+0x5c>)
 80006a2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_I2S3_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_I2S3_Init+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_I2S3_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_I2S3_Init+0x54>)
 80006b8:	f003 f986 	bl	80039c8 <HAL_I2S_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006c2:	f000 f967 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000ec 	.word	0x200000ec
 80006d0:	40003c00 	.word	0x40003c00
 80006d4:	00017700 	.word	0x00017700

080006d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_SPI1_Init+0x64>)
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <MX_SPI1_Init+0x68>)
 80006e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_SPI1_Init+0x64>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_SPI1_Init+0x64>)
 8000724:	220a      	movs	r2, #10
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_SPI1_Init+0x64>)
 800072a:	f004 fbc7 	bl	8004ebc <HAL_SPI_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000734:	f000 f92e 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000134 	.word	0x20000134
 8000740:	40013000 	.word	0x40013000

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_USART2_UART_Init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800077c:	f004 fc27 	bl	8004fce <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000786:	f000 f905 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000018c 	.word	0x2000018c
 8000794:	40004400 	.word	0x40004400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	; 0x30
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4b72      	ldr	r3, [pc, #456]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a71      	ldr	r2, [pc, #452]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b6f      	ldr	r3, [pc, #444]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	4b6b      	ldr	r3, [pc, #428]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a6a      	ldr	r2, [pc, #424]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b68      	ldr	r3, [pc, #416]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b64      	ldr	r3, [pc, #400]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a63      	ldr	r2, [pc, #396]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b61      	ldr	r3, [pc, #388]	; (800097c <MX_GPIO_Init+0x1e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b5d      	ldr	r3, [pc, #372]	; (800097c <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a5c      	ldr	r2, [pc, #368]	; (800097c <MX_GPIO_Init+0x1e4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b5a      	ldr	r3, [pc, #360]	; (800097c <MX_GPIO_Init+0x1e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b56      	ldr	r3, [pc, #344]	; (800097c <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a55      	ldr	r2, [pc, #340]	; (800097c <MX_GPIO_Init+0x1e4>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b53      	ldr	r3, [pc, #332]	; (800097c <MX_GPIO_Init+0x1e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b4f      	ldr	r3, [pc, #316]	; (800097c <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a4e      	ldr	r2, [pc, #312]	; (800097c <MX_GPIO_Init+0x1e4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b4c      	ldr	r3, [pc, #304]	; (800097c <MX_GPIO_Init+0x1e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2108      	movs	r1, #8
 800085a:	4849      	ldr	r0, [pc, #292]	; (8000980 <MX_GPIO_Init+0x1e8>)
 800085c:	f000 fe22 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2101      	movs	r1, #1
 8000864:	4847      	ldr	r0, [pc, #284]	; (8000984 <MX_GPIO_Init+0x1ec>)
 8000866:	f000 fe1d 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086a:	2200      	movs	r2, #0
 800086c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000870:	4845      	ldr	r0, [pc, #276]	; (8000988 <MX_GPIO_Init+0x1f0>)
 8000872:	f000 fe17 	bl	80014a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000876:	2308      	movs	r3, #8
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	483c      	ldr	r0, [pc, #240]	; (8000980 <MX_GPIO_Init+0x1e8>)
 800088e:	f000 fc55 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4836      	ldr	r0, [pc, #216]	; (8000984 <MX_GPIO_Init+0x1ec>)
 80008aa:	f000 fc47 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ae:	2308      	movs	r3, #8
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008be:	2305      	movs	r3, #5
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	482e      	ldr	r0, [pc, #184]	; (8000984 <MX_GPIO_Init+0x1ec>)
 80008ca:	f000 fc37 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008d2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	482a      	ldr	r0, [pc, #168]	; (800098c <MX_GPIO_Init+0x1f4>)
 80008e4:	f000 fc2a 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e8:	2304      	movs	r3, #4
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4825      	ldr	r0, [pc, #148]	; (8000990 <MX_GPIO_Init+0x1f8>)
 80008fc:	f000 fc1e 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000912:	2305      	movs	r3, #5
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481c      	ldr	r0, [pc, #112]	; (8000990 <MX_GPIO_Init+0x1f8>)
 800091e:	f000 fc0d 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000922:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000926:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4813      	ldr	r0, [pc, #76]	; (8000988 <MX_GPIO_Init+0x1f0>)
 800093c:	f000 fbfe 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000940:	2320      	movs	r3, #32
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_GPIO_Init+0x1f0>)
 8000954:	f000 fbf2 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_GPIO_Init+0x1e8>)
 800096e:	f000 fbe5 	bl	800113c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	; 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40021000 	.word	0x40021000
 8000984:	40020800 	.word	0x40020800
 8000988:	40020c00 	.word	0x40020c00
 800098c:	40020000 	.word	0x40020000
 8000990:	40020400 	.word	0x40020400

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <HAL_MspInit+0x4c>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <HAL_MspInit+0x4c>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009de:	2007      	movs	r0, #7
 80009e0:	f000 fb6a 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_I2C_MspInit+0x84>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d12c      	bne.n	8000a6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a34:	2312      	movs	r3, #18
 8000a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a40:	2304      	movs	r3, #4
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480c      	ldr	r0, [pc, #48]	; (8000a7c <HAL_I2C_MspInit+0x8c>)
 8000a4c:	f000 fb76 	bl	800113c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40005400 	.word	0x40005400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020400 	.word	0x40020400

08000a80 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a31      	ldr	r2, [pc, #196]	; (8000b70 <HAL_I2S_MspInit+0xf0>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d15a      	bne.n	8000b66 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ab4:	23c0      	movs	r3, #192	; 0xc0
 8000ab6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f004 f8b9 	bl	8004c38 <HAL_RCCEx_PeriphCLKConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000acc:	f7ff ff62 	bl	8000994 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	4a26      	ldr	r2, [pc, #152]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ade:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6313      	str	r3, [r2, #48]	; 0x30
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b24:	2310      	movs	r3, #16
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b34:	2306      	movs	r3, #6
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480e      	ldr	r0, [pc, #56]	; (8000b78 <HAL_I2S_MspInit+0xf8>)
 8000b40:	f000 fafc 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b44:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b56:	2306      	movs	r3, #6
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4806      	ldr	r0, [pc, #24]	; (8000b7c <HAL_I2S_MspInit+0xfc>)
 8000b62:	f000 faeb 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3738      	adds	r7, #56	; 0x38
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40003c00 	.word	0x40003c00
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020800 	.word	0x40020800

08000b80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_SPI_MspInit+0x84>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12b      	bne.n	8000bfa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bda:	23e0      	movs	r3, #224	; 0xe0
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bea:	2305      	movs	r3, #5
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <HAL_SPI_MspInit+0x8c>)
 8000bf6:	f000 faa1 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40013000 	.word	0x40013000
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_UART_MspInit+0x84>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12b      	bne.n	8000c8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_UART_MspInit+0x8c>)
 8000c86:	f000 fa59 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40004400 	.word	0x40004400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f8d0 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <OTG_FS_IRQHandler+0x10>)
 8000cfa:	f000 fee7 	bl	8001acc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200005b8 	.word	0x200005b8

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d38:	f008 fb30 	bl	800939c <__errno>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d46:	e009      	b.n	8000d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <_sbrk+0x64>)
 8000d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20020000 	.word	0x20020000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	200001d4 	.word	0x200001d4
 8000d70:	20000ae0 	.word	0x20000ae0

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d9c:	f7ff ffea 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000da2:	490d      	ldr	r1, [pc, #52]	; (8000dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db8:	4c0a      	ldr	r4, [pc, #40]	; (8000de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f008 faef 	bl	80093a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fb83 	bl	80004d4 <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ddc:	080094d8 	.word	0x080094d8
  ldr r2, =_sbss
 8000de0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000de4:	20000ae0 	.word	0x20000ae0

08000de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f94f 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fdbe 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f967 	bl	8001122 <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e6c:	f000 f92f 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	200001d8 	.word	0x200001d8

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200001d8 	.word	0x200001d8

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff ffee 	bl	8000eb8 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_Delay+0x44>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffde 	bl	8000eb8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db0b      	blt.n	8000fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 021f 	and.w	r2, r3, #31
 8000f94:	4907      	ldr	r1, [pc, #28]	; (8000fb4 <__NVIC_EnableIRQ+0x38>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001098:	f7ff ff8e 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff29 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff3e 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff8e 	bl	800100c <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5d 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff31 	bl	8000f7c <__NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffa2 	bl	8001074 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e16b      	b.n	8001430 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 815a 	bne.w	800142a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d005      	beq.n	800118e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	2b02      	cmp	r3, #2
 800118c:	d130      	bne.n	80011f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 0201 	and.w	r2, r3, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d017      	beq.n	800122c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80b4 	beq.w	800142a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b60      	ldr	r3, [pc, #384]	; (8001448 <HAL_GPIO_Init+0x30c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a5f      	ldr	r2, [pc, #380]	; (8001448 <HAL_GPIO_Init+0x30c>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b5d      	ldr	r3, [pc, #372]	; (8001448 <HAL_GPIO_Init+0x30c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a5b      	ldr	r2, [pc, #364]	; (800144c <HAL_GPIO_Init+0x310>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a52      	ldr	r2, [pc, #328]	; (8001450 <HAL_GPIO_Init+0x314>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d02b      	beq.n	8001362 <HAL_GPIO_Init+0x226>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a51      	ldr	r2, [pc, #324]	; (8001454 <HAL_GPIO_Init+0x318>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d025      	beq.n	800135e <HAL_GPIO_Init+0x222>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a50      	ldr	r2, [pc, #320]	; (8001458 <HAL_GPIO_Init+0x31c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d01f      	beq.n	800135a <HAL_GPIO_Init+0x21e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4f      	ldr	r2, [pc, #316]	; (800145c <HAL_GPIO_Init+0x320>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d019      	beq.n	8001356 <HAL_GPIO_Init+0x21a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4e      	ldr	r2, [pc, #312]	; (8001460 <HAL_GPIO_Init+0x324>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d013      	beq.n	8001352 <HAL_GPIO_Init+0x216>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4d      	ldr	r2, [pc, #308]	; (8001464 <HAL_GPIO_Init+0x328>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00d      	beq.n	800134e <HAL_GPIO_Init+0x212>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4c      	ldr	r2, [pc, #304]	; (8001468 <HAL_GPIO_Init+0x32c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <HAL_GPIO_Init+0x20e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4b      	ldr	r2, [pc, #300]	; (800146c <HAL_GPIO_Init+0x330>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d101      	bne.n	8001346 <HAL_GPIO_Init+0x20a>
 8001342:	2307      	movs	r3, #7
 8001344:	e00e      	b.n	8001364 <HAL_GPIO_Init+0x228>
 8001346:	2308      	movs	r3, #8
 8001348:	e00c      	b.n	8001364 <HAL_GPIO_Init+0x228>
 800134a:	2306      	movs	r3, #6
 800134c:	e00a      	b.n	8001364 <HAL_GPIO_Init+0x228>
 800134e:	2305      	movs	r3, #5
 8001350:	e008      	b.n	8001364 <HAL_GPIO_Init+0x228>
 8001352:	2304      	movs	r3, #4
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x228>
 8001356:	2303      	movs	r3, #3
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x228>
 800135a:	2302      	movs	r3, #2
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x228>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x228>
 8001362:	2300      	movs	r3, #0
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	f002 0203 	and.w	r2, r2, #3
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4093      	lsls	r3, r2
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001374:	4935      	ldr	r1, [pc, #212]	; (800144c <HAL_GPIO_Init+0x310>)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <HAL_GPIO_Init+0x334>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a6:	4a32      	ldr	r2, [pc, #200]	; (8001470 <HAL_GPIO_Init+0x334>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_GPIO_Init+0x334>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d0:	4a27      	ldr	r2, [pc, #156]	; (8001470 <HAL_GPIO_Init+0x334>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_GPIO_Init+0x334>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fa:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <HAL_GPIO_Init+0x334>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_GPIO_Init+0x334>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <HAL_GPIO_Init+0x334>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3301      	adds	r3, #1
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	f67f ae90 	bls.w	8001158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40013800 	.word	0x40013800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020400 	.word	0x40020400
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00
 8001460:	40021000 	.word	0x40021000
 8001464:	40021400 	.word	0x40021400
 8001468:	40021800 	.word	0x40021800
 800146c:	40021c00 	.word	0x40021c00
 8001470:	40013c00 	.word	0x40013c00

08001474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e001      	b.n	8001496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	460b      	mov	r3, r1
 80014e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014e8:	887a      	ldrh	r2, [r7, #2]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	041a      	lsls	r2, r3, #16
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	400b      	ands	r3, r1
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	619a      	str	r2, [r3, #24]
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af02      	add	r7, sp, #8
 8001510:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e059      	b.n	80015d0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f007 fbb0 	bl	8008c9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2203      	movs	r2, #3
 8001540:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800154a:	d102      	bne.n	8001552 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f004 f9b9 	bl	80058ce <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7c1a      	ldrb	r2, [r3, #16]
 8001564:	f88d 2000 	strb.w	r2, [sp]
 8001568:	3304      	adds	r3, #4
 800156a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156c:	f004 f93a 	bl	80057e4 <USB_CoreInit>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e026      	b.n	80015d0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2101      	movs	r1, #1
 8001588:	4618      	mov	r0, r3
 800158a:	f004 f9b1 	bl	80058f0 <USB_SetCurrentMode>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2202      	movs	r2, #2
 8001598:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e017      	b.n	80015d0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7c1a      	ldrb	r2, [r3, #16]
 80015a8:	f88d 2000 	strb.w	r2, [sp]
 80015ac:	3304      	adds	r3, #4
 80015ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b0:	f004 fb54 	bl	8005c5c <USB_HostInit>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2202      	movs	r2, #2
 80015be:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e004      	b.n	80015d0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b08b      	sub	sp, #44	; 0x2c
 80015dc:	af04      	add	r7, sp, #16
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	4608      	mov	r0, r1
 80015e2:	4611      	mov	r1, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	70fb      	strb	r3, [r7, #3]
 80015ea:	460b      	mov	r3, r1
 80015ec:	70bb      	strb	r3, [r7, #2]
 80015ee:	4613      	mov	r3, r2
 80015f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80015f4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_HCD_HC_Init+0x2c>
 8001600:	2302      	movs	r3, #2
 8001602:	e09d      	b.n	8001740 <HAL_HCD_HC_Init+0x168>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800160c:	78fa      	ldrb	r2, [r7, #3]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3319      	adds	r3, #25
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001620:	78fa      	ldrb	r2, [r7, #3]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	3314      	adds	r3, #20
 8001630:	787a      	ldrb	r2, [r7, #1]
 8001632:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3315      	adds	r3, #21
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	3326      	adds	r3, #38	; 0x26
 8001658:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800165c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	78bb      	ldrb	r3, [r7, #2]
 8001662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001666:	b2d8      	uxtb	r0, r3
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	1a9b      	subs	r3, r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3316      	adds	r3, #22
 8001676:	4602      	mov	r2, r0
 8001678:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	4619      	mov	r1, r3
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fbc8 	bl	8001e14 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001684:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001688:	2b00      	cmp	r3, #0
 800168a:	da0a      	bge.n	80016a2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	1a9b      	subs	r3, r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	3317      	adds	r3, #23
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	e009      	b.n	80016b6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016a2:	78fa      	ldrb	r2, [r7, #3]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	3317      	adds	r3, #23
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 fc32 	bl	8005f24 <USB_GetHostSpeed>
 80016c0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d10b      	bne.n	80016e2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d107      	bne.n	80016e2 <HAL_HCD_HC_Init+0x10a>
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d104      	bne.n	80016e2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2bbc      	cmp	r3, #188	; 0xbc
 80016dc:	d901      	bls.n	80016e2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80016de:	23bc      	movs	r3, #188	; 0xbc
 80016e0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	3318      	adds	r3, #24
 80016f2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80016f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016f8:	78fa      	ldrb	r2, [r7, #3]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	b298      	uxth	r0, r3
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	1a9b      	subs	r3, r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	3328      	adds	r3, #40	; 0x28
 800170c:	4602      	mov	r2, r0
 800170e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	b29b      	uxth	r3, r3
 8001718:	787c      	ldrb	r4, [r7, #1]
 800171a:	78ba      	ldrb	r2, [r7, #2]
 800171c:	78f9      	ldrb	r1, [r7, #3]
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4623      	mov	r3, r4
 800172e:	f004 fc21 	bl	8005f74 <USB_HC_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}

08001748 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_HCD_HC_Halt+0x1e>
 8001762:	2302      	movs	r3, #2
 8001764:	e00f      	b.n	8001786 <HAL_HCD_HC_Halt+0x3e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f004 ffb3 	bl	80066e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	4608      	mov	r0, r1
 800179a:	4611      	mov	r1, r2
 800179c:	461a      	mov	r2, r3
 800179e:	4603      	mov	r3, r0
 80017a0:	70fb      	strb	r3, [r7, #3]
 80017a2:	460b      	mov	r3, r1
 80017a4:	70bb      	strb	r3, [r7, #2]
 80017a6:	4613      	mov	r3, r2
 80017a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	3317      	adds	r3, #23
 80017ba:	78ba      	ldrb	r2, [r7, #2]
 80017bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	3326      	adds	r3, #38	; 0x26
 80017ce:	787a      	ldrb	r2, [r7, #1]
 80017d0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017d2:	7c3b      	ldrb	r3, [r7, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d114      	bne.n	8001802 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	332a      	adds	r3, #42	; 0x2a
 80017e8:	2203      	movs	r2, #3
 80017ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	3319      	adds	r3, #25
 80017fc:	7f3a      	ldrb	r2, [r7, #28]
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	e009      	b.n	8001816 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	1a9b      	subs	r3, r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	332a      	adds	r3, #42	; 0x2a
 8001812:	2202      	movs	r2, #2
 8001814:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001816:	787b      	ldrb	r3, [r7, #1]
 8001818:	2b03      	cmp	r3, #3
 800181a:	f200 8102 	bhi.w	8001a22 <HAL_HCD_HC_SubmitRequest+0x292>
 800181e:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	08001835 	.word	0x08001835
 8001828:	08001a0d 	.word	0x08001a0d
 800182c:	080018f9 	.word	0x080018f9
 8001830:	08001983 	.word	0x08001983
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001834:	7c3b      	ldrb	r3, [r7, #16]
 8001836:	2b01      	cmp	r3, #1
 8001838:	f040 80f5 	bne.w	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800183c:	78bb      	ldrb	r3, [r7, #2]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d12d      	bne.n	800189e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001842:	8b3b      	ldrh	r3, [r7, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d109      	bne.n	800185c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	333d      	adds	r3, #61	; 0x3d
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	333d      	adds	r3, #61	; 0x3d
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10a      	bne.n	8001888 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	332a      	adds	r3, #42	; 0x2a
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001886:	e0ce      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	332a      	adds	r3, #42	; 0x2a
 8001898:	2202      	movs	r2, #2
 800189a:	701a      	strb	r2, [r3, #0]
      break;
 800189c:	e0c3      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	331a      	adds	r3, #26
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	f040 80b8 	bne.w	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	333c      	adds	r3, #60	; 0x3c
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	332a      	adds	r3, #42	; 0x2a
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
      break;
 80018e0:	e0a1      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	332a      	adds	r3, #42	; 0x2a
 80018f2:	2202      	movs	r2, #2
 80018f4:	701a      	strb	r2, [r3, #0]
      break;
 80018f6:	e096      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018f8:	78bb      	ldrb	r3, [r7, #2]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d120      	bne.n	8001940 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	333d      	adds	r3, #61	; 0x3d
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10a      	bne.n	800192a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	332a      	adds	r3, #42	; 0x2a
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001928:	e07e      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	332a      	adds	r3, #42	; 0x2a
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
      break;
 800193e:	e073      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	333c      	adds	r3, #60	; 0x3c
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10a      	bne.n	800196c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	332a      	adds	r3, #42	; 0x2a
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
      break;
 800196a:	e05d      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	332a      	adds	r3, #42	; 0x2a
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]
      break;
 8001980:	e052      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001982:	78bb      	ldrb	r3, [r7, #2]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d120      	bne.n	80019ca <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	333d      	adds	r3, #61	; 0x3d
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10a      	bne.n	80019b4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	332a      	adds	r3, #42	; 0x2a
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019b2:	e039      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	332a      	adds	r3, #42	; 0x2a
 80019c4:	2202      	movs	r2, #2
 80019c6:	701a      	strb	r2, [r3, #0]
      break;
 80019c8:	e02e      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	1a9b      	subs	r3, r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	333c      	adds	r3, #60	; 0x3c
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10a      	bne.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	332a      	adds	r3, #42	; 0x2a
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
      break;
 80019f4:	e018      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	332a      	adds	r3, #42	; 0x2a
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
      break;
 8001a0a:	e00d      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	332a      	adds	r3, #42	; 0x2a
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
      break;
 8001a20:	e002      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a22:	bf00      	nop
 8001a24:	e000      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a26:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	332c      	adds	r3, #44	; 0x2c
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	8b39      	ldrh	r1, [r7, #24]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4403      	add	r3, r0
 8001a4c:	3334      	adds	r3, #52	; 0x34
 8001a4e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	334c      	adds	r3, #76	; 0x4c
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3338      	adds	r3, #56	; 0x38
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	3315      	adds	r3, #21
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	334d      	adds	r3, #77	; 0x4d
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	78fa      	ldrb	r2, [r7, #3]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	3310      	adds	r3, #16
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	1d19      	adds	r1, r3, #4
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	799b      	ldrb	r3, [r3, #6]
 8001aba:	461a      	mov	r2, r3
 8001abc:	f004 fb86 	bl	80061cc <USB_HC_StartXfer>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop

08001acc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 f87a 	bl	8005bdc <USB_GetMode>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	f040 80fb 	bne.w	8001ce6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f004 f83d 	bl	8005b74 <USB_ReadInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80f1 	beq.w	8001ce4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f004 f834 	bl	8005b74 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b16:	d104      	bne.n	8001b22 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 f824 	bl	8005b74 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b36:	d104      	bne.n	8001b42 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f004 f814 	bl	8005b74 <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b56:	d104      	bne.n	8001b62 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f004 f804 	bl	8005b74 <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d103      	bne.n	8001b7e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fff6 	bl	8005b74 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b92:	d120      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b9c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d113      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bae:	2110      	movs	r1, #16
 8001bb0:	6938      	ldr	r0, [r7, #16]
 8001bb2:	f003 fee9 	bl	8005988 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bb6:	6938      	ldr	r0, [r7, #16]
 8001bb8:	f003 ff18 	bl	80059ec <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7a5b      	ldrb	r3, [r3, #9]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d105      	bne.n	8001bd0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f004 f90a 	bl	8005de4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f007 f8e1 	bl	8008d98 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 ffca 	bl	8005b74 <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bea:	d102      	bne.n	8001bf2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f001 fd33 	bl	8003658 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 ffbc 	bl	8005b74 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d106      	bne.n	8001c14 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f007 f8aa 	bl	8008d60 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2208      	movs	r2, #8
 8001c12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f003 ffab 	bl	8005b74 <USB_ReadInterrupts>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c28:	d139      	bne.n	8001c9e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f004 fd46 	bl	80066c0 <USB_HC_ReadInterrupt>
 8001c34:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e025      	b.n	8001c88 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d018      	beq.n	8001c82 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c66:	d106      	bne.n	8001c76 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f905 	bl	8001e7e <HCD_HC_IN_IRQHandler>
 8001c74:	e005      	b.n	8001c82 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 ff67 	bl	8002b50 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	795b      	ldrb	r3, [r3, #5]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d3d3      	bcc.n	8001c3c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 ff66 	bl	8005b74 <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d101      	bne.n	8001cb6 <HAL_HCD_IRQHandler+0x1ea>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_HCD_IRQHandler+0x1ec>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d014      	beq.n	8001ce6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0210 	bic.w	r2, r2, #16
 8001cca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f001 fbe4 	bl	800349a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699a      	ldr	r2, [r3, #24]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 0210 	orr.w	r2, r2, #16
 8001ce0:	619a      	str	r2, [r3, #24]
 8001ce2:	e000      	b.n	8001ce6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001ce4:	bf00      	nop
    }
  }
}
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_HCD_Start+0x16>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e013      	b.n	8001d2a <HAL_HCD_Start+0x3e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2101      	movs	r1, #1
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 f8ce 	bl	8005eb2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f003 fdc6 	bl	80058ac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_HCD_Stop+0x16>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e00d      	b.n	8001d64 <HAL_HCD_Stop+0x32>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f004 fe21 	bl	800699c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f004 f870 	bl	8005e5e <USB_ResetPort>
 8001d7e:	4603      	mov	r3, r0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	334c      	adds	r3, #76	; 0x4c
 8001da4:	781b      	ldrb	r3, [r3, #0]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	3338      	adds	r3, #56	; 0x38
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f004 f8b2 	bl	8005f52 <USB_GetCurrentFrame>
 8001dee:	4603      	mov	r3, r0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 f88d 	bl	8005f24 <USB_GetHostSpeed>
 8001e0a:	4603      	mov	r3, r0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	331a      	adds	r3, #26
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	331b      	adds	r3, #27
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	3325      	adds	r3, #37	; 0x25
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3324      	adds	r3, #36	; 0x24
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fe7c 	bl	8005b9a <USB_ReadChInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d11a      	bne.n	8001ee2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2304      	movs	r3, #4
 8001ebc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	334d      	adds	r3, #77	; 0x4d
 8001ece:	2207      	movs	r2, #7
 8001ed0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 fc01 	bl	80066e2 <USB_HC_Halt>
 8001ee0:	e09e      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 fe55 	bl	8005b9a <USB_ReadChInterrupts>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001efa:	d11b      	bne.n	8001f34 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	334d      	adds	r3, #77	; 0x4d
 8001f20:	2208      	movs	r2, #8
 8001f22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 fbd8 	bl	80066e2 <USB_HC_Halt>
 8001f32:	e075      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 fe2c 	bl	8005b9a <USB_ReadChInterrupts>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d11a      	bne.n	8001f82 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	334d      	adds	r3, #77	; 0x4d
 8001f6e:	2206      	movs	r2, #6
 8001f70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f004 fbb1 	bl	80066e2 <USB_HC_Halt>
 8001f80:	e04e      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 fe05 	bl	8005b9a <USB_ReadChInterrupts>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9a:	d11b      	bne.n	8001fd4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	461a      	mov	r2, r3
 8001faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	334d      	adds	r3, #77	; 0x4d
 8001fc0:	2209      	movs	r2, #9
 8001fc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f004 fb88 	bl	80066e2 <USB_HC_Halt>
 8001fd2:	e025      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fddc 	bl	8005b9a <USB_ReadChInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe8:	2b80      	cmp	r3, #128	; 0x80
 8001fea:	d119      	bne.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ffe:	78fa      	ldrb	r2, [r7, #3]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	334d      	adds	r3, #77	; 0x4d
 800200e:	2207      	movs	r2, #7
 8002010:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f004 fb61 	bl	80066e2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f003 fdb6 	bl	8005b9a <USB_ReadChInterrupts>
 800202e:	4603      	mov	r3, r0
 8002030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002038:	d112      	bne.n	8002060 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	78fa      	ldrb	r2, [r7, #3]
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f004 fb4d 	bl	80066e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002054:	461a      	mov	r2, r3
 8002056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800205a:	6093      	str	r3, [r2, #8]
 800205c:	f000 bd75 	b.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f003 fd96 	bl	8005b9a <USB_ReadChInterrupts>
 800206e:	4603      	mov	r3, r0
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	f040 8128 	bne.w	80022ca <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4413      	add	r3, r2
 8002082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002086:	461a      	mov	r2, r3
 8002088:	2320      	movs	r3, #32
 800208a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	331b      	adds	r3, #27
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d119      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020a2:	78fa      	ldrb	r2, [r7, #3]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	331b      	adds	r3, #27
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	0151      	lsls	r1, r2, #5
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	440a      	add	r2, r1
 80020cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	799b      	ldrb	r3, [r3, #6]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d01b      	beq.n	8002116 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3330      	adds	r3, #48	; 0x30
 80020ee:	6819      	ldr	r1, [r3, #0]
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	1ac9      	subs	r1, r1, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4403      	add	r3, r0
 8002112:	3338      	adds	r3, #56	; 0x38
 8002114:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	334d      	adds	r3, #77	; 0x4d
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	3344      	adds	r3, #68	; 0x44
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	461a      	mov	r2, r3
 800214c:	2301      	movs	r3, #1
 800214e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3326      	adds	r3, #38	; 0x26
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	3326      	adds	r3, #38	; 0x26
 8002176:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002178:	2b02      	cmp	r3, #2
 800217a:	d110      	bne.n	800219e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f004 faac 	bl	80066e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002196:	461a      	mov	r2, r3
 8002198:	2310      	movs	r3, #16
 800219a:	6093      	str	r3, [r2, #8]
 800219c:	e03d      	b.n	800221a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	3326      	adds	r3, #38	; 0x26
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d00a      	beq.n	80021ca <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3326      	adds	r3, #38	; 0x26
 80021c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d127      	bne.n	800221a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	0151      	lsls	r1, r2, #5
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	440a      	add	r2, r1
 80021e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021e8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	334c      	adds	r3, #76	; 0x4c
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	334c      	adds	r3, #76	; 0x4c
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	4619      	mov	r1, r3
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f006 fdcd 	bl	8008db4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	799b      	ldrb	r3, [r3, #6]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d13b      	bne.n	800229a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	3338      	adds	r3, #56	; 0x38
 8002232:	6819      	ldr	r1, [r3, #0]
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4403      	add	r3, r0
 8002242:	3328      	adds	r3, #40	; 0x28
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	440b      	add	r3, r1
 8002248:	1e59      	subs	r1, r3, #1
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4403      	add	r3, r0
 8002258:	3328      	adds	r3, #40	; 0x28
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8470 	beq.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	333c      	adds	r3, #60	; 0x3c
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2d8      	uxtb	r0, r3
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	333c      	adds	r3, #60	; 0x3c
 8002292:	4602      	mov	r2, r0
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	f000 bc58 	b.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	333c      	adds	r3, #60	; 0x3c
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2d8      	uxtb	r0, r3
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	333c      	adds	r3, #60	; 0x3c
 80022c2:	4602      	mov	r2, r0
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	f000 bc40 	b.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 fc61 	bl	8005b9a <USB_ReadChInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d131      	bne.n	8002346 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	461a      	mov	r2, r3
 80022f0:	2320      	movs	r3, #32
 80022f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	331a      	adds	r3, #26
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	f040 841f 	bne.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	331b      	adds	r3, #27
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	334d      	adds	r3, #77	; 0x4d
 8002330:	2203      	movs	r2, #3
 8002332:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f004 f9d0 	bl	80066e2 <USB_HC_Halt>
 8002342:	f000 bc02 	b.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f003 fc23 	bl	8005b9a <USB_ReadChInterrupts>
 8002354:	4603      	mov	r3, r0
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b02      	cmp	r3, #2
 800235c:	f040 8305 	bne.w	800296a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4413      	add	r3, r2
 8002368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236c:	461a      	mov	r2, r3
 800236e:	2302      	movs	r3, #2
 8002370:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	334d      	adds	r3, #77	; 0x4d
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d114      	bne.n	80023b2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	334d      	adds	r3, #77	; 0x4d
 8002398:	2202      	movs	r2, #2
 800239a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	334c      	adds	r3, #76	; 0x4c
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
 80023b0:	e2cc      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	334d      	adds	r3, #77	; 0x4d
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b06      	cmp	r3, #6
 80023c6:	d114      	bne.n	80023f2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	334d      	adds	r3, #77	; 0x4d
 80023d8:	2202      	movs	r2, #2
 80023da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	334c      	adds	r3, #76	; 0x4c
 80023ec:	2205      	movs	r2, #5
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e2ac      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	334d      	adds	r3, #77	; 0x4d
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b07      	cmp	r3, #7
 8002406:	d00b      	beq.n	8002420 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	334d      	adds	r3, #77	; 0x4d
 8002418:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800241a:	2b09      	cmp	r3, #9
 800241c:	f040 80a6 	bne.w	800256c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	334d      	adds	r3, #77	; 0x4d
 8002430:	2202      	movs	r2, #2
 8002432:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	3344      	adds	r3, #68	; 0x44
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	1c59      	adds	r1, r3, #1
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4403      	add	r3, r0
 8002454:	3344      	adds	r3, #68	; 0x44
 8002456:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	3344      	adds	r3, #68	; 0x44
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d943      	bls.n	80024f6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3344      	adds	r3, #68	; 0x44
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	331a      	adds	r3, #26
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d123      	bne.n	80024e0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	331b      	adds	r3, #27
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	331c      	adds	r3, #28
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	0151      	lsls	r1, r2, #5
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	440a      	add	r2, r1
 80024d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024de:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	334c      	adds	r3, #76	; 0x4c
 80024f0:	2204      	movs	r2, #4
 80024f2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024f4:	e229      	b.n	800294a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	334c      	adds	r3, #76	; 0x4c
 8002506:	2202      	movs	r2, #2
 8002508:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	3326      	adds	r3, #38	; 0x26
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00b      	beq.n	8002538 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	3326      	adds	r3, #38	; 0x26
 8002530:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002532:	2b02      	cmp	r3, #2
 8002534:	f040 8209 	bne.w	800294a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800254e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002556:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	461a      	mov	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800256a:	e1ee      	b.n	800294a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	334d      	adds	r3, #77	; 0x4d
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b05      	cmp	r3, #5
 8002580:	f040 80c8 	bne.w	8002714 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	334d      	adds	r3, #77	; 0x4d
 8002594:	2202      	movs	r2, #2
 8002596:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	331b      	adds	r3, #27
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	f040 81ce 	bne.w	800294c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3326      	adds	r3, #38	; 0x26
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d16b      	bne.n	800269e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80025c6:	78fa      	ldrb	r2, [r7, #3]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	3348      	adds	r3, #72	; 0x48
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	1c59      	adds	r1, r3, #1
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4403      	add	r3, r0
 80025e6:	3348      	adds	r3, #72	; 0x48
 80025e8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	3348      	adds	r3, #72	; 0x48
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d943      	bls.n	8002688 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3348      	adds	r3, #72	; 0x48
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	331b      	adds	r3, #27
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3344      	adds	r3, #68	; 0x44
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d809      	bhi.n	8002652 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	331c      	adds	r3, #28
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	0151      	lsls	r1, r2, #5
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	440a      	add	r2, r1
 8002668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800266c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002670:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002672:	78fa      	ldrb	r2, [r7, #3]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	334c      	adds	r3, #76	; 0x4c
 8002682:	2204      	movs	r2, #4
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e014      	b.n	80026b2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	334c      	adds	r3, #76	; 0x4c
 8002698:	2202      	movs	r2, #2
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e009      	b.n	80026b2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	334c      	adds	r3, #76	; 0x4c
 80026ae:	2202      	movs	r2, #2
 80026b0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3326      	adds	r3, #38	; 0x26
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3326      	adds	r3, #38	; 0x26
 80026d8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026da:	2b02      	cmp	r3, #2
 80026dc:	f040 8136 	bne.w	800294c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026f6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026fe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e11b      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334d      	adds	r3, #77	; 0x4d
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b03      	cmp	r3, #3
 8002728:	f040 8081 	bne.w	800282e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	334d      	adds	r3, #77	; 0x4d
 800273c:	2202      	movs	r2, #2
 800273e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	331b      	adds	r3, #27
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	f040 80fa 	bne.w	800294c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	334c      	adds	r3, #76	; 0x4c
 8002768:	2202      	movs	r2, #2
 800276a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	0151      	lsls	r1, r2, #5
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	440a      	add	r2, r1
 8002782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	0151      	lsls	r1, r2, #5
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	440a      	add	r2, r1
 80027a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027aa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	0151      	lsls	r1, r2, #5
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	440a      	add	r2, r1
 80027c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027c6:	f023 0320 	bic.w	r3, r3, #32
 80027ca:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3326      	adds	r3, #38	; 0x26
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	3326      	adds	r3, #38	; 0x26
 80027f2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	f040 80a9 	bne.w	800294c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002810:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002818:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	e08e      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	334d      	adds	r3, #77	; 0x4d
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b04      	cmp	r3, #4
 8002842:	d143      	bne.n	80028cc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	334d      	adds	r3, #77	; 0x4d
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	334c      	adds	r3, #76	; 0x4c
 8002868:	2202      	movs	r2, #2
 800286a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	3326      	adds	r3, #38	; 0x26
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	3326      	adds	r3, #38	; 0x26
 8002892:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002894:	2b02      	cmp	r3, #2
 8002896:	d159      	bne.n	800294c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028ae:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028b6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c4:	461a      	mov	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e03f      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	334d      	adds	r3, #77	; 0x4d
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d126      	bne.n	8002930 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	334d      	adds	r3, #77	; 0x4d
 80028f2:	2202      	movs	r2, #2
 80028f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3344      	adds	r3, #68	; 0x44
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	1c59      	adds	r1, r3, #1
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4403      	add	r3, r0
 8002916:	3344      	adds	r3, #68	; 0x44
 8002918:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	334c      	adds	r3, #76	; 0x4c
 800292a:	2204      	movs	r2, #4
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e00d      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	334d      	adds	r3, #77	; 0x4d
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b02      	cmp	r3, #2
 8002944:	f000 8100 	beq.w	8002b48 <HCD_HC_IN_IRQHandler+0xcca>
 8002948:	e000      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800294a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	334c      	adds	r3, #76	; 0x4c
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	4619      	mov	r1, r3
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f006 fa26 	bl	8008db4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002968:	e0ef      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f003 f911 	bl	8005b9a <USB_ReadChInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d12f      	bne.n	80029e2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	461a      	mov	r2, r3
 8002990:	2340      	movs	r3, #64	; 0x40
 8002992:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	334d      	adds	r3, #77	; 0x4d
 80029a4:	2205      	movs	r2, #5
 80029a6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	331a      	adds	r3, #26
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3344      	adds	r3, #68	; 0x44
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 fe81 	bl	80066e2 <USB_HC_Halt>
 80029e0:	e0b3      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 f8d5 	bl	8005b9a <USB_ReadChInterrupts>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b10      	cmp	r3, #16
 80029f8:	f040 80a7 	bne.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3326      	adds	r3, #38	; 0x26
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d11b      	bne.n	8002a4a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3344      	adds	r3, #68	; 0x44
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	334d      	adds	r3, #77	; 0x4d
 8002a36:	2204      	movs	r2, #4
 8002a38:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 fe4d 	bl	80066e2 <USB_HC_Halt>
 8002a48:	e03f      	b.n	8002aca <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	3326      	adds	r3, #38	; 0x26
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3326      	adds	r3, #38	; 0x26
 8002a70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d129      	bne.n	8002aca <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	3344      	adds	r3, #68	; 0x44
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	799b      	ldrb	r3, [r3, #6]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	331b      	adds	r3, #27
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d110      	bne.n	8002aca <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	334d      	adds	r3, #77	; 0x4d
 8002ab8:	2204      	movs	r2, #4
 8002aba:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 fe0c 	bl	80066e2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	331b      	adds	r3, #27
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d129      	bne.n	8002b34 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	331b      	adds	r3, #27
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	0151      	lsls	r1, r2, #5
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	440a      	add	r2, r1
 8002b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b12:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	0151      	lsls	r1, r2, #5
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	440a      	add	r2, r1
 8002b2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b2e:	f043 0320 	orr.w	r3, r3, #32
 8002b32:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	2310      	movs	r3, #16
 8002b44:	6093      	str	r3, [r2, #8]
 8002b46:	e000      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b48:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 f813 	bl	8005b9a <USB_ReadChInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d11b      	bne.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	334d      	adds	r3, #77	; 0x4d
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 fd98 	bl	80066e2 <USB_HC_Halt>
 8002bb2:	f000 bc6f 	b.w	8003494 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f002 ffeb 	bl	8005b9a <USB_ReadChInterrupts>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	f040 8082 	bne.w	8002cd4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2320      	movs	r3, #32
 8002be0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	3319      	adds	r3, #25
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d124      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	3319      	adds	r3, #25
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	334c      	adds	r3, #76	; 0x4c
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334d      	adds	r3, #77	; 0x4d
 8002c30:	2203      	movs	r2, #3
 8002c32:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 fd50 	bl	80066e2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	331a      	adds	r3, #26
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	f040 841d 	bne.w	8003494 <HCD_HC_OUT_IRQHandler+0x944>
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	331b      	adds	r3, #27
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f040 8411 	bne.w	8003494 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3326      	adds	r3, #38	; 0x26
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d009      	beq.n	8002c9c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	331b      	adds	r3, #27
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	334d      	adds	r3, #77	; 0x4d
 8002cac:	2203      	movs	r2, #3
 8002cae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fd12 	bl	80066e2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	3344      	adds	r3, #68	; 0x44
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	e3df      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f002 ff5c 	bl	8005b9a <USB_ReadChInterrupts>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cec:	d111      	bne.n	8002d12 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d00:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 fce9 	bl	80066e2 <USB_HC_Halt>
 8002d10:	e3c0      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 ff3d 	bl	8005b9a <USB_ReadChInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d168      	bne.n	8002dfc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3344      	adds	r3, #68	; 0x44
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 ff27 	bl	8005b9a <USB_ReadChInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d112      	bne.n	8002d7c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	3319      	adds	r3, #25
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d76:	461a      	mov	r2, r3
 8002d78:	2340      	movs	r3, #64	; 0x40
 8002d7a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	331b      	adds	r3, #27
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d019      	beq.n	8002dc6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	331b      	adds	r3, #27
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	0151      	lsls	r1, r2, #5
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	440a      	add	r2, r1
 8002dbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	334d      	adds	r3, #77	; 0x4d
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f003 fc74 	bl	80066e2 <USB_HC_Halt>
 8002dfa:	e34b      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f002 fec8 	bl	8005b9a <USB_ReadChInterrupts>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d139      	bne.n	8002e88 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	334d      	adds	r3, #77	; 0x4d
 8002e24:	2205      	movs	r2, #5
 8002e26:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	331a      	adds	r3, #26
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3319      	adds	r3, #25
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	3344      	adds	r3, #68	; 0x44
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f003 fc37 	bl	80066e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e80:	461a      	mov	r2, r3
 8002e82:	2340      	movs	r3, #64	; 0x40
 8002e84:	6093      	str	r3, [r2, #8]
 8002e86:	e305      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f002 fe82 	bl	8005b9a <USB_ReadChInterrupts>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d11a      	bne.n	8002ed6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eac:	461a      	mov	r2, r3
 8002eae:	2308      	movs	r3, #8
 8002eb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	334d      	adds	r3, #77	; 0x4d
 8002ec2:	2206      	movs	r2, #6
 8002ec4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 fc07 	bl	80066e2 <USB_HC_Halt>
 8002ed4:	e2de      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f002 fe5b 	bl	8005b9a <USB_ReadChInterrupts>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b10      	cmp	r3, #16
 8002eec:	d144      	bne.n	8002f78 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3344      	adds	r3, #68	; 0x44
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	334d      	adds	r3, #77	; 0x4d
 8002f12:	2204      	movs	r2, #4
 8002f14:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	3319      	adds	r3, #25
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d114      	bne.n	8002f56 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3318      	adds	r3, #24
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	3319      	adds	r3, #25
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f003 fbbf 	bl	80066e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	461a      	mov	r2, r3
 8002f72:	2310      	movs	r3, #16
 8002f74:	6093      	str	r3, [r2, #8]
 8002f76:	e28d      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f002 fe0a 	bl	8005b9a <USB_ReadChInterrupts>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d169      	bne.n	8003064 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	799b      	ldrb	r3, [r3, #6]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d111      	bne.n	8002fbc <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	334d      	adds	r3, #77	; 0x4d
 8002fa8:	2207      	movs	r2, #7
 8002faa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f003 fb94 	bl	80066e2 <USB_HC_Halt>
 8002fba:	e049      	b.n	8003050 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	3344      	adds	r3, #68	; 0x44
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	1c59      	adds	r1, r3, #1
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4403      	add	r3, r0
 8002fdc:	3344      	adds	r3, #68	; 0x44
 8002fde:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	3344      	adds	r3, #68	; 0x44
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d922      	bls.n	800303c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	3344      	adds	r3, #68	; 0x44
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	334c      	adds	r3, #76	; 0x4c
 800301a:	2204      	movs	r2, #4
 800301c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	334c      	adds	r3, #76	; 0x4c
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f005 febd 	bl	8008db4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800303a:	e009      	b.n	8003050 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	334c      	adds	r3, #76	; 0x4c
 800304c:	2202      	movs	r2, #2
 800304e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	461a      	mov	r2, r3
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	6093      	str	r3, [r2, #8]
 8003062:	e217      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f002 fd94 	bl	8005b9a <USB_ReadChInterrupts>
 8003072:	4603      	mov	r3, r0
 8003074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307c:	d11b      	bne.n	80030b6 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	334d      	adds	r3, #77	; 0x4d
 800308e:	2209      	movs	r2, #9
 8003090:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f003 fb21 	bl	80066e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ac:	461a      	mov	r2, r3
 80030ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030b2:	6093      	str	r3, [r2, #8]
 80030b4:	e1ee      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fd6b 	bl	8005b9a <USB_ReadChInterrupts>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	f040 81df 	bne.w	800348e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030dc:	461a      	mov	r2, r3
 80030de:	2302      	movs	r3, #2
 80030e0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	334d      	adds	r3, #77	; 0x4d
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	f040 8093 	bne.w	8003220 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	334d      	adds	r3, #77	; 0x4d
 800310a:	2202      	movs	r2, #2
 800310c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	334c      	adds	r3, #76	; 0x4c
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3326      	adds	r3, #38	; 0x26
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d00b      	beq.n	8003150 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	3326      	adds	r3, #38	; 0x26
 8003148:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800314a:	2b03      	cmp	r3, #3
 800314c:	f040 8190 	bne.w	8003470 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	799b      	ldrb	r3, [r3, #6]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d115      	bne.n	8003184 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	333d      	adds	r3, #61	; 0x3d
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	f083 0301 	eor.w	r3, r3, #1
 8003170:	b2d8      	uxtb	r0, r3
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	333d      	adds	r3, #61	; 0x3d
 8003180:	4602      	mov	r2, r0
 8003182:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	799b      	ldrb	r3, [r3, #6]
 8003188:	2b01      	cmp	r3, #1
 800318a:	f040 8171 	bne.w	8003470 <HCD_HC_OUT_IRQHandler+0x920>
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	3334      	adds	r3, #52	; 0x34
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8165 	beq.w	8003470 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3334      	adds	r3, #52	; 0x34
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4403      	add	r3, r0
 80031c6:	3328      	adds	r3, #40	; 0x28
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	440b      	add	r3, r1
 80031cc:	1e59      	subs	r1, r3, #1
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4403      	add	r3, r0
 80031dc:	3328      	adds	r3, #40	; 0x28
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 813f 	beq.w	8003470 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	333d      	adds	r3, #61	; 0x3d
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	f083 0301 	eor.w	r3, r3, #1
 800320a:	b2d8      	uxtb	r0, r3
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	333d      	adds	r3, #61	; 0x3d
 800321a:	4602      	mov	r2, r0
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e127      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	334d      	adds	r3, #77	; 0x4d
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d120      	bne.n	8003278 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	334d      	adds	r3, #77	; 0x4d
 8003246:	2202      	movs	r2, #2
 8003248:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	331b      	adds	r3, #27
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	f040 8107 	bne.w	8003470 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	334c      	adds	r3, #76	; 0x4c
 8003272:	2202      	movs	r2, #2
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e0fb      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	334d      	adds	r3, #77	; 0x4d
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b04      	cmp	r3, #4
 800328c:	d13a      	bne.n	8003304 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	334d      	adds	r3, #77	; 0x4d
 800329e:	2202      	movs	r2, #2
 80032a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	334c      	adds	r3, #76	; 0x4c
 80032b2:	2202      	movs	r2, #2
 80032b4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	331b      	adds	r3, #27
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	f040 80d1 	bne.w	8003470 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	331b      	adds	r3, #27
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	78fa      	ldrb	r2, [r7, #3]
 80032f2:	0151      	lsls	r1, r2, #5
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	440a      	add	r2, r1
 80032f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003300:	6053      	str	r3, [r2, #4]
 8003302:	e0b5      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	334d      	adds	r3, #77	; 0x4d
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b05      	cmp	r3, #5
 8003318:	d114      	bne.n	8003344 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	334d      	adds	r3, #77	; 0x4d
 800332a:	2202      	movs	r2, #2
 800332c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	334c      	adds	r3, #76	; 0x4c
 800333e:	2202      	movs	r2, #2
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	e095      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	334d      	adds	r3, #77	; 0x4d
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b06      	cmp	r3, #6
 8003358:	d114      	bne.n	8003384 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	334d      	adds	r3, #77	; 0x4d
 800336a:	2202      	movs	r2, #2
 800336c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	334c      	adds	r3, #76	; 0x4c
 800337e:	2205      	movs	r2, #5
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	e075      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	334d      	adds	r3, #77	; 0x4d
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b07      	cmp	r3, #7
 8003398:	d00a      	beq.n	80033b0 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	334d      	adds	r3, #77	; 0x4d
 80033aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033ac:	2b09      	cmp	r3, #9
 80033ae:	d170      	bne.n	8003492 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	334d      	adds	r3, #77	; 0x4d
 80033c0:	2202      	movs	r2, #2
 80033c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3344      	adds	r3, #68	; 0x44
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	1c59      	adds	r1, r3, #1
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4403      	add	r3, r0
 80033e4:	3344      	adds	r3, #68	; 0x44
 80033e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	3344      	adds	r3, #68	; 0x44
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d914      	bls.n	8003428 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3344      	adds	r3, #68	; 0x44
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	334c      	adds	r3, #76	; 0x4c
 8003422:	2204      	movs	r2, #4
 8003424:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003426:	e022      	b.n	800346e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	334c      	adds	r3, #76	; 0x4c
 8003438:	2202      	movs	r2, #2
 800343a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003452:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800345a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003468:	461a      	mov	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800346e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334c      	adds	r3, #76	; 0x4c
 8003480:	781a      	ldrb	r2, [r3, #0]
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f005 fc94 	bl	8008db4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800348c:	e002      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003492:	bf00      	nop
  }
}
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b08a      	sub	sp, #40	; 0x28
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	0c5b      	lsrs	r3, r3, #17
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d004      	beq.n	80034e0 <HCD_RXQLVL_IRQHandler+0x46>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b05      	cmp	r3, #5
 80034da:	f000 80b6 	beq.w	800364a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034de:	e0b7      	b.n	8003650 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80b3 	beq.w	800364e <HCD_RXQLVL_IRQHandler+0x1b4>
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	332c      	adds	r3, #44	; 0x2c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80a7 	beq.w	800364e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	3338      	adds	r3, #56	; 0x38
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	18d1      	adds	r1, r2, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4403      	add	r3, r0
 8003524:	3334      	adds	r3, #52	; 0x34
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4299      	cmp	r1, r3
 800352a:	f200 8083 	bhi.w	8003634 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	332c      	adds	r3, #44	; 0x2c
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	b292      	uxth	r2, r2
 8003548:	4619      	mov	r1, r3
 800354a:	f002 fabb 	bl	8005ac4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	332c      	adds	r3, #44	; 0x2c
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	18d1      	adds	r1, r2, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4403      	add	r3, r0
 8003572:	332c      	adds	r3, #44	; 0x2c
 8003574:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	3338      	adds	r3, #56	; 0x38
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	18d1      	adds	r1, r2, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4403      	add	r3, r0
 800359a:	3338      	adds	r3, #56	; 0x38
 800359c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	0cdb      	lsrs	r3, r3, #19
 80035ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035b2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4613      	mov	r3, r2
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	3328      	adds	r3, #40	; 0x28
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d13f      	bne.n	800364e <HCD_RXQLVL_IRQHandler+0x1b4>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d03c      	beq.n	800364e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035ea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035f2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003600:	461a      	mov	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4613      	mov	r3, r2
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	333c      	adds	r3, #60	; 0x3c
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	f083 0301 	eor.w	r3, r3, #1
 800361c:	b2d8      	uxtb	r0, r3
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4613      	mov	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	333c      	adds	r3, #60	; 0x3c
 800362e:	4602      	mov	r2, r0
 8003630:	701a      	strb	r2, [r3, #0]
      break;
 8003632:	e00c      	b.n	800364e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	334c      	adds	r3, #76	; 0x4c
 8003644:	2204      	movs	r2, #4
 8003646:	701a      	strb	r2, [r3, #0]
      break;
 8003648:	e001      	b.n	800364e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800364e:	bf00      	nop
  }
}
 8003650:	bf00      	nop
 8003652:	3728      	adds	r7, #40	; 0x28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003684:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d10b      	bne.n	80036a8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b01      	cmp	r3, #1
 8003698:	d102      	bne.n	80036a0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f005 fb6e 	bl	8008d7c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f043 0302 	orr.w	r3, r3, #2
 80036a6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d132      	bne.n	8003718 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f043 0308 	orr.w	r3, r3, #8
 80036b8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d126      	bne.n	8003712 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7a5b      	ldrb	r3, [r3, #9]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d113      	bne.n	80036f4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80036d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036d6:	d106      	bne.n	80036e6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2102      	movs	r1, #2
 80036de:	4618      	mov	r0, r3
 80036e0:	f002 fb80 	bl	8005de4 <USB_InitFSLSPClkSel>
 80036e4:	e011      	b.n	800370a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f002 fb79 	bl	8005de4 <USB_InitFSLSPClkSel>
 80036f2:	e00a      	b.n	800370a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	79db      	ldrb	r3, [r3, #7]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d106      	bne.n	800370a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003702:	461a      	mov	r2, r3
 8003704:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003708:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f005 fb60 	bl	8008dd0 <HAL_HCD_PortEnabled_Callback>
 8003710:	e002      	b.n	8003718 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f005 fb6a 	bl	8008dec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b20      	cmp	r3, #32
 8003720:	d103      	bne.n	800372a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f043 0320 	orr.w	r3, r3, #32
 8003728:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003730:	461a      	mov	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	6013      	str	r3, [r2, #0]
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e12b      	b.n	80039aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd f942 	bl	80009f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	; 0x24
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037a4:	f001 fa20 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 80037a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4a81      	ldr	r2, [pc, #516]	; (80039b4 <HAL_I2C_Init+0x274>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d807      	bhi.n	80037c4 <HAL_I2C_Init+0x84>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a80      	ldr	r2, [pc, #512]	; (80039b8 <HAL_I2C_Init+0x278>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	bf94      	ite	ls
 80037bc:	2301      	movls	r3, #1
 80037be:	2300      	movhi	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e006      	b.n	80037d2 <HAL_I2C_Init+0x92>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a7d      	ldr	r2, [pc, #500]	; (80039bc <HAL_I2C_Init+0x27c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	bf94      	ite	ls
 80037cc:	2301      	movls	r3, #1
 80037ce:	2300      	movhi	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0e7      	b.n	80039aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4a78      	ldr	r2, [pc, #480]	; (80039c0 <HAL_I2C_Init+0x280>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	0c9b      	lsrs	r3, r3, #18
 80037e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4a6a      	ldr	r2, [pc, #424]	; (80039b4 <HAL_I2C_Init+0x274>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d802      	bhi.n	8003814 <HAL_I2C_Init+0xd4>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3301      	adds	r3, #1
 8003812:	e009      	b.n	8003828 <HAL_I2C_Init+0xe8>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	4a69      	ldr	r2, [pc, #420]	; (80039c4 <HAL_I2C_Init+0x284>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	099b      	lsrs	r3, r3, #6
 8003826:	3301      	adds	r3, #1
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	430b      	orrs	r3, r1
 800382e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800383a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	495c      	ldr	r1, [pc, #368]	; (80039b4 <HAL_I2C_Init+0x274>)
 8003844:	428b      	cmp	r3, r1
 8003846:	d819      	bhi.n	800387c <HAL_I2C_Init+0x13c>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1e59      	subs	r1, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fbb1 f3f3 	udiv	r3, r1, r3
 8003856:	1c59      	adds	r1, r3, #1
 8003858:	f640 73fc 	movw	r3, #4092	; 0xffc
 800385c:	400b      	ands	r3, r1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_I2C_Init+0x138>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1e59      	subs	r1, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003870:	3301      	adds	r3, #1
 8003872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003876:	e051      	b.n	800391c <HAL_I2C_Init+0x1dc>
 8003878:	2304      	movs	r3, #4
 800387a:	e04f      	b.n	800391c <HAL_I2C_Init+0x1dc>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d111      	bne.n	80038a8 <HAL_I2C_Init+0x168>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1e58      	subs	r0, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	440b      	add	r3, r1
 8003892:	fbb0 f3f3 	udiv	r3, r0, r3
 8003896:	3301      	adds	r3, #1
 8003898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	e012      	b.n	80038ce <HAL_I2C_Init+0x18e>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1e58      	subs	r0, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	0099      	lsls	r1, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80038be:	3301      	adds	r3, #1
 80038c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Init+0x196>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e022      	b.n	800391c <HAL_I2C_Init+0x1dc>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10e      	bne.n	80038fc <HAL_I2C_Init+0x1bc>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1e58      	subs	r0, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	440b      	add	r3, r1
 80038ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fa:	e00f      	b.n	800391c <HAL_I2C_Init+0x1dc>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1e58      	subs	r0, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	0099      	lsls	r1, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003912:	3301      	adds	r3, #1
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	6809      	ldr	r1, [r1, #0]
 8003920:	4313      	orrs	r3, r2
 8003922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800394a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6911      	ldr	r1, [r2, #16]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68d2      	ldr	r2, [r2, #12]
 8003956:	4311      	orrs	r1, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	430b      	orrs	r3, r1
 800395e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	000186a0 	.word	0x000186a0
 80039b8:	001e847f 	.word	0x001e847f
 80039bc:	003d08ff 	.word	0x003d08ff
 80039c0:	431bde83 	.word	0x431bde83
 80039c4:	10624dd3 	.word	0x10624dd3

080039c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e128      	b.n	8003c2c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a90      	ldr	r2, [pc, #576]	; (8003c34 <HAL_I2S_Init+0x26c>)
 80039f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7fd f843 	bl	8000a80 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a10:	f023 030f 	bic.w	r3, r3, #15
 8003a14:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d060      	beq.n	8003ae8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a2e:	2310      	movs	r3, #16
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e001      	b.n	8003a38 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a34:	2320      	movs	r3, #32
 8003a36:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d802      	bhi.n	8003a46 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a46:	2001      	movs	r0, #1
 8003a48:	f001 f9d8 	bl	8004dfc <HAL_RCCEx_GetPeriphCLKFreq>
 8003a4c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a56:	d125      	bne.n	8003aa4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d010      	beq.n	8003a82 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	461a      	mov	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	3305      	adds	r3, #5
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	e01f      	b.n	8003ac2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	461a      	mov	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9e:	3305      	adds	r3, #5
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	e00e      	b.n	8003ac2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abe:	3305      	adds	r3, #5
 8003ac0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4a5c      	ldr	r2, [pc, #368]	; (8003c38 <HAL_I2S_Init+0x270>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	08db      	lsrs	r3, r3, #3
 8003acc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	e003      	b.n	8003af0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d902      	bls.n	8003afc <HAL_I2S_Init+0x134>
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2bff      	cmp	r3, #255	; 0xff
 8003afa:	d907      	bls.n	8003b0c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b00:	f043 0210 	orr.w	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e08f      	b.n	8003c2c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	ea42 0103 	orr.w	r1, r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b2a:	f023 030f 	bic.w	r3, r3, #15
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6851      	ldr	r1, [r2, #4]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6892      	ldr	r2, [r2, #8]
 8003b36:	4311      	orrs	r1, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	68d2      	ldr	r2, [r2, #12]
 8003b3c:	4311      	orrs	r1, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6992      	ldr	r2, [r2, #24]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b4e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d161      	bne.n	8003c1c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a38      	ldr	r2, [pc, #224]	; (8003c3c <HAL_I2S_Init+0x274>)
 8003b5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a37      	ldr	r2, [pc, #220]	; (8003c40 <HAL_I2S_Init+0x278>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d101      	bne.n	8003b6c <HAL_I2S_Init+0x1a4>
 8003b68:	4b36      	ldr	r3, [pc, #216]	; (8003c44 <HAL_I2S_Init+0x27c>)
 8003b6a:	e001      	b.n	8003b70 <HAL_I2S_Init+0x1a8>
 8003b6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	4932      	ldr	r1, [pc, #200]	; (8003c40 <HAL_I2S_Init+0x278>)
 8003b78:	428a      	cmp	r2, r1
 8003b7a:	d101      	bne.n	8003b80 <HAL_I2S_Init+0x1b8>
 8003b7c:	4a31      	ldr	r2, [pc, #196]	; (8003c44 <HAL_I2S_Init+0x27c>)
 8003b7e:	e001      	b.n	8003b84 <HAL_I2S_Init+0x1bc>
 8003b80:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b84:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b88:	f023 030f 	bic.w	r3, r3, #15
 8003b8c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2b      	ldr	r2, [pc, #172]	; (8003c40 <HAL_I2S_Init+0x278>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d101      	bne.n	8003b9c <HAL_I2S_Init+0x1d4>
 8003b98:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <HAL_I2S_Init+0x27c>)
 8003b9a:	e001      	b.n	8003ba0 <HAL_I2S_Init+0x1d8>
 8003b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <HAL_I2S_Init+0x278>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2S_Init+0x1ea>
 8003bae:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <HAL_I2S_Init+0x27c>)
 8003bb0:	e001      	b.n	8003bb6 <HAL_I2S_Init+0x1ee>
 8003bb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc2:	d003      	beq.n	8003bcc <HAL_I2S_Init+0x204>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e001      	b.n	8003bd8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003be2:	4313      	orrs	r3, r2
 8003be4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bec:	4313      	orrs	r3, r2
 8003bee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	897b      	ldrh	r3, [r7, #10]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c04:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a0d      	ldr	r2, [pc, #52]	; (8003c40 <HAL_I2S_Init+0x278>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d101      	bne.n	8003c14 <HAL_I2S_Init+0x24c>
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <HAL_I2S_Init+0x27c>)
 8003c12:	e001      	b.n	8003c18 <HAL_I2S_Init+0x250>
 8003c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c18:	897a      	ldrh	r2, [r7, #10]
 8003c1a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	08003d3f 	.word	0x08003d3f
 8003c38:	cccccccd 	.word	0xcccccccd
 8003c3c:	08003e55 	.word	0x08003e55
 8003c40:	40003800 	.word	0x40003800
 8003c44:	40003400 	.word	0x40003400

08003c48 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	1c9a      	adds	r2, r3, #2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10e      	bne.n	8003cd8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cc8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ffb8 	bl	8003c48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	b292      	uxth	r2, r2
 8003cf4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10e      	bne.n	8003d36 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d26:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ff93 	bl	8003c5c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d13a      	bne.n	8003dd0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d109      	bne.n	8003d78 <I2S_IRQHandler+0x3a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6e:	2b40      	cmp	r3, #64	; 0x40
 8003d70:	d102      	bne.n	8003d78 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ffb4 	bl	8003ce0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d126      	bne.n	8003dd0 <I2S_IRQHandler+0x92>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d11f      	bne.n	8003dd0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d9e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f043 0202 	orr.w	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ff50 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d136      	bne.n	8003e4a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d109      	bne.n	8003dfa <I2S_IRQHandler+0xbc>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b80      	cmp	r3, #128	; 0x80
 8003df2:	d102      	bne.n	8003dfa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff45 	bl	8003c84 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d122      	bne.n	8003e4a <I2S_IRQHandler+0x10c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d11b      	bne.n	8003e4a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e20:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	f043 0204 	orr.w	r2, r3, #4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff13 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a92      	ldr	r2, [pc, #584]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e6e:	4b92      	ldr	r3, [pc, #584]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e70:	e001      	b.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a8b      	ldr	r2, [pc, #556]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e8c:	4b8a      	ldr	r3, [pc, #552]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e8e:	e001      	b.n	8003e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea0:	d004      	beq.n	8003eac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f040 8099 	bne.w	8003fde <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d107      	bne.n	8003ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f925 	bl	8004110 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d107      	bne.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f9c8 	bl	8004270 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee6:	2b40      	cmp	r3, #64	; 0x40
 8003ee8:	d13a      	bne.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d035      	beq.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a6e      	ldr	r2, [pc, #440]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003efe:	4b6e      	ldr	r3, [pc, #440]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f00:	e001      	b.n	8003f06 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4969      	ldr	r1, [pc, #420]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f0e:	428b      	cmp	r3, r1
 8003f10:	d101      	bne.n	8003f16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f12:	4b69      	ldr	r3, [pc, #420]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f14:	e001      	b.n	8003f1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f1e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	f043 0202 	orr.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fe88 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	f040 80c3 	bne.w	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80bd 	beq.w	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f86:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a49      	ldr	r2, [pc, #292]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f92:	4b49      	ldr	r3, [pc, #292]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f94:	e001      	b.n	8003f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4944      	ldr	r1, [pc, #272]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fa2:	428b      	cmp	r3, r1
 8003fa4:	d101      	bne.n	8003faa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003fa6:	4b44      	ldr	r3, [pc, #272]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fa8:	e001      	b.n	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003faa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fb2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	f043 0204 	orr.w	r2, r3, #4
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fe4a 	bl	8003c70 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fdc:	e089      	b.n	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d107      	bne.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f8be 	bl	8004174 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d107      	bne.n	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f8fd 	bl	800420c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d12f      	bne.n	800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d02a      	beq.n	800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004034:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1e      	ldr	r2, [pc, #120]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d101      	bne.n	8004044 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004040:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004042:	e001      	b.n	8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4919      	ldr	r1, [pc, #100]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004050:	428b      	cmp	r3, r1
 8004052:	d101      	bne.n	8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004054:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004056:	e001      	b.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004060:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	f043 0202 	orr.w	r2, r3, #2
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff fdfa 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b08      	cmp	r3, #8
 8004084:	d136      	bne.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d031      	beq.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d101      	bne.n	800409e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800409a:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800409c:	e001      	b.n	80040a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800409e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4902      	ldr	r1, [pc, #8]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040aa:	428b      	cmp	r3, r1
 80040ac:	d106      	bne.n	80040bc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040ae:	4b02      	ldr	r3, [pc, #8]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040b0:	e006      	b.n	80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80040b2:	bf00      	nop
 80040b4:	40003800 	.word	0x40003800
 80040b8:	40003400 	.word	0x40003400
 80040bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040c4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	f043 0204 	orr.w	r2, r3, #4
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fdc0 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040f0:	e000      	b.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040f2:	bf00      	nop
}
 80040f4:	bf00      	nop
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	1c99      	adds	r1, r3, #2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6251      	str	r1, [r2, #36]	; 0x24
 8004122:	881a      	ldrh	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d113      	bne.n	800416a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004150:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ffc9 	bl	80040fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	1c99      	adds	r1, r3, #2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6251      	str	r1, [r2, #36]	; 0x24
 8004186:	8819      	ldrh	r1, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <I2SEx_TxISR_I2SExt+0x90>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d101      	bne.n	8004196 <I2SEx_TxISR_I2SExt+0x22>
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <I2SEx_TxISR_I2SExt+0x94>)
 8004194:	e001      	b.n	800419a <I2SEx_TxISR_I2SExt+0x26>
 8004196:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800419a:	460a      	mov	r2, r1
 800419c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d121      	bne.n	80041fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a12      	ldr	r2, [pc, #72]	; (8004204 <I2SEx_TxISR_I2SExt+0x90>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <I2SEx_TxISR_I2SExt+0x50>
 80041c0:	4b11      	ldr	r3, [pc, #68]	; (8004208 <I2SEx_TxISR_I2SExt+0x94>)
 80041c2:	e001      	b.n	80041c8 <I2SEx_TxISR_I2SExt+0x54>
 80041c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	490d      	ldr	r1, [pc, #52]	; (8004204 <I2SEx_TxISR_I2SExt+0x90>)
 80041d0:	428b      	cmp	r3, r1
 80041d2:	d101      	bne.n	80041d8 <I2SEx_TxISR_I2SExt+0x64>
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <I2SEx_TxISR_I2SExt+0x94>)
 80041d6:	e001      	b.n	80041dc <I2SEx_TxISR_I2SExt+0x68>
 80041d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ff81 	bl	80040fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40003800 	.word	0x40003800
 8004208:	40003400 	.word	0x40003400

0800420c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68d8      	ldr	r0, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	1c99      	adds	r1, r3, #2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004224:	b282      	uxth	r2, r0
 8004226:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d113      	bne.n	8004268 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800424e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff ff4a 	bl	80040fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a20      	ldr	r2, [pc, #128]	; (8004300 <I2SEx_RxISR_I2SExt+0x90>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d101      	bne.n	8004286 <I2SEx_RxISR_I2SExt+0x16>
 8004282:	4b20      	ldr	r3, [pc, #128]	; (8004304 <I2SEx_RxISR_I2SExt+0x94>)
 8004284:	e001      	b.n	800428a <I2SEx_RxISR_I2SExt+0x1a>
 8004286:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800428a:	68d8      	ldr	r0, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	1c99      	adds	r1, r3, #2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004296:	b282      	uxth	r2, r0
 8004298:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d121      	bne.n	80042f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a12      	ldr	r2, [pc, #72]	; (8004300 <I2SEx_RxISR_I2SExt+0x90>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d101      	bne.n	80042c0 <I2SEx_RxISR_I2SExt+0x50>
 80042bc:	4b11      	ldr	r3, [pc, #68]	; (8004304 <I2SEx_RxISR_I2SExt+0x94>)
 80042be:	e001      	b.n	80042c4 <I2SEx_RxISR_I2SExt+0x54>
 80042c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	490d      	ldr	r1, [pc, #52]	; (8004300 <I2SEx_RxISR_I2SExt+0x90>)
 80042cc:	428b      	cmp	r3, r1
 80042ce:	d101      	bne.n	80042d4 <I2SEx_RxISR_I2SExt+0x64>
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <I2SEx_RxISR_I2SExt+0x94>)
 80042d2:	e001      	b.n	80042d8 <I2SEx_RxISR_I2SExt+0x68>
 80042d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d106      	bne.n	80042f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ff03 	bl	80040fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40003800 	.word	0x40003800
 8004304:	40003400 	.word	0x40003400

08004308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e267      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d075      	beq.n	8004412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004326:	4b88      	ldr	r3, [pc, #544]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	2b04      	cmp	r3, #4
 8004330:	d00c      	beq.n	800434c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004332:	4b85      	ldr	r3, [pc, #532]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800433a:	2b08      	cmp	r3, #8
 800433c:	d112      	bne.n	8004364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800433e:	4b82      	ldr	r3, [pc, #520]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434a:	d10b      	bne.n	8004364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	4b7e      	ldr	r3, [pc, #504]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d05b      	beq.n	8004410 <HAL_RCC_OscConfig+0x108>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d157      	bne.n	8004410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e242      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436c:	d106      	bne.n	800437c <HAL_RCC_OscConfig+0x74>
 800436e:	4b76      	ldr	r3, [pc, #472]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a75      	ldr	r2, [pc, #468]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e01d      	b.n	80043b8 <HAL_RCC_OscConfig+0xb0>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x98>
 8004386:	4b70      	ldr	r3, [pc, #448]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a6f      	ldr	r2, [pc, #444]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800438c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b6d      	ldr	r3, [pc, #436]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a6c      	ldr	r2, [pc, #432]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e00b      	b.n	80043b8 <HAL_RCC_OscConfig+0xb0>
 80043a0:	4b69      	ldr	r3, [pc, #420]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a68      	ldr	r2, [pc, #416]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b66      	ldr	r3, [pc, #408]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a65      	ldr	r2, [pc, #404]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fc fd7a 	bl	8000eb8 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fc fd76 	bl	8000eb8 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e207      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b5b      	ldr	r3, [pc, #364]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0xc0>
 80043e6:	e014      	b.n	8004412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fc fd66 	bl	8000eb8 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fc fd62 	bl	8000eb8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e1f3      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004402:	4b51      	ldr	r3, [pc, #324]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0xe8>
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d063      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800441e:	4b4a      	ldr	r3, [pc, #296]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800442a:	4b47      	ldr	r3, [pc, #284]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004432:	2b08      	cmp	r3, #8
 8004434:	d11c      	bne.n	8004470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004436:	4b44      	ldr	r3, [pc, #272]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d116      	bne.n	8004470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004442:	4b41      	ldr	r3, [pc, #260]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_RCC_OscConfig+0x152>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d001      	beq.n	800445a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e1c7      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445a:	4b3b      	ldr	r3, [pc, #236]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4937      	ldr	r1, [pc, #220]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800446a:	4313      	orrs	r3, r2
 800446c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446e:	e03a      	b.n	80044e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d020      	beq.n	80044ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004478:	4b34      	ldr	r3, [pc, #208]	; (800454c <HAL_RCC_OscConfig+0x244>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fc fd1b 	bl	8000eb8 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004486:	f7fc fd17 	bl	8000eb8 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e1a8      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004498:	4b2b      	ldr	r3, [pc, #172]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a4:	4b28      	ldr	r3, [pc, #160]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4925      	ldr	r1, [pc, #148]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	600b      	str	r3, [r1, #0]
 80044b8:	e015      	b.n	80044e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ba:	4b24      	ldr	r3, [pc, #144]	; (800454c <HAL_RCC_OscConfig+0x244>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fc fcfa 	bl	8000eb8 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c8:	f7fc fcf6 	bl	8000eb8 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e187      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044da:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d036      	beq.n	8004560 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d016      	beq.n	8004528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044fa:	4b15      	ldr	r3, [pc, #84]	; (8004550 <HAL_RCC_OscConfig+0x248>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fc fcda 	bl	8000eb8 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004508:	f7fc fcd6 	bl	8000eb8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e167      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800451c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x200>
 8004526:	e01b      	b.n	8004560 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004528:	4b09      	ldr	r3, [pc, #36]	; (8004550 <HAL_RCC_OscConfig+0x248>)
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452e:	f7fc fcc3 	bl	8000eb8 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004534:	e00e      	b.n	8004554 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004536:	f7fc fcbf 	bl	8000eb8 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d907      	bls.n	8004554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e150      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
 8004548:	40023800 	.word	0x40023800
 800454c:	42470000 	.word	0x42470000
 8004550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004554:	4b88      	ldr	r3, [pc, #544]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ea      	bne.n	8004536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8097 	beq.w	800469c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800456e:	2300      	movs	r3, #0
 8004570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004572:	4b81      	ldr	r3, [pc, #516]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10f      	bne.n	800459e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	4b7d      	ldr	r3, [pc, #500]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	4a7c      	ldr	r2, [pc, #496]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458c:	6413      	str	r3, [r2, #64]	; 0x40
 800458e:	4b7a      	ldr	r3, [pc, #488]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459e:	4b77      	ldr	r3, [pc, #476]	; (800477c <HAL_RCC_OscConfig+0x474>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d118      	bne.n	80045dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045aa:	4b74      	ldr	r3, [pc, #464]	; (800477c <HAL_RCC_OscConfig+0x474>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a73      	ldr	r2, [pc, #460]	; (800477c <HAL_RCC_OscConfig+0x474>)
 80045b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045b6:	f7fc fc7f 	bl	8000eb8 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045be:	f7fc fc7b 	bl	8000eb8 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e10c      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d0:	4b6a      	ldr	r3, [pc, #424]	; (800477c <HAL_RCC_OscConfig+0x474>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d106      	bne.n	80045f2 <HAL_RCC_OscConfig+0x2ea>
 80045e4:	4b64      	ldr	r3, [pc, #400]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80045e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e8:	4a63      	ldr	r2, [pc, #396]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	6713      	str	r3, [r2, #112]	; 0x70
 80045f0:	e01c      	b.n	800462c <HAL_RCC_OscConfig+0x324>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d10c      	bne.n	8004614 <HAL_RCC_OscConfig+0x30c>
 80045fa:	4b5f      	ldr	r3, [pc, #380]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	4a5e      	ldr	r2, [pc, #376]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004600:	f043 0304 	orr.w	r3, r3, #4
 8004604:	6713      	str	r3, [r2, #112]	; 0x70
 8004606:	4b5c      	ldr	r3, [pc, #368]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	4a5b      	ldr	r2, [pc, #364]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	6713      	str	r3, [r2, #112]	; 0x70
 8004612:	e00b      	b.n	800462c <HAL_RCC_OscConfig+0x324>
 8004614:	4b58      	ldr	r3, [pc, #352]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	4a57      	ldr	r2, [pc, #348]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	6713      	str	r3, [r2, #112]	; 0x70
 8004620:	4b55      	ldr	r3, [pc, #340]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	4a54      	ldr	r2, [pc, #336]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004626:	f023 0304 	bic.w	r3, r3, #4
 800462a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d015      	beq.n	8004660 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004634:	f7fc fc40 	bl	8000eb8 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463a:	e00a      	b.n	8004652 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800463c:	f7fc fc3c 	bl	8000eb8 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f241 3288 	movw	r2, #5000	; 0x1388
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e0cb      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004652:	4b49      	ldr	r3, [pc, #292]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0ee      	beq.n	800463c <HAL_RCC_OscConfig+0x334>
 800465e:	e014      	b.n	800468a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004660:	f7fc fc2a 	bl	8000eb8 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004666:	e00a      	b.n	800467e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004668:	f7fc fc26 	bl	8000eb8 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e0b5      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467e:	4b3e      	ldr	r3, [pc, #248]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1ee      	bne.n	8004668 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800468a:	7dfb      	ldrb	r3, [r7, #23]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d105      	bne.n	800469c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004690:	4b39      	ldr	r3, [pc, #228]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	4a38      	ldr	r2, [pc, #224]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800469a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80a1 	beq.w	80047e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046a6:	4b34      	ldr	r3, [pc, #208]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d05c      	beq.n	800476c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d141      	bne.n	800473e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b31      	ldr	r3, [pc, #196]	; (8004780 <HAL_RCC_OscConfig+0x478>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fc fbfa 	bl	8000eb8 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fc fbf6 	bl	8000eb8 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e087      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046da:	4b27      	ldr	r3, [pc, #156]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	019b      	lsls	r3, r3, #6
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	3b01      	subs	r3, #1
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	061b      	lsls	r3, r3, #24
 800470a:	491b      	ldr	r1, [pc, #108]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 800470c:	4313      	orrs	r3, r2
 800470e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004710:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <HAL_RCC_OscConfig+0x478>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004716:	f7fc fbcf 	bl	8000eb8 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800471e:	f7fc fbcb 	bl	8000eb8 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e05c      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x416>
 800473c:	e054      	b.n	80047e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_RCC_OscConfig+0x478>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fc fbb8 	bl	8000eb8 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474c:	f7fc fbb4 	bl	8000eb8 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e045      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x444>
 800476a:	e03d      	b.n	80047e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e038      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
 8004778:	40023800 	.word	0x40023800
 800477c:	40007000 	.word	0x40007000
 8004780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004784:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <HAL_RCC_OscConfig+0x4ec>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d028      	beq.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d121      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d11a      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047b4:	4013      	ands	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047bc:	4293      	cmp	r3, r2
 80047be:	d111      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	3b01      	subs	r3, #1
 80047ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d107      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800

080047f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0cc      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	4b68      	ldr	r3, [pc, #416]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d90c      	bls.n	8004834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b65      	ldr	r3, [pc, #404]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b63      	ldr	r3, [pc, #396]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0b8      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d020      	beq.n	8004882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800484c:	4b59      	ldr	r3, [pc, #356]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	4a58      	ldr	r2, [pc, #352]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004864:	4b53      	ldr	r3, [pc, #332]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4a52      	ldr	r2, [pc, #328]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800486e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004870:	4b50      	ldr	r3, [pc, #320]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	494d      	ldr	r1, [pc, #308]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d044      	beq.n	8004918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d107      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004896:	4b47      	ldr	r3, [pc, #284]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d119      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e07f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d003      	beq.n	80048b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b6:	4b3f      	ldr	r3, [pc, #252]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e06f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c6:	4b3b      	ldr	r3, [pc, #236]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e067      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048d6:	4b37      	ldr	r3, [pc, #220]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f023 0203 	bic.w	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4934      	ldr	r1, [pc, #208]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048e8:	f7fc fae6 	bl	8000eb8 <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ee:	e00a      	b.n	8004906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f0:	f7fc fae2 	bl	8000eb8 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e04f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	4b2b      	ldr	r3, [pc, #172]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 020c 	and.w	r2, r3, #12
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	429a      	cmp	r2, r3
 8004916:	d1eb      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004918:	4b25      	ldr	r3, [pc, #148]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d20c      	bcs.n	8004940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004926:	4b22      	ldr	r3, [pc, #136]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492e:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e032      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800494c:	4b19      	ldr	r3, [pc, #100]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4916      	ldr	r1, [pc, #88]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800496a:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	490e      	ldr	r1, [pc, #56]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800497e:	f000 f821 	bl	80049c4 <HAL_RCC_GetSysClockFreq>
 8004982:	4602      	mov	r2, r0
 8004984:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	490a      	ldr	r1, [pc, #40]	; (80049b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	5ccb      	ldrb	r3, [r1, r3]
 8004992:	fa22 f303 	lsr.w	r3, r2, r3
 8004996:	4a09      	ldr	r2, [pc, #36]	; (80049bc <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800499a:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <HAL_RCC_ClockConfig+0x1c8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fc fa46 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40023c00 	.word	0x40023c00
 80049b4:	40023800 	.word	0x40023800
 80049b8:	080094b0 	.word	0x080094b0
 80049bc:	20000000 	.word	0x20000000
 80049c0:	20000004 	.word	0x20000004

080049c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b094      	sub	sp, #80	; 0x50
 80049ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	647b      	str	r3, [r7, #68]	; 0x44
 80049d0:	2300      	movs	r3, #0
 80049d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d4:	2300      	movs	r3, #0
 80049d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049dc:	4b79      	ldr	r3, [pc, #484]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d00d      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x40>
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	f200 80e1 	bhi.w	8004bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_RCC_GetSysClockFreq+0x34>
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d003      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0x3a>
 80049f6:	e0db      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049f8:	4b73      	ldr	r3, [pc, #460]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049fc:	e0db      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049fe:	4b73      	ldr	r3, [pc, #460]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x208>)
 8004a00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a02:	e0d8      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a04:	4b6f      	ldr	r3, [pc, #444]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a0e:	4b6d      	ldr	r3, [pc, #436]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d063      	beq.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a1a:	4b6a      	ldr	r3, [pc, #424]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	099b      	lsrs	r3, r3, #6
 8004a20:	2200      	movs	r2, #0
 8004a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a2e:	2300      	movs	r3, #0
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
 8004a32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a36:	4622      	mov	r2, r4
 8004a38:	462b      	mov	r3, r5
 8004a3a:	f04f 0000 	mov.w	r0, #0
 8004a3e:	f04f 0100 	mov.w	r1, #0
 8004a42:	0159      	lsls	r1, r3, #5
 8004a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a48:	0150      	lsls	r0, r2, #5
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4621      	mov	r1, r4
 8004a50:	1a51      	subs	r1, r2, r1
 8004a52:	6139      	str	r1, [r7, #16]
 8004a54:	4629      	mov	r1, r5
 8004a56:	eb63 0301 	sbc.w	r3, r3, r1
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a68:	4659      	mov	r1, fp
 8004a6a:	018b      	lsls	r3, r1, #6
 8004a6c:	4651      	mov	r1, sl
 8004a6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a72:	4651      	mov	r1, sl
 8004a74:	018a      	lsls	r2, r1, #6
 8004a76:	4651      	mov	r1, sl
 8004a78:	ebb2 0801 	subs.w	r8, r2, r1
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a96:	4690      	mov	r8, r2
 8004a98:	4699      	mov	r9, r3
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	eb18 0303 	adds.w	r3, r8, r3
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	462b      	mov	r3, r5
 8004aa4:	eb49 0303 	adc.w	r3, r9, r3
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	024b      	lsls	r3, r1, #9
 8004aba:	4621      	mov	r1, r4
 8004abc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	024a      	lsls	r2, r1, #9
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aca:	2200      	movs	r2, #0
 8004acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ad0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ad4:	f7fb fb80 	bl	80001d8 <__aeabi_uldivmod>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4613      	mov	r3, r2
 8004ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae0:	e058      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae2:	4b38      	ldr	r3, [pc, #224]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	099b      	lsrs	r3, r3, #6
 8004ae8:	2200      	movs	r2, #0
 8004aea:	4618      	mov	r0, r3
 8004aec:	4611      	mov	r1, r2
 8004aee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004af2:	623b      	str	r3, [r7, #32]
 8004af4:	2300      	movs	r3, #0
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
 8004af8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004afc:	4642      	mov	r2, r8
 8004afe:	464b      	mov	r3, r9
 8004b00:	f04f 0000 	mov.w	r0, #0
 8004b04:	f04f 0100 	mov.w	r1, #0
 8004b08:	0159      	lsls	r1, r3, #5
 8004b0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b0e:	0150      	lsls	r0, r2, #5
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4641      	mov	r1, r8
 8004b16:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b34:	ebb2 040a 	subs.w	r4, r2, sl
 8004b38:	eb63 050b 	sbc.w	r5, r3, fp
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	00eb      	lsls	r3, r5, #3
 8004b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b4a:	00e2      	lsls	r2, r4, #3
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	461d      	mov	r5, r3
 8004b50:	4643      	mov	r3, r8
 8004b52:	18e3      	adds	r3, r4, r3
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	464b      	mov	r3, r9
 8004b58:	eb45 0303 	adc.w	r3, r5, r3
 8004b5c:	607b      	str	r3, [r7, #4]
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	028b      	lsls	r3, r1, #10
 8004b6e:	4621      	mov	r1, r4
 8004b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b74:	4621      	mov	r1, r4
 8004b76:	028a      	lsls	r2, r1, #10
 8004b78:	4610      	mov	r0, r2
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b7e:	2200      	movs	r2, #0
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	61fa      	str	r2, [r7, #28]
 8004b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b88:	f7fb fb26 	bl	80001d8 <__aeabi_uldivmod>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4613      	mov	r3, r2
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bae:	e002      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3750      	adds	r7, #80	; 0x50
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	00f42400 	.word	0x00f42400
 8004bcc:	007a1200 	.word	0x007a1200

08004bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd4:	4b03      	ldr	r3, [pc, #12]	; (8004be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000000 	.word	0x20000000

08004be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bec:	f7ff fff0 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	0a9b      	lsrs	r3, r3, #10
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	4903      	ldr	r1, [pc, #12]	; (8004c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	080094c0 	.word	0x080094c0

08004c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c14:	f7ff ffdc 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	0b5b      	lsrs	r3, r3, #13
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4903      	ldr	r1, [pc, #12]	; (8004c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40023800 	.word	0x40023800
 8004c34:	080094c0 	.word	0x080094c0

08004c38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d105      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d035      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c60:	4b62      	ldr	r3, [pc, #392]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c66:	f7fc f927 	bl	8000eb8 <HAL_GetTick>
 8004c6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c6e:	f7fc f923 	bl	8000eb8 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e0b0      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c80:	4b5b      	ldr	r3, [pc, #364]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f0      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	019a      	lsls	r2, r3, #6
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	071b      	lsls	r3, r3, #28
 8004c98:	4955      	ldr	r1, [pc, #340]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ca0:	4b52      	ldr	r3, [pc, #328]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ca6:	f7fc f907 	bl	8000eb8 <HAL_GetTick>
 8004caa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cae:	f7fc f903 	bl	8000eb8 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e090      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cc0:	4b4b      	ldr	r3, [pc, #300]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f0      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8083 	beq.w	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	4b44      	ldr	r3, [pc, #272]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	4a43      	ldr	r2, [pc, #268]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cea:	4b41      	ldr	r3, [pc, #260]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cf6:	4b3f      	ldr	r3, [pc, #252]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a3e      	ldr	r2, [pc, #248]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d02:	f7fc f8d9 	bl	8000eb8 <HAL_GetTick>
 8004d06:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d08:	e008      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d0a:	f7fc f8d5 	bl	8000eb8 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e062      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d1c:	4b35      	ldr	r3, [pc, #212]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d28:	4b31      	ldr	r3, [pc, #196]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d30:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d02f      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d028      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d46:	4b2a      	ldr	r3, [pc, #168]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d50:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d56:	4b28      	ldr	r3, [pc, #160]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d5c:	4a24      	ldr	r2, [pc, #144]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d62:	4b23      	ldr	r3, [pc, #140]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d114      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d6e:	f7fc f8a3 	bl	8000eb8 <HAL_GetTick>
 8004d72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d74:	e00a      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d76:	f7fc f89f 	bl	8000eb8 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e02a      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8c:	4b18      	ldr	r3, [pc, #96]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0ee      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da4:	d10d      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004da6:	4b12      	ldr	r3, [pc, #72]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dba:	490d      	ldr	r1, [pc, #52]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	608b      	str	r3, [r1, #8]
 8004dc0:	e005      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004dc2:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	4a0a      	ldr	r2, [pc, #40]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dcc:	6093      	str	r3, [r2, #8]
 8004dce:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dda:	4905      	ldr	r1, [pc, #20]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	42470068 	.word	0x42470068
 8004df0:	40023800 	.word	0x40023800
 8004df4:	40007000 	.word	0x40007000
 8004df8:	42470e40 	.word	0x42470e40

08004dfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d13f      	bne.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e1a:	4b24      	ldr	r3, [pc, #144]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d006      	beq.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e30:	d12f      	bne.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e32:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e34:	617b      	str	r3, [r7, #20]
          break;
 8004e36:	e02f      	b.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e38:	4b1c      	ldr	r3, [pc, #112]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e44:	d108      	bne.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e46:	4b19      	ldr	r3, [pc, #100]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e4e:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	e007      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e58:	4b14      	ldr	r3, [pc, #80]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e60:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e66:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e68:	4b10      	ldr	r3, [pc, #64]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e6e:	099b      	lsrs	r3, r3, #6
 8004e70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e82:	0f1b      	lsrs	r3, r3, #28
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8e:	617b      	str	r3, [r7, #20]
          break;
 8004e90:	e002      	b.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]
          break;
 8004e96:	bf00      	nop
        }
      }
      break;
 8004e98:	e000      	b.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004e9a:	bf00      	nop
    }
  }
  return frequency;
 8004e9c:	697b      	ldr	r3, [r7, #20]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	00bb8000 	.word	0x00bb8000
 8004eb4:	007a1200 	.word	0x007a1200
 8004eb8:	00f42400 	.word	0x00f42400

08004ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e07b      	b.n	8004fc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d108      	bne.n	8004ee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ede:	d009      	beq.n	8004ef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	61da      	str	r2, [r3, #28]
 8004ee6:	e005      	b.n	8004ef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fb fe36 	bl	8000b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	ea42 0103 	orr.w	r1, r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	0c1b      	lsrs	r3, r3, #16
 8004f92:	f003 0104 	and.w	r1, r3, #4
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	f003 0210 	and.w	r2, r3, #16
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e042      	b.n	8005066 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d106      	bne.n	8004ffa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7fb fe0b 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2224      	movs	r2, #36	; 0x24
 8004ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005010:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f972 	bl	80052fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005026:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005036:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005046:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b08a      	sub	sp, #40	; 0x28
 8005072:	af02      	add	r7, sp, #8
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	603b      	str	r3, [r7, #0]
 800507a:	4613      	mov	r3, r2
 800507c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b20      	cmp	r3, #32
 800508c:	d175      	bne.n	800517a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <HAL_UART_Transmit+0x2c>
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e06e      	b.n	800517c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2221      	movs	r2, #33	; 0x21
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ac:	f7fb ff04 	bl	8000eb8 <HAL_GetTick>
 80050b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c6:	d108      	bne.n	80050da <HAL_UART_Transmit+0x6c>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d104      	bne.n	80050da <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	e003      	b.n	80050e2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050e2:	e02e      	b.n	8005142 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2200      	movs	r2, #0
 80050ec:	2180      	movs	r1, #128	; 0x80
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f848 	bl	8005184 <UART_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d005      	beq.n	8005106 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e03a      	b.n	800517c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10b      	bne.n	8005124 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800511a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	3302      	adds	r3, #2
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	e007      	b.n	8005134 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	781a      	ldrb	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	3301      	adds	r3, #1
 8005132:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1cb      	bne.n	80050e4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2200      	movs	r2, #0
 8005154:	2140      	movs	r1, #64	; 0x40
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f814 	bl	8005184 <UART_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e006      	b.n	800517c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e000      	b.n	800517c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800517a:	2302      	movs	r3, #2
  }
}
 800517c:	4618      	mov	r0, r3
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005194:	e03b      	b.n	800520e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800519c:	d037      	beq.n	800520e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fb fe8b 	bl	8000eb8 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	6a3a      	ldr	r2, [r7, #32]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e03a      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d023      	beq.n	800520e <UART_WaitOnFlagUntilTimeout+0x8a>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b80      	cmp	r3, #128	; 0x80
 80051ca:	d020      	beq.n	800520e <UART_WaitOnFlagUntilTimeout+0x8a>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d01d      	beq.n	800520e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d116      	bne.n	800520e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f81d 	bl	8005236 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2208      	movs	r2, #8
 8005200:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e00f      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4013      	ands	r3, r2
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	bf0c      	ite	eq
 800521e:	2301      	moveq	r3, #1
 8005220:	2300      	movne	r3, #0
 8005222:	b2db      	uxtb	r3, r3
 8005224:	461a      	mov	r2, r3
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	429a      	cmp	r2, r3
 800522a:	d0b4      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005236:	b480      	push	{r7}
 8005238:	b095      	sub	sp, #84	; 0x54
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	330c      	adds	r3, #12
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	330c      	adds	r3, #12
 800525c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800525e:	643a      	str	r2, [r7, #64]	; 0x40
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005264:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e5      	bne.n	800523e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3314      	adds	r3, #20
 8005278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	61fb      	str	r3, [r7, #28]
   return(result);
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	f023 0301 	bic.w	r3, r3, #1
 8005288:	64bb      	str	r3, [r7, #72]	; 0x48
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3314      	adds	r3, #20
 8005290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005294:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e5      	bne.n	8005272 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d119      	bne.n	80052e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	330c      	adds	r3, #12
 80052b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f023 0310 	bic.w	r3, r3, #16
 80052c4:	647b      	str	r3, [r7, #68]	; 0x44
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	330c      	adds	r3, #12
 80052cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052ce:	61ba      	str	r2, [r7, #24]
 80052d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	6979      	ldr	r1, [r7, #20]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	613b      	str	r3, [r7, #16]
   return(result);
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e5      	bne.n	80052ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052f0:	bf00      	nop
 80052f2:	3754      	adds	r7, #84	; 0x54
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005300:	b0c0      	sub	sp, #256	; 0x100
 8005302:	af00      	add	r7, sp, #0
 8005304:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005318:	68d9      	ldr	r1, [r3, #12]
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	ea40 0301 	orr.w	r3, r0, r1
 8005324:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	431a      	orrs	r2, r3
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	431a      	orrs	r2, r3
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005354:	f021 010c 	bic.w	r1, r1, #12
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005362:	430b      	orrs	r3, r1
 8005364:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005376:	6999      	ldr	r1, [r3, #24]
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	ea40 0301 	orr.w	r3, r0, r1
 8005382:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b8f      	ldr	r3, [pc, #572]	; (80055c8 <UART_SetConfig+0x2cc>)
 800538c:	429a      	cmp	r2, r3
 800538e:	d005      	beq.n	800539c <UART_SetConfig+0xa0>
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b8d      	ldr	r3, [pc, #564]	; (80055cc <UART_SetConfig+0x2d0>)
 8005398:	429a      	cmp	r2, r3
 800539a:	d104      	bne.n	80053a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800539c:	f7ff fc38 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 80053a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053a4:	e003      	b.n	80053ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053a6:	f7ff fc1f 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 80053aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b8:	f040 810c 	bne.w	80055d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053ce:	4622      	mov	r2, r4
 80053d0:	462b      	mov	r3, r5
 80053d2:	1891      	adds	r1, r2, r2
 80053d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80053d6:	415b      	adcs	r3, r3
 80053d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053de:	4621      	mov	r1, r4
 80053e0:	eb12 0801 	adds.w	r8, r2, r1
 80053e4:	4629      	mov	r1, r5
 80053e6:	eb43 0901 	adc.w	r9, r3, r1
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	f04f 0300 	mov.w	r3, #0
 80053f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053fe:	4690      	mov	r8, r2
 8005400:	4699      	mov	r9, r3
 8005402:	4623      	mov	r3, r4
 8005404:	eb18 0303 	adds.w	r3, r8, r3
 8005408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800540c:	462b      	mov	r3, r5
 800540e:	eb49 0303 	adc.w	r3, r9, r3
 8005412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005422:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005426:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800542a:	460b      	mov	r3, r1
 800542c:	18db      	adds	r3, r3, r3
 800542e:	653b      	str	r3, [r7, #80]	; 0x50
 8005430:	4613      	mov	r3, r2
 8005432:	eb42 0303 	adc.w	r3, r2, r3
 8005436:	657b      	str	r3, [r7, #84]	; 0x54
 8005438:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800543c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005440:	f7fa feca 	bl	80001d8 <__aeabi_uldivmod>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4b61      	ldr	r3, [pc, #388]	; (80055d0 <UART_SetConfig+0x2d4>)
 800544a:	fba3 2302 	umull	r2, r3, r3, r2
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	011c      	lsls	r4, r3, #4
 8005452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005456:	2200      	movs	r2, #0
 8005458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800545c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005460:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005464:	4642      	mov	r2, r8
 8005466:	464b      	mov	r3, r9
 8005468:	1891      	adds	r1, r2, r2
 800546a:	64b9      	str	r1, [r7, #72]	; 0x48
 800546c:	415b      	adcs	r3, r3
 800546e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005470:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005474:	4641      	mov	r1, r8
 8005476:	eb12 0a01 	adds.w	sl, r2, r1
 800547a:	4649      	mov	r1, r9
 800547c:	eb43 0b01 	adc.w	fp, r3, r1
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800548c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005494:	4692      	mov	sl, r2
 8005496:	469b      	mov	fp, r3
 8005498:	4643      	mov	r3, r8
 800549a:	eb1a 0303 	adds.w	r3, sl, r3
 800549e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054a2:	464b      	mov	r3, r9
 80054a4:	eb4b 0303 	adc.w	r3, fp, r3
 80054a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054c0:	460b      	mov	r3, r1
 80054c2:	18db      	adds	r3, r3, r3
 80054c4:	643b      	str	r3, [r7, #64]	; 0x40
 80054c6:	4613      	mov	r3, r2
 80054c8:	eb42 0303 	adc.w	r3, r2, r3
 80054cc:	647b      	str	r3, [r7, #68]	; 0x44
 80054ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054d6:	f7fa fe7f 	bl	80001d8 <__aeabi_uldivmod>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4611      	mov	r1, r2
 80054e0:	4b3b      	ldr	r3, [pc, #236]	; (80055d0 <UART_SetConfig+0x2d4>)
 80054e2:	fba3 2301 	umull	r2, r3, r3, r1
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	2264      	movs	r2, #100	; 0x64
 80054ea:	fb02 f303 	mul.w	r3, r2, r3
 80054ee:	1acb      	subs	r3, r1, r3
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054f6:	4b36      	ldr	r3, [pc, #216]	; (80055d0 <UART_SetConfig+0x2d4>)
 80054f8:	fba3 2302 	umull	r2, r3, r3, r2
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005504:	441c      	add	r4, r3
 8005506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800550a:	2200      	movs	r2, #0
 800550c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005510:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005514:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005518:	4642      	mov	r2, r8
 800551a:	464b      	mov	r3, r9
 800551c:	1891      	adds	r1, r2, r2
 800551e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005520:	415b      	adcs	r3, r3
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005528:	4641      	mov	r1, r8
 800552a:	1851      	adds	r1, r2, r1
 800552c:	6339      	str	r1, [r7, #48]	; 0x30
 800552e:	4649      	mov	r1, r9
 8005530:	414b      	adcs	r3, r1
 8005532:	637b      	str	r3, [r7, #52]	; 0x34
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005540:	4659      	mov	r1, fp
 8005542:	00cb      	lsls	r3, r1, #3
 8005544:	4651      	mov	r1, sl
 8005546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800554a:	4651      	mov	r1, sl
 800554c:	00ca      	lsls	r2, r1, #3
 800554e:	4610      	mov	r0, r2
 8005550:	4619      	mov	r1, r3
 8005552:	4603      	mov	r3, r0
 8005554:	4642      	mov	r2, r8
 8005556:	189b      	adds	r3, r3, r2
 8005558:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800555c:	464b      	mov	r3, r9
 800555e:	460a      	mov	r2, r1
 8005560:	eb42 0303 	adc.w	r3, r2, r3
 8005564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005574:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005578:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800557c:	460b      	mov	r3, r1
 800557e:	18db      	adds	r3, r3, r3
 8005580:	62bb      	str	r3, [r7, #40]	; 0x28
 8005582:	4613      	mov	r3, r2
 8005584:	eb42 0303 	adc.w	r3, r2, r3
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800558a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800558e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005592:	f7fa fe21 	bl	80001d8 <__aeabi_uldivmod>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <UART_SetConfig+0x2d4>)
 800559c:	fba3 1302 	umull	r1, r3, r3, r2
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	2164      	movs	r1, #100	; 0x64
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	3332      	adds	r3, #50	; 0x32
 80055ae:	4a08      	ldr	r2, [pc, #32]	; (80055d0 <UART_SetConfig+0x2d4>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	f003 0207 	and.w	r2, r3, #7
 80055ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4422      	add	r2, r4
 80055c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055c4:	e106      	b.n	80057d4 <UART_SetConfig+0x4d8>
 80055c6:	bf00      	nop
 80055c8:	40011000 	.word	0x40011000
 80055cc:	40011400 	.word	0x40011400
 80055d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055d8:	2200      	movs	r2, #0
 80055da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055e6:	4642      	mov	r2, r8
 80055e8:	464b      	mov	r3, r9
 80055ea:	1891      	adds	r1, r2, r2
 80055ec:	6239      	str	r1, [r7, #32]
 80055ee:	415b      	adcs	r3, r3
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
 80055f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055f6:	4641      	mov	r1, r8
 80055f8:	1854      	adds	r4, r2, r1
 80055fa:	4649      	mov	r1, r9
 80055fc:	eb43 0501 	adc.w	r5, r3, r1
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	00eb      	lsls	r3, r5, #3
 800560a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800560e:	00e2      	lsls	r2, r4, #3
 8005610:	4614      	mov	r4, r2
 8005612:	461d      	mov	r5, r3
 8005614:	4643      	mov	r3, r8
 8005616:	18e3      	adds	r3, r4, r3
 8005618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800561c:	464b      	mov	r3, r9
 800561e:	eb45 0303 	adc.w	r3, r5, r3
 8005622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005632:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005642:	4629      	mov	r1, r5
 8005644:	008b      	lsls	r3, r1, #2
 8005646:	4621      	mov	r1, r4
 8005648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800564c:	4621      	mov	r1, r4
 800564e:	008a      	lsls	r2, r1, #2
 8005650:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005654:	f7fa fdc0 	bl	80001d8 <__aeabi_uldivmod>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4b60      	ldr	r3, [pc, #384]	; (80057e0 <UART_SetConfig+0x4e4>)
 800565e:	fba3 2302 	umull	r2, r3, r3, r2
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	011c      	lsls	r4, r3, #4
 8005666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800566a:	2200      	movs	r2, #0
 800566c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005670:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005674:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005678:	4642      	mov	r2, r8
 800567a:	464b      	mov	r3, r9
 800567c:	1891      	adds	r1, r2, r2
 800567e:	61b9      	str	r1, [r7, #24]
 8005680:	415b      	adcs	r3, r3
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005688:	4641      	mov	r1, r8
 800568a:	1851      	adds	r1, r2, r1
 800568c:	6139      	str	r1, [r7, #16]
 800568e:	4649      	mov	r1, r9
 8005690:	414b      	adcs	r3, r1
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056a0:	4659      	mov	r1, fp
 80056a2:	00cb      	lsls	r3, r1, #3
 80056a4:	4651      	mov	r1, sl
 80056a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056aa:	4651      	mov	r1, sl
 80056ac:	00ca      	lsls	r2, r1, #3
 80056ae:	4610      	mov	r0, r2
 80056b0:	4619      	mov	r1, r3
 80056b2:	4603      	mov	r3, r0
 80056b4:	4642      	mov	r2, r8
 80056b6:	189b      	adds	r3, r3, r2
 80056b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056bc:	464b      	mov	r3, r9
 80056be:	460a      	mov	r2, r1
 80056c0:	eb42 0303 	adc.w	r3, r2, r3
 80056c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80056d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056e0:	4649      	mov	r1, r9
 80056e2:	008b      	lsls	r3, r1, #2
 80056e4:	4641      	mov	r1, r8
 80056e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ea:	4641      	mov	r1, r8
 80056ec:	008a      	lsls	r2, r1, #2
 80056ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056f2:	f7fa fd71 	bl	80001d8 <__aeabi_uldivmod>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4611      	mov	r1, r2
 80056fc:	4b38      	ldr	r3, [pc, #224]	; (80057e0 <UART_SetConfig+0x4e4>)
 80056fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	2264      	movs	r2, #100	; 0x64
 8005706:	fb02 f303 	mul.w	r3, r2, r3
 800570a:	1acb      	subs	r3, r1, r3
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	3332      	adds	r3, #50	; 0x32
 8005710:	4a33      	ldr	r2, [pc, #204]	; (80057e0 <UART_SetConfig+0x4e4>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800571c:	441c      	add	r4, r3
 800571e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005722:	2200      	movs	r2, #0
 8005724:	673b      	str	r3, [r7, #112]	; 0x70
 8005726:	677a      	str	r2, [r7, #116]	; 0x74
 8005728:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800572c:	4642      	mov	r2, r8
 800572e:	464b      	mov	r3, r9
 8005730:	1891      	adds	r1, r2, r2
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	415b      	adcs	r3, r3
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800573c:	4641      	mov	r1, r8
 800573e:	1851      	adds	r1, r2, r1
 8005740:	6039      	str	r1, [r7, #0]
 8005742:	4649      	mov	r1, r9
 8005744:	414b      	adcs	r3, r1
 8005746:	607b      	str	r3, [r7, #4]
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005754:	4659      	mov	r1, fp
 8005756:	00cb      	lsls	r3, r1, #3
 8005758:	4651      	mov	r1, sl
 800575a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800575e:	4651      	mov	r1, sl
 8005760:	00ca      	lsls	r2, r1, #3
 8005762:	4610      	mov	r0, r2
 8005764:	4619      	mov	r1, r3
 8005766:	4603      	mov	r3, r0
 8005768:	4642      	mov	r2, r8
 800576a:	189b      	adds	r3, r3, r2
 800576c:	66bb      	str	r3, [r7, #104]	; 0x68
 800576e:	464b      	mov	r3, r9
 8005770:	460a      	mov	r2, r1
 8005772:	eb42 0303 	adc.w	r3, r2, r3
 8005776:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	663b      	str	r3, [r7, #96]	; 0x60
 8005782:	667a      	str	r2, [r7, #100]	; 0x64
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005790:	4649      	mov	r1, r9
 8005792:	008b      	lsls	r3, r1, #2
 8005794:	4641      	mov	r1, r8
 8005796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800579a:	4641      	mov	r1, r8
 800579c:	008a      	lsls	r2, r1, #2
 800579e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057a2:	f7fa fd19 	bl	80001d8 <__aeabi_uldivmod>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4b0d      	ldr	r3, [pc, #52]	; (80057e0 <UART_SetConfig+0x4e4>)
 80057ac:	fba3 1302 	umull	r1, r3, r3, r2
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	2164      	movs	r1, #100	; 0x64
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	3332      	adds	r3, #50	; 0x32
 80057be:	4a08      	ldr	r2, [pc, #32]	; (80057e0 <UART_SetConfig+0x4e4>)
 80057c0:	fba2 2303 	umull	r2, r3, r2, r3
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	f003 020f 	and.w	r2, r3, #15
 80057ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4422      	add	r2, r4
 80057d2:	609a      	str	r2, [r3, #8]
}
 80057d4:	bf00      	nop
 80057d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057da:	46bd      	mov	sp, r7
 80057dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057e0:	51eb851f 	.word	0x51eb851f

080057e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057e4:	b084      	sub	sp, #16
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	f107 001c 	add.w	r0, r7, #28
 80057f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057f6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d123      	bne.n	8005846 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005826:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800582a:	2b01      	cmp	r3, #1
 800582c:	d105      	bne.n	800583a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f9dc 	bl	8005bf8 <USB_CoreReset>
 8005840:	4603      	mov	r3, r0
 8005842:	73fb      	strb	r3, [r7, #15]
 8005844:	e01b      	b.n	800587e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f9d0 	bl	8005bf8 <USB_CoreReset>
 8005858:	4603      	mov	r3, r0
 800585a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800585c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005860:	2b00      	cmp	r3, #0
 8005862:	d106      	bne.n	8005872 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	639a      	str	r2, [r3, #56]	; 0x38
 8005870:	e005      	b.n	800587e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800587e:	7fbb      	ldrb	r3, [r7, #30]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d10b      	bne.n	800589c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f043 0206 	orr.w	r2, r3, #6
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f043 0220 	orr.w	r2, r3, #32
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800589c:	7bfb      	ldrb	r3, [r7, #15]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058a8:	b004      	add	sp, #16
 80058aa:	4770      	bx	lr

080058ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f043 0201 	orr.w	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f023 0201 	bic.w	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d115      	bne.n	800593e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800591e:	200a      	movs	r0, #10
 8005920:	f7fb fad6 	bl	8000ed0 <HAL_Delay>
      ms += 10U;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	330a      	adds	r3, #10
 8005928:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f956 	bl	8005bdc <USB_GetMode>
 8005930:	4603      	mov	r3, r0
 8005932:	2b01      	cmp	r3, #1
 8005934:	d01e      	beq.n	8005974 <USB_SetCurrentMode+0x84>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2bc7      	cmp	r3, #199	; 0xc7
 800593a:	d9f0      	bls.n	800591e <USB_SetCurrentMode+0x2e>
 800593c:	e01a      	b.n	8005974 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d115      	bne.n	8005970 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005950:	200a      	movs	r0, #10
 8005952:	f7fb fabd 	bl	8000ed0 <HAL_Delay>
      ms += 10U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	330a      	adds	r3, #10
 800595a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f93d 	bl	8005bdc <USB_GetMode>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <USB_SetCurrentMode+0x84>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2bc7      	cmp	r3, #199	; 0xc7
 800596c:	d9f0      	bls.n	8005950 <USB_SetCurrentMode+0x60>
 800596e:	e001      	b.n	8005974 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e005      	b.n	8005980 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2bc8      	cmp	r3, #200	; 0xc8
 8005978:	d101      	bne.n	800597e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3301      	adds	r3, #1
 800599a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80059a2:	d901      	bls.n	80059a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e01b      	b.n	80059e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	daf2      	bge.n	8005996 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	019b      	lsls	r3, r3, #6
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80059cc:	d901      	bls.n	80059d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e006      	b.n	80059e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d0f0      	beq.n	80059c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005a04:	d901      	bls.n	8005a0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e018      	b.n	8005a3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	daf2      	bge.n	80059f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2210      	movs	r2, #16
 8005a1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005a28:	d901      	bls.n	8005a2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e006      	b.n	8005a3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0310 	and.w	r3, r3, #16
 8005a36:	2b10      	cmp	r3, #16
 8005a38:	d0f0      	beq.n	8005a1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b089      	sub	sp, #36	; 0x24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	4611      	mov	r1, r2
 8005a54:	461a      	mov	r2, r3
 8005a56:	460b      	mov	r3, r1
 8005a58:	71fb      	strb	r3, [r7, #7]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d123      	bne.n	8005ab6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a6e:	88bb      	ldrh	r3, [r7, #4]
 8005a70:	3303      	adds	r3, #3
 8005a72:	089b      	lsrs	r3, r3, #2
 8005a74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a76:	2300      	movs	r3, #0
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	e018      	b.n	8005aae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	031a      	lsls	r2, r3, #12
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a88:	461a      	mov	r2, r3
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	3301      	adds	r3, #1
 8005a94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d3e2      	bcc.n	8005a7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3724      	adds	r7, #36	; 0x24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b08b      	sub	sp, #44	; 0x2c
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	089b      	lsrs	r3, r3, #2
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	f003 0303 	and.w	r3, r3, #3
 8005ae8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005aea:	2300      	movs	r3, #0
 8005aec:	623b      	str	r3, [r7, #32]
 8005aee:	e014      	b.n	8005b1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	601a      	str	r2, [r3, #0]
    pDest++;
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	3301      	adds	r3, #1
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	3301      	adds	r3, #1
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	3301      	adds	r3, #1
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	3301      	adds	r3, #1
 8005b18:	623b      	str	r3, [r7, #32]
 8005b1a:	6a3a      	ldr	r2, [r7, #32]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d3e6      	bcc.n	8005af0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b22:	8bfb      	ldrh	r3, [r7, #30]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01e      	beq.n	8005b66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b32:	461a      	mov	r2, r3
 8005b34:	f107 0310 	add.w	r3, r7, #16
 8005b38:	6812      	ldr	r2, [r2, #0]
 8005b3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	701a      	strb	r2, [r3, #0]
      i++;
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	3301      	adds	r3, #1
 8005b52:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	3301      	adds	r3, #1
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b5a:	8bfb      	ldrh	r3, [r7, #30]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b60:	8bfb      	ldrh	r3, [r7, #30]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1ea      	bne.n	8005b3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	372c      	adds	r7, #44	; 0x2c
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bce:	68bb      	ldr	r3, [r7, #8]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	f003 0301 	and.w	r3, r3, #1
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3301      	adds	r3, #1
 8005c08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c10:	d901      	bls.n	8005c16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e01b      	b.n	8005c4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	daf2      	bge.n	8005c04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f043 0201 	orr.w	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3301      	adds	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c3a:	d901      	bls.n	8005c40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e006      	b.n	8005c4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d0f0      	beq.n	8005c2e <USB_CoreReset+0x36>

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b086      	sub	sp, #24
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	2300      	movs	r3, #0
 8005c80:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d119      	bne.n	8005ce6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d10a      	bne.n	8005cd0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cc8:	f043 0304 	orr.w	r3, r3, #4
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	e014      	b.n	8005cfa <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cde:	f023 0304 	bic.w	r3, r3, #4
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	e009      	b.n	8005cfa <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cf4:	f023 0304 	bic.w	r3, r3, #4
 8005cf8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cfa:	2110      	movs	r1, #16
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff fe43 	bl	8005988 <USB_FlushTxFifo>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff fe6d 	bl	80059ec <USB_FlushRxFifo>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	613b      	str	r3, [r7, #16]
 8005d20:	e015      	b.n	8005d4e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d34:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d42:	461a      	mov	r2, r3
 8005d44:	2300      	movs	r3, #0
 8005d46:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005d52:	461a      	mov	r2, r3
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d3e3      	bcc.n	8005d22 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d66:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a18      	ldr	r2, [pc, #96]	; (8005dcc <USB_HostInit+0x170>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d10b      	bne.n	8005d88 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d76:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <USB_HostInit+0x174>)
 8005d7c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a14      	ldr	r2, [pc, #80]	; (8005dd4 <USB_HostInit+0x178>)
 8005d82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d86:	e009      	b.n	8005d9c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2280      	movs	r2, #128	; 0x80
 8005d8c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a11      	ldr	r2, [pc, #68]	; (8005dd8 <USB_HostInit+0x17c>)
 8005d92:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a11      	ldr	r2, [pc, #68]	; (8005ddc <USB_HostInit+0x180>)
 8005d98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d105      	bne.n	8005db0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	f043 0210 	orr.w	r2, r3, #16
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699a      	ldr	r2, [r3, #24]
 8005db4:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <USB_HostInit+0x184>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dc8:	b004      	add	sp, #16
 8005dca:	4770      	bx	lr
 8005dcc:	40040000 	.word	0x40040000
 8005dd0:	01000200 	.word	0x01000200
 8005dd4:	00e00300 	.word	0x00e00300
 8005dd8:	00600080 	.word	0x00600080
 8005ddc:	004000e0 	.word	0x004000e0
 8005de0:	a3200008 	.word	0xa3200008

08005de4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e02:	f023 0303 	bic.w	r3, r3, #3
 8005e06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	68f9      	ldr	r1, [r7, #12]
 8005e18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d107      	bne.n	8005e36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e32:	6053      	str	r3, [r2, #4]
 8005e34:	e00c      	b.n	8005e50 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d107      	bne.n	8005e4c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e42:	461a      	mov	r2, r3
 8005e44:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e48:	6053      	str	r3, [r2, #4]
 8005e4a:	e001      	b.n	8005e50 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e7e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e8c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e8e:	2064      	movs	r0, #100	; 0x64
 8005e90:	f7fb f81e 	bl	8000ed0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005ea2:	200a      	movs	r0, #10
 8005ea4:	f7fb f814 	bl	8000ed0 <HAL_Delay>

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	460b      	mov	r3, r1
 8005ebc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ed6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <USB_DriveVbus+0x44>
 8005ee2:	78fb      	ldrb	r3, [r7, #3]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d106      	bne.n	8005ef6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ef0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ef4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f00:	d109      	bne.n	8005f16 <USB_DriveVbus+0x64>
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f14:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	0c5b      	lsrs	r3, r3, #17
 8005f42:	f003 0303 	and.w	r3, r3, #3
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	b29b      	uxth	r3, r3
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	461a      	mov	r2, r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	70fb      	strb	r3, [r7, #3]
 8005f86:	460b      	mov	r3, r1
 8005f88:	70bb      	strb	r3, [r7, #2]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fa8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005faa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d87c      	bhi.n	80060ac <USB_HC_Init+0x138>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <USB_HC_Init+0x44>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08005fc9 	.word	0x08005fc9
 8005fbc:	0800606f 	.word	0x0800606f
 8005fc0:	08005fc9 	.word	0x08005fc9
 8005fc4:	08006031 	.word	0x08006031
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f240 439d 	movw	r3, #1181	; 0x49d
 8005fda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005fdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	da10      	bge.n	8006006 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	78fa      	ldrb	r2, [r7, #3]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006002:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006004:	e055      	b.n	80060b2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a6f      	ldr	r2, [pc, #444]	; (80061c8 <USB_HC_Init+0x254>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d151      	bne.n	80060b2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800600e:	78fb      	ldrb	r3, [r7, #3]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	4413      	add	r3, r2
 8006016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	78fa      	ldrb	r2, [r7, #3]
 800601e:	0151      	lsls	r1, r2, #5
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	440a      	add	r2, r1
 8006024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006028:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800602c:	60d3      	str	r3, [r2, #12]
      break;
 800602e:	e040      	b.n	80060b2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4413      	add	r3, r2
 8006038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603c:	461a      	mov	r2, r3
 800603e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006042:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006044:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006048:	2b00      	cmp	r3, #0
 800604a:	da34      	bge.n	80060b6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	78fa      	ldrb	r2, [r7, #3]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	440a      	add	r2, r1
 8006062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800606c:	e023      	b.n	80060b6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800606e:	78fb      	ldrb	r3, [r7, #3]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	4413      	add	r3, r2
 8006076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607a:	461a      	mov	r2, r3
 800607c:	f240 2325 	movw	r3, #549	; 0x225
 8006080:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006082:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006086:	2b00      	cmp	r3, #0
 8006088:	da17      	bge.n	80060ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	4413      	add	r3, r2
 8006092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	78fa      	ldrb	r2, [r7, #3]
 800609a:	0151      	lsls	r1, r2, #5
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	440a      	add	r2, r1
 80060a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80060a8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80060aa:	e006      	b.n	80060ba <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	77fb      	strb	r3, [r7, #31]
      break;
 80060b0:	e004      	b.n	80060bc <USB_HC_Init+0x148>
      break;
 80060b2:	bf00      	nop
 80060b4:	e002      	b.n	80060bc <USB_HC_Init+0x148>
      break;
 80060b6:	bf00      	nop
 80060b8:	e000      	b.n	80060bc <USB_HC_Init+0x148>
      break;
 80060ba:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c8:	461a      	mov	r2, r3
 80060ca:	2300      	movs	r3, #0
 80060cc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80060ce:	78fb      	ldrb	r3, [r7, #3]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	78fa      	ldrb	r2, [r7, #3]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060e8:	f043 0302 	orr.w	r3, r3, #2
 80060ec:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	2101      	movs	r1, #1
 80060fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006102:	6939      	ldr	r1, [r7, #16]
 8006104:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006108:	4313      	orrs	r3, r2
 800610a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006118:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800611c:	2b00      	cmp	r3, #0
 800611e:	da03      	bge.n	8006128 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	e001      	b.n	800612c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff fef9 	bl	8005f24 <USB_GetHostSpeed>
 8006132:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006134:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006138:	2b02      	cmp	r3, #2
 800613a:	d106      	bne.n	800614a <USB_HC_Init+0x1d6>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d003      	beq.n	800614a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006142:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	e001      	b.n	800614e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800614e:	787b      	ldrb	r3, [r7, #1]
 8006150:	059b      	lsls	r3, r3, #22
 8006152:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006156:	78bb      	ldrb	r3, [r7, #2]
 8006158:	02db      	lsls	r3, r3, #11
 800615a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800615e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006160:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006164:	049b      	lsls	r3, r3, #18
 8006166:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800616a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800616c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800616e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006172:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	431a      	orrs	r2, r3
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800617c:	78fa      	ldrb	r2, [r7, #3]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	440a      	add	r2, r1
 8006184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800618c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800618e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006192:	2b03      	cmp	r3, #3
 8006194:	d003      	beq.n	800619e <USB_HC_Init+0x22a>
 8006196:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800619a:	2b01      	cmp	r3, #1
 800619c:	d10f      	bne.n	80061be <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	78fa      	ldrb	r2, [r7, #3]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061bc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80061be:	7ffb      	ldrb	r3, [r7, #31]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3720      	adds	r7, #32
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40040000 	.word	0x40040000

080061cc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08c      	sub	sp, #48	; 0x30
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	4613      	mov	r3, r2
 80061d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80061e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061e8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a5d      	ldr	r2, [pc, #372]	; (8006364 <USB_HC_StartXfer+0x198>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d12f      	bne.n	8006252 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80061f2:	79fb      	ldrb	r3, [r7, #7]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d11c      	bne.n	8006232 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	7c9b      	ldrb	r3, [r3, #18]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <USB_HC_StartXfer+0x3c>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	7c9b      	ldrb	r3, [r3, #18]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d124      	bne.n	8006252 <USB_HC_StartXfer+0x86>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	799b      	ldrb	r3, [r3, #6]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d120      	bne.n	8006252 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	4413      	add	r3, r2
 8006218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	6a3a      	ldr	r2, [r7, #32]
 8006224:	440a      	add	r2, r1
 8006226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800622a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622e:	60d3      	str	r3, [r2, #12]
 8006230:	e00f      	b.n	8006252 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	791b      	ldrb	r3, [r3, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10b      	bne.n	8006252 <USB_HC_StartXfer+0x86>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	795b      	ldrb	r3, [r3, #5]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d107      	bne.n	8006252 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	4619      	mov	r1, r3
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 fb6b 	bl	8006924 <USB_DoPing>
        return HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	e232      	b.n	80066b8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	799b      	ldrb	r3, [r3, #6]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d158      	bne.n	800630c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800625a:	2301      	movs	r3, #1
 800625c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	78db      	ldrb	r3, [r3, #3]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006266:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	8a92      	ldrh	r2, [r2, #20]
 800626c:	fb03 f202 	mul.w	r2, r3, r2
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	61da      	str	r2, [r3, #28]
 8006274:	e07c      	b.n	8006370 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	7c9b      	ldrb	r3, [r3, #18]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d130      	bne.n	80062e0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	2bbc      	cmp	r3, #188	; 0xbc
 8006284:	d918      	bls.n	80062b8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	8a9b      	ldrh	r3, [r3, #20]
 800628a:	461a      	mov	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	69da      	ldr	r2, [r3, #28]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d003      	beq.n	80062a8 <USB_HC_StartXfer+0xdc>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d103      	bne.n	80062b0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2202      	movs	r2, #2
 80062ac:	60da      	str	r2, [r3, #12]
 80062ae:	e05f      	b.n	8006370 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2201      	movs	r2, #1
 80062b4:	60da      	str	r2, [r3, #12]
 80062b6:	e05b      	b.n	8006370 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6a1a      	ldr	r2, [r3, #32]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d007      	beq.n	80062d8 <USB_HC_StartXfer+0x10c>
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d003      	beq.n	80062d8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2204      	movs	r2, #4
 80062d4:	60da      	str	r2, [r3, #12]
 80062d6:	e04b      	b.n	8006370 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2203      	movs	r2, #3
 80062dc:	60da      	str	r2, [r3, #12]
 80062de:	e047      	b.n	8006370 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d10d      	bne.n	8006302 <USB_HC_StartXfer+0x136>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	8a92      	ldrh	r2, [r2, #20]
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d907      	bls.n	8006302 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	8a92      	ldrh	r2, [r2, #20]
 80062f8:	fb03 f202 	mul.w	r2, r3, r2
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	61da      	str	r2, [r3, #28]
 8006300:	e036      	b.n	8006370 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6a1a      	ldr	r2, [r3, #32]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	61da      	str	r2, [r3, #28]
 800630a:	e031      	b.n	8006370 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d018      	beq.n	8006346 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	8a92      	ldrh	r2, [r2, #20]
 800631c:	4413      	add	r3, r2
 800631e:	3b01      	subs	r3, #1
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	8a92      	ldrh	r2, [r2, #20]
 8006324:	fbb3 f3f2 	udiv	r3, r3, r2
 8006328:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800632a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800632c:	8b7b      	ldrh	r3, [r7, #26]
 800632e:	429a      	cmp	r2, r3
 8006330:	d90b      	bls.n	800634a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006332:	8b7b      	ldrh	r3, [r7, #26]
 8006334:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006336:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	8a92      	ldrh	r2, [r2, #20]
 800633c:	fb03 f202 	mul.w	r2, r3, r2
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	61da      	str	r2, [r3, #28]
 8006344:	e001      	b.n	800634a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006346:	2301      	movs	r3, #1
 8006348:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	78db      	ldrb	r3, [r3, #3]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006352:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	8a92      	ldrh	r2, [r2, #20]
 8006358:	fb03 f202 	mul.w	r2, r3, r2
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	61da      	str	r2, [r3, #28]
 8006360:	e006      	b.n	8006370 <USB_HC_StartXfer+0x1a4>
 8006362:	bf00      	nop
 8006364:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	6a1a      	ldr	r2, [r3, #32]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006378:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800637a:	04d9      	lsls	r1, r3, #19
 800637c:	4ba3      	ldr	r3, [pc, #652]	; (800660c <USB_HC_StartXfer+0x440>)
 800637e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006380:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	7d9b      	ldrb	r3, [r3, #22]
 8006386:	075b      	lsls	r3, r3, #29
 8006388:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800638c:	69f9      	ldr	r1, [r7, #28]
 800638e:	0148      	lsls	r0, r1, #5
 8006390:	6a39      	ldr	r1, [r7, #32]
 8006392:	4401      	add	r1, r0
 8006394:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006398:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800639a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800639c:	79fb      	ldrb	r3, [r7, #7]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6999      	ldr	r1, [r3, #24]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b2:	460a      	mov	r2, r1
 80063b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	bf0c      	ite	eq
 80063c6:	2301      	moveq	r3, #1
 80063c8:	2300      	movne	r3, #0
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	6a3a      	ldr	r2, [r7, #32]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80063ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	7e7b      	ldrb	r3, [r7, #25]
 80063fe:	075b      	lsls	r3, r3, #29
 8006400:	69f9      	ldr	r1, [r7, #28]
 8006402:	0148      	lsls	r0, r1, #5
 8006404:	6a39      	ldr	r1, [r7, #32]
 8006406:	4401      	add	r1, r0
 8006408:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800640c:	4313      	orrs	r3, r2
 800640e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	799b      	ldrb	r3, [r3, #6]
 8006414:	2b01      	cmp	r3, #1
 8006416:	f040 80c3 	bne.w	80065a0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	7c5b      	ldrb	r3, [r3, #17]
 800641e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006424:	4313      	orrs	r3, r2
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	6a3a      	ldr	r2, [r7, #32]
 800642c:	440a      	add	r2, r1
 800642e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006436:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	4413      	add	r3, r2
 8006440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	6a3a      	ldr	r2, [r7, #32]
 800644c:	440a      	add	r2, r1
 800644e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006452:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006456:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	79db      	ldrb	r3, [r3, #7]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d123      	bne.n	80064a8 <USB_HC_StartXfer+0x2dc>
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	78db      	ldrb	r3, [r3, #3]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d11f      	bne.n	80064a8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	4413      	add	r3, r2
 8006470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	440a      	add	r2, r1
 800647e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006486:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	4413      	add	r3, r2
 8006490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	0151      	lsls	r1, r2, #5
 800649a:	6a3a      	ldr	r2, [r7, #32]
 800649c:	440a      	add	r2, r1
 800649e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	7c9b      	ldrb	r3, [r3, #18]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d003      	beq.n	80064b8 <USB_HC_StartXfer+0x2ec>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	7c9b      	ldrb	r3, [r3, #18]
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d117      	bne.n	80064e8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d113      	bne.n	80064e8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	78db      	ldrb	r3, [r3, #3]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d10f      	bne.n	80064e8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	0151      	lsls	r1, r2, #5
 80064da:	6a3a      	ldr	r2, [r7, #32]
 80064dc:	440a      	add	r2, r1
 80064de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	7c9b      	ldrb	r3, [r3, #18]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d162      	bne.n	80065b6 <USB_HC_StartXfer+0x3ea>
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	78db      	ldrb	r3, [r3, #3]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d15e      	bne.n	80065b6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	3b01      	subs	r3, #1
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d858      	bhi.n	80065b4 <USB_HC_StartXfer+0x3e8>
 8006502:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <USB_HC_StartXfer+0x33c>)
 8006504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006508:	08006519 	.word	0x08006519
 800650c:	0800653b 	.word	0x0800653b
 8006510:	0800655d 	.word	0x0800655d
 8006514:	0800657f 	.word	0x0800657f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	4413      	add	r3, r2
 8006520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	6a3a      	ldr	r2, [r7, #32]
 800652c:	440a      	add	r2, r1
 800652e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006536:	6053      	str	r3, [r2, #4]
          break;
 8006538:	e03d      	b.n	80065b6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	6a3a      	ldr	r2, [r7, #32]
 800654e:	440a      	add	r2, r1
 8006550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006554:	f043 030e 	orr.w	r3, r3, #14
 8006558:	6053      	str	r3, [r2, #4]
          break;
 800655a:	e02c      	b.n	80065b6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	4413      	add	r3, r2
 8006564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	440a      	add	r2, r1
 8006572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800657a:	6053      	str	r3, [r2, #4]
          break;
 800657c:	e01b      	b.n	80065b6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	4413      	add	r3, r2
 8006586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	6a3a      	ldr	r2, [r7, #32]
 8006592:	440a      	add	r2, r1
 8006594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006598:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800659c:	6053      	str	r3, [r2, #4]
          break;
 800659e:	e00a      	b.n	80065b6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ac:	461a      	mov	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	6053      	str	r3, [r2, #4]
 80065b2:	e000      	b.n	80065b6 <USB_HC_StartXfer+0x3ea>
          break;
 80065b4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065cc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	78db      	ldrb	r3, [r3, #3]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d004      	beq.n	80065e0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	e003      	b.n	80065e8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065e6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ee:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fc:	461a      	mov	r2, r3
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	e055      	b.n	80066b8 <USB_HC_StartXfer+0x4ec>
 800660c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	78db      	ldrb	r3, [r3, #3]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d14e      	bne.n	80066b6 <USB_HC_StartXfer+0x4ea>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d04a      	beq.n	80066b6 <USB_HC_StartXfer+0x4ea>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	79db      	ldrb	r3, [r3, #7]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d146      	bne.n	80066b6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	7c9b      	ldrb	r3, [r3, #18]
 800662c:	2b03      	cmp	r3, #3
 800662e:	d831      	bhi.n	8006694 <USB_HC_StartXfer+0x4c8>
 8006630:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <USB_HC_StartXfer+0x46c>)
 8006632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006636:	bf00      	nop
 8006638:	08006649 	.word	0x08006649
 800663c:	0800666d 	.word	0x0800666d
 8006640:	08006649 	.word	0x08006649
 8006644:	0800666d 	.word	0x0800666d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	3303      	adds	r3, #3
 800664e:	089b      	lsrs	r3, r3, #2
 8006650:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006652:	8afa      	ldrh	r2, [r7, #22]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	b29b      	uxth	r3, r3
 800665a:	429a      	cmp	r2, r3
 800665c:	d91c      	bls.n	8006698 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	f043 0220 	orr.w	r2, r3, #32
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	619a      	str	r2, [r3, #24]
        }
        break;
 800666a:	e015      	b.n	8006698 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	3303      	adds	r3, #3
 8006672:	089b      	lsrs	r3, r3, #2
 8006674:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006676:	8afa      	ldrh	r2, [r7, #22]
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	b29b      	uxth	r3, r3
 8006682:	429a      	cmp	r2, r3
 8006684:	d90a      	bls.n	800669c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	619a      	str	r2, [r3, #24]
        }
        break;
 8006692:	e003      	b.n	800669c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006694:	bf00      	nop
 8006696:	e002      	b.n	800669e <USB_HC_StartXfer+0x4d2>
        break;
 8006698:	bf00      	nop
 800669a:	e000      	b.n	800669e <USB_HC_StartXfer+0x4d2>
        break;
 800669c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6999      	ldr	r1, [r3, #24]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	785a      	ldrb	r2, [r3, #1]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2000      	movs	r0, #0
 80066ae:	9000      	str	r0, [sp, #0]
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f7ff f9c9 	bl	8005a48 <USB_WritePacket>
  }

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3728      	adds	r7, #40	; 0x28
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	b29b      	uxth	r3, r3
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b089      	sub	sp, #36	; 0x24
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	460b      	mov	r3, r1
 80066ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4413      	add	r3, r2
 8006702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	0c9b      	lsrs	r3, r3, #18
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	0fdb      	lsrs	r3, r3, #31
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	0fdb      	lsrs	r3, r3, #31
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b20      	cmp	r3, #32
 8006746:	d10d      	bne.n	8006764 <USB_HC_Halt+0x82>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10a      	bne.n	8006764 <USB_HC_Halt+0x82>
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d002      	beq.n	8006760 <USB_HC_Halt+0x7e>
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b03      	cmp	r3, #3
 800675e:	d101      	bne.n	8006764 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	e0d8      	b.n	8006916 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <USB_HC_Halt+0x8e>
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d173      	bne.n	8006858 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	4413      	add	r3, r2
 8006778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	440a      	add	r2, r1
 8006786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800678a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800678e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 0320 	and.w	r3, r3, #32
 8006798:	2b00      	cmp	r3, #0
 800679a:	d14a      	bne.n	8006832 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d133      	bne.n	8006810 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067c6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	3301      	adds	r3, #1
 80067ec:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067f4:	d82e      	bhi.n	8006854 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800680c:	d0ec      	beq.n	80067e8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800680e:	e081      	b.n	8006914 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	0151      	lsls	r1, r2, #5
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	440a      	add	r2, r1
 8006826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800682a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800682e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006830:	e070      	b.n	8006914 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	4413      	add	r3, r2
 800683a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	440a      	add	r2, r1
 8006848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800684c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006850:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006852:	e05f      	b.n	8006914 <USB_HC_Halt+0x232>
            break;
 8006854:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006856:	e05d      	b.n	8006914 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4413      	add	r3, r2
 8006860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	440a      	add	r2, r1
 800686e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006872:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006876:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d133      	bne.n	80068f0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	4413      	add	r3, r2
 8006890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	440a      	add	r2, r1
 800689e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068c6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068d4:	d81d      	bhi.n	8006912 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ec:	d0ec      	beq.n	80068c8 <USB_HC_Halt+0x1e6>
 80068ee:	e011      	b.n	8006914 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	0151      	lsls	r1, r2, #5
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	440a      	add	r2, r1
 8006906:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800690a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	e000      	b.n	8006914 <USB_HC_Halt+0x232>
          break;
 8006912:	bf00      	nop
    }
  }

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3724      	adds	r7, #36	; 0x24
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
	...

08006924 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006938:	2301      	movs	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	04da      	lsls	r2, r3, #19
 8006940:	4b15      	ldr	r3, [pc, #84]	; (8006998 <USB_DoPing+0x74>)
 8006942:	4013      	ands	r3, r2
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	440a      	add	r2, r1
 800694c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006954:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800696c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006974:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006982:	461a      	mov	r2, r3
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	1ff80000 	.word	0x1ff80000

0800699c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7fe ff8c 	bl	80058ce <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069b6:	2110      	movs	r1, #16
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7fe ffe5 	bl	8005988 <USB_FlushTxFifo>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff f80f 	bl	80059ec <USB_FlushRxFifo>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80069d8:	2300      	movs	r3, #0
 80069da:	61bb      	str	r3, [r7, #24]
 80069dc:	e01f      	b.n	8006a1e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a04:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a12:	461a      	mov	r2, r3
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b0f      	cmp	r3, #15
 8006a22:	d9dc      	bls.n	80069de <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a24:	2300      	movs	r3, #0
 8006a26:	61bb      	str	r3, [r7, #24]
 8006a28:	e034      	b.n	8006a94 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a40:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a48:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a50:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5e:	461a      	mov	r2, r3
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3301      	adds	r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a70:	d80c      	bhi.n	8006a8c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a88:	d0ec      	beq.n	8006a64 <USB_StopHost+0xc8>
 8006a8a:	e000      	b.n	8006a8e <USB_StopHost+0xf2>
        break;
 8006a8c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	3301      	adds	r3, #1
 8006a92:	61bb      	str	r3, [r7, #24]
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b0f      	cmp	r3, #15
 8006a98:	d9c7      	bls.n	8006a2a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aa6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006aae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7fe fefb 	bl	80058ac <USB_EnableGlobalInt>

  return ret;
 8006ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006ac0:	b590      	push	{r4, r7, lr}
 8006ac2:	b089      	sub	sp, #36	; 0x24
 8006ac4:	af04      	add	r7, sp, #16
 8006ac6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006ac8:	2301      	movs	r3, #1
 8006aca:	2202      	movs	r2, #2
 8006acc:	2102      	movs	r1, #2
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fc85 	bl	80073de <USBH_FindInterface>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	2bff      	cmp	r3, #255	; 0xff
 8006adc:	d002      	beq.n	8006ae4 <USBH_CDC_InterfaceInit+0x24>
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d901      	bls.n	8006ae8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	e13d      	b.n	8006d64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fc5a 	bl	80073a6 <USBH_SelectInterface>
 8006af2:	4603      	mov	r3, r0
 8006af4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006afc:	2302      	movs	r3, #2
 8006afe:	e131      	b.n	8006d64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006b06:	2050      	movs	r0, #80	; 0x50
 8006b08:	f002 fb74 	bl	80091f4 <malloc>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006b20:	2302      	movs	r3, #2
 8006b22:	e11f      	b.n	8006d64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006b24:	2250      	movs	r2, #80	; 0x50
 8006b26:	2100      	movs	r1, #0
 8006b28:	68b8      	ldr	r0, [r7, #8]
 8006b2a:	f002 fc1f 	bl	800936c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	211a      	movs	r1, #26
 8006b34:	fb01 f303 	mul.w	r3, r1, r3
 8006b38:	4413      	add	r3, r2
 8006b3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	b25b      	sxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	da15      	bge.n	8006b72 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	211a      	movs	r1, #26
 8006b4c:	fb01 f303 	mul.w	r3, r1, r3
 8006b50:	4413      	add	r3, r2
 8006b52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b56:	781a      	ldrb	r2, [r3, #0]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	211a      	movs	r1, #26
 8006b62:	fb01 f303 	mul.w	r3, r1, r3
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b6c:	881a      	ldrh	r2, [r3, #0]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 ffce 	bl	8008b1a <USBH_AllocPipe>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	461a      	mov	r2, r3
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	7819      	ldrb	r1, [r3, #0]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	7858      	ldrb	r0, [r3, #1]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	8952      	ldrh	r2, [r2, #10]
 8006b9e:	9202      	str	r2, [sp, #8]
 8006ba0:	2203      	movs	r2, #3
 8006ba2:	9201      	str	r2, [sp, #4]
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	4623      	mov	r3, r4
 8006ba8:	4602      	mov	r2, r0
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f001 ff86 	bl	8008abc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f002 fa95 	bl	80090e8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	210a      	movs	r1, #10
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc0a 	bl	80073de <USBH_FindInterface>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006bce:	7bfb      	ldrb	r3, [r7, #15]
 8006bd0:	2bff      	cmp	r3, #255	; 0xff
 8006bd2:	d002      	beq.n	8006bda <USBH_CDC_InterfaceInit+0x11a>
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d901      	bls.n	8006bde <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e0c2      	b.n	8006d64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	211a      	movs	r1, #26
 8006be4:	fb01 f303 	mul.w	r3, r1, r3
 8006be8:	4413      	add	r3, r2
 8006bea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	b25b      	sxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	da16      	bge.n	8006c24 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	211a      	movs	r1, #26
 8006bfc:	fb01 f303 	mul.w	r3, r1, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c06:	781a      	ldrb	r2, [r3, #0]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	211a      	movs	r1, #26
 8006c12:	fb01 f303 	mul.w	r3, r1, r3
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c1c:	881a      	ldrh	r2, [r3, #0]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	835a      	strh	r2, [r3, #26]
 8006c22:	e015      	b.n	8006c50 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	211a      	movs	r1, #26
 8006c2a:	fb01 f303 	mul.w	r3, r1, r3
 8006c2e:	4413      	add	r3, r2
 8006c30:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c34:	781a      	ldrb	r2, [r3, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	211a      	movs	r1, #26
 8006c40:	fb01 f303 	mul.w	r3, r1, r3
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c4a:	881a      	ldrh	r2, [r3, #0]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	211a      	movs	r1, #26
 8006c56:	fb01 f303 	mul.w	r3, r1, r3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	b25b      	sxtb	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	da16      	bge.n	8006c96 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	211a      	movs	r1, #26
 8006c6e:	fb01 f303 	mul.w	r3, r1, r3
 8006c72:	4413      	add	r3, r2
 8006c74:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c78:	781a      	ldrb	r2, [r3, #0]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	211a      	movs	r1, #26
 8006c84:	fb01 f303 	mul.w	r3, r1, r3
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c8e:	881a      	ldrh	r2, [r3, #0]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	835a      	strh	r2, [r3, #26]
 8006c94:	e015      	b.n	8006cc2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	211a      	movs	r1, #26
 8006c9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ca6:	781a      	ldrb	r2, [r3, #0]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	211a      	movs	r1, #26
 8006cb2:	fb01 f303 	mul.w	r3, r1, r3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006cbc:	881a      	ldrh	r2, [r3, #0]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	7b9b      	ldrb	r3, [r3, #14]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 ff26 	bl	8008b1a <USBH_AllocPipe>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	7bdb      	ldrb	r3, [r3, #15]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 ff1c 	bl	8008b1a <USBH_AllocPipe>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	7b59      	ldrb	r1, [r3, #13]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	7b98      	ldrb	r0, [r3, #14]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	8b12      	ldrh	r2, [r2, #24]
 8006d02:	9202      	str	r2, [sp, #8]
 8006d04:	2202      	movs	r2, #2
 8006d06:	9201      	str	r2, [sp, #4]
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	4623      	mov	r3, r4
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 fed4 	bl	8008abc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	7b19      	ldrb	r1, [r3, #12]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	7bd8      	ldrb	r0, [r3, #15]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	8b52      	ldrh	r2, [r2, #26]
 8006d2c:	9202      	str	r2, [sp, #8]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	9201      	str	r2, [sp, #4]
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	4623      	mov	r3, r4
 8006d36:	4602      	mov	r2, r0
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 febf 	bl	8008abc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	7b5b      	ldrb	r3, [r3, #13]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f002 f9ca 	bl	80090e8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	7b1b      	ldrb	r3, [r3, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f002 f9c3 	bl	80090e8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd90      	pop	{r4, r7, pc}

08006d6c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00e      	beq.n	8006da4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 feb4 	bl	8008afa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 fedf 	bl	8008b5c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	7b1b      	ldrb	r3, [r3, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00e      	beq.n	8006dca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	7b1b      	ldrb	r3, [r3, #12]
 8006db0:	4619      	mov	r1, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f001 fea1 	bl	8008afa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	7b1b      	ldrb	r3, [r3, #12]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 fecc 	bl	8008b5c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	7b5b      	ldrb	r3, [r3, #13]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00e      	beq.n	8006df0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	7b5b      	ldrb	r3, [r3, #13]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 fe8e 	bl	8008afa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	7b5b      	ldrb	r3, [r3, #13]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 feb9 	bl	8008b5c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f002 f9fd 	bl	8009204 <free>
    phost->pActiveClass->pData = 0U;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e10:	2200      	movs	r2, #0
 8006e12:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b084      	sub	sp, #16
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3340      	adds	r3, #64	; 0x40
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f8b1 	bl	8006f9e <GetLineCoding>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006e40:	7afb      	ldrb	r3, [r7, #11]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d105      	bne.n	8006e52 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e4c:	2102      	movs	r1, #2
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006e52:	7afb      	ldrb	r3, [r7, #11]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e64:	2301      	movs	r3, #1
 8006e66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d877      	bhi.n	8006f70 <USBH_CDC_Process+0x114>
 8006e80:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <USBH_CDC_Process+0x2c>)
 8006e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e86:	bf00      	nop
 8006e88:	08006e9d 	.word	0x08006e9d
 8006e8c:	08006ea3 	.word	0x08006ea3
 8006e90:	08006ed3 	.word	0x08006ed3
 8006e94:	08006f47 	.word	0x08006f47
 8006e98:	08006f55 	.word	0x08006f55
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea0:	e06d      	b.n	8006f7e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f897 	bl	8006fdc <SetLineCoding>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d104      	bne.n	8006ec2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ec0:	e058      	b.n	8006f74 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006ec2:	7bbb      	ldrb	r3, [r7, #14]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d055      	beq.n	8006f74 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2204      	movs	r2, #4
 8006ecc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ed0:	e050      	b.n	8006f74 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	3340      	adds	r3, #64	; 0x40
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f860 	bl	8006f9e <GetLineCoding>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d126      	bne.n	8006f36 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006efa:	791b      	ldrb	r3, [r3, #4]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d13b      	bne.n	8006f78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d133      	bne.n	8006f78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f1a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d12b      	bne.n	8006f78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f28:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d124      	bne.n	8006f78 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f958 	bl	80071e4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f34:	e020      	b.n	8006f78 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d01d      	beq.n	8006f78 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2204      	movs	r2, #4
 8006f40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006f44:	e018      	b.n	8006f78 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f867 	bl	800701a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f8da 	bl	8007106 <CDC_ProcessReception>
      break;
 8006f52:	e014      	b.n	8006f7e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006f54:	2100      	movs	r1, #0
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 f822 	bl	8007fa0 <USBH_ClrFeature>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006f6e:	e005      	b.n	8006f7c <USBH_CDC_Process+0x120>

    default:
      break;
 8006f70:	bf00      	nop
 8006f72:	e004      	b.n	8006f7e <USBH_CDC_Process+0x122>
      break;
 8006f74:	bf00      	nop
 8006f76:	e002      	b.n	8006f7e <USBH_CDC_Process+0x122>
      break;
 8006f78:	bf00      	nop
 8006f7a:	e000      	b.n	8006f7e <USBH_CDC_Process+0x122>
      break;
 8006f7c:	bf00      	nop

  }

  return status;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	22a1      	movs	r2, #161	; 0xa1
 8006fac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2221      	movs	r2, #33	; 0x21
 8006fb2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2207      	movs	r2, #7
 8006fc4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2207      	movs	r2, #7
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f001 fb23 	bl	8008618 <USBH_CtlReq>
 8006fd2:	4603      	mov	r3, r0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2221      	movs	r2, #33	; 0x21
 8006fea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2207      	movs	r2, #7
 8007002:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2207      	movs	r2, #7
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fb04 	bl	8008618 <USBH_CtlReq>
 8007010:	4603      	mov	r3, r0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b086      	sub	sp, #24
 800701e:	af02      	add	r7, sp, #8
 8007020:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800702c:	2300      	movs	r3, #0
 800702e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007036:	2b01      	cmp	r3, #1
 8007038:	d002      	beq.n	8007040 <CDC_ProcessTransmission+0x26>
 800703a:	2b02      	cmp	r3, #2
 800703c:	d023      	beq.n	8007086 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800703e:	e05e      	b.n	80070fe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	8b12      	ldrh	r2, [r2, #24]
 8007048:	4293      	cmp	r3, r2
 800704a:	d90b      	bls.n	8007064 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	69d9      	ldr	r1, [r3, #28]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8b1a      	ldrh	r2, [r3, #24]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	7b5b      	ldrb	r3, [r3, #13]
 8007058:	2001      	movs	r0, #1
 800705a:	9000      	str	r0, [sp, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fcea 	bl	8008a36 <USBH_BulkSendData>
 8007062:	e00b      	b.n	800707c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800706c:	b29a      	uxth	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	7b5b      	ldrb	r3, [r3, #13]
 8007072:	2001      	movs	r0, #1
 8007074:	9000      	str	r0, [sp, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fcdd 	bl	8008a36 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007084:	e03b      	b.n	80070fe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	7b5b      	ldrb	r3, [r3, #13]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f002 f801 	bl	8009094 <USBH_LL_GetURBState>
 8007092:	4603      	mov	r3, r0
 8007094:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007096:	7afb      	ldrb	r3, [r7, #11]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d128      	bne.n	80070ee <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	8b12      	ldrh	r2, [r2, #24]
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d90e      	bls.n	80070c6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	8b12      	ldrh	r2, [r2, #24]
 80070b0:	1a9a      	subs	r2, r3, r2
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	8b12      	ldrh	r2, [r2, #24]
 80070be:	441a      	add	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	61da      	str	r2, [r3, #28]
 80070c4:	e002      	b.n	80070cc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d004      	beq.n	80070de <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80070dc:	e00e      	b.n	80070fc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f868 	bl	80071bc <USBH_CDC_TransmitCallback>
      break;
 80070ec:	e006      	b.n	80070fc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80070ee:	7afb      	ldrb	r3, [r7, #11]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d103      	bne.n	80070fc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80070fc:	bf00      	nop
  }
}
 80070fe:	bf00      	nop
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b086      	sub	sp, #24
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007118:	2300      	movs	r3, #0
 800711a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007122:	2b03      	cmp	r3, #3
 8007124:	d002      	beq.n	800712c <CDC_ProcessReception+0x26>
 8007126:	2b04      	cmp	r3, #4
 8007128:	d00e      	beq.n	8007148 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800712a:	e043      	b.n	80071b4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	6a19      	ldr	r1, [r3, #32]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	8b5a      	ldrh	r2, [r3, #26]
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	7b1b      	ldrb	r3, [r3, #12]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 fca1 	bl	8008a80 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2204      	movs	r2, #4
 8007142:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007146:	e035      	b.n	80071b4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	7b1b      	ldrb	r3, [r3, #12]
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 ffa0 	bl	8009094 <USBH_LL_GetURBState>
 8007154:	4603      	mov	r3, r0
 8007156:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007158:	7cfb      	ldrb	r3, [r7, #19]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d129      	bne.n	80071b2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	7b1b      	ldrb	r3, [r3, #12]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f001 ff03 	bl	8008f70 <USBH_LL_GetLastXferSize>
 800716a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	429a      	cmp	r2, r3
 8007174:	d016      	beq.n	80071a4 <CDC_ProcessReception+0x9e>
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	8b5b      	ldrh	r3, [r3, #26]
 800717a:	461a      	mov	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4293      	cmp	r3, r2
 8007180:	d910      	bls.n	80071a4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	1ad2      	subs	r2, r2, r3
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	6a1a      	ldr	r2, [r3, #32]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	441a      	add	r2, r3
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2203      	movs	r2, #3
 800719e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80071a2:	e006      	b.n	80071b2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f80f 	bl	80071d0 <USBH_CDC_ReceiveCallback>
      break;
 80071b2:	bf00      	nop
  }
}
 80071b4:	bf00      	nop
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	4613      	mov	r3, r2
 8007204:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800720c:	2302      	movs	r3, #2
 800720e:	e029      	b.n	8007264 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	79fa      	ldrb	r2, [r7, #7]
 8007214:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 f81f 	bl	800726c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f001 fdd3 	bl	8008e08 <USBH_LL_Init>

  return USBH_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007278:	2300      	movs	r3, #0
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	e009      	b.n	8007292 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	33e0      	adds	r3, #224	; 0xe0
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	2200      	movs	r2, #0
 800728a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3301      	adds	r3, #1
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b0f      	cmp	r3, #15
 8007296:	d9f2      	bls.n	800727e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	e009      	b.n	80072b2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072a8:	2200      	movs	r2, #0
 80072aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3301      	adds	r3, #1
 80072b0:	60fb      	str	r3, [r7, #12]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b8:	d3f1      	bcc.n	800729e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2240      	movs	r2, #64	; 0x40
 80072de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	331c      	adds	r3, #28
 800730a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800730e:	2100      	movs	r1, #0
 8007310:	4618      	mov	r0, r3
 8007312:	f002 f82b 	bl	800936c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800731c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007320:	2100      	movs	r1, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f002 f822 	bl	800936c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f203 3326 	addw	r3, r3, #806	; 0x326
 800732e:	2212      	movs	r2, #18
 8007330:	2100      	movs	r1, #0
 8007332:	4618      	mov	r0, r3
 8007334:	f002 f81a 	bl	800936c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800733e:	223e      	movs	r2, #62	; 0x3e
 8007340:	2100      	movs	r1, #0
 8007342:	4618      	mov	r0, r3
 8007344:	f002 f812 	bl	800936c <memset>

  return USBH_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007352:	b480      	push	{r7}
 8007354:	b085      	sub	sp, #20
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d016      	beq.n	8007394 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10e      	bne.n	800738e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007376:	1c59      	adds	r1, r3, #1
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	33de      	adds	r3, #222	; 0xde
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	73fb      	strb	r3, [r7, #15]
 800738c:	e004      	b.n	8007398 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800738e:	2302      	movs	r3, #2
 8007390:	73fb      	strb	r3, [r7, #15]
 8007392:	e001      	b.n	8007398 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007394:	2302      	movs	r3, #2
 8007396:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007398:	7bfb      	ldrb	r3, [r7, #15]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b085      	sub	sp, #20
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80073bc:	78fa      	ldrb	r2, [r7, #3]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d204      	bcs.n	80073cc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	78fa      	ldrb	r2, [r7, #3]
 80073c6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80073ca:	e001      	b.n	80073d0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80073cc:	2302      	movs	r3, #2
 80073ce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80073de:	b480      	push	{r7}
 80073e0:	b087      	sub	sp, #28
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	4608      	mov	r0, r1
 80073e8:	4611      	mov	r1, r2
 80073ea:	461a      	mov	r2, r3
 80073ec:	4603      	mov	r3, r0
 80073ee:	70fb      	strb	r3, [r7, #3]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70bb      	strb	r3, [r7, #2]
 80073f4:	4613      	mov	r3, r2
 80073f6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007406:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007408:	e025      	b.n	8007456 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	221a      	movs	r2, #26
 800740e:	fb02 f303 	mul.w	r3, r2, r3
 8007412:	3308      	adds	r3, #8
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	3302      	adds	r3, #2
 800741a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	795b      	ldrb	r3, [r3, #5]
 8007420:	78fa      	ldrb	r2, [r7, #3]
 8007422:	429a      	cmp	r2, r3
 8007424:	d002      	beq.n	800742c <USBH_FindInterface+0x4e>
 8007426:	78fb      	ldrb	r3, [r7, #3]
 8007428:	2bff      	cmp	r3, #255	; 0xff
 800742a:	d111      	bne.n	8007450 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007430:	78ba      	ldrb	r2, [r7, #2]
 8007432:	429a      	cmp	r2, r3
 8007434:	d002      	beq.n	800743c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007436:	78bb      	ldrb	r3, [r7, #2]
 8007438:	2bff      	cmp	r3, #255	; 0xff
 800743a:	d109      	bne.n	8007450 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007440:	787a      	ldrb	r2, [r7, #1]
 8007442:	429a      	cmp	r2, r3
 8007444:	d002      	beq.n	800744c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007446:	787b      	ldrb	r3, [r7, #1]
 8007448:	2bff      	cmp	r3, #255	; 0xff
 800744a:	d101      	bne.n	8007450 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	e006      	b.n	800745e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	3301      	adds	r3, #1
 8007454:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d9d6      	bls.n	800740a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800745c:	23ff      	movs	r3, #255	; 0xff
}
 800745e:	4618      	mov	r0, r3
 8007460:	371c      	adds	r7, #28
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 fd04 	bl	8008e80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007478:	2101      	movs	r1, #1
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f001 fe1d 	bl	80090ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af04      	add	r7, sp, #16
 8007492:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007494:	2302      	movs	r3, #2
 8007496:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d102      	bne.n	80074ae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2203      	movs	r2, #3
 80074ac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b0b      	cmp	r3, #11
 80074b6:	f200 81be 	bhi.w	8007836 <USBH_Process+0x3aa>
 80074ba:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <USBH_Process+0x34>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	080074f1 	.word	0x080074f1
 80074c4:	08007523 	.word	0x08007523
 80074c8:	0800758b 	.word	0x0800758b
 80074cc:	080077d1 	.word	0x080077d1
 80074d0:	08007837 	.word	0x08007837
 80074d4:	0800762f 	.word	0x0800762f
 80074d8:	08007777 	.word	0x08007777
 80074dc:	08007665 	.word	0x08007665
 80074e0:	08007685 	.word	0x08007685
 80074e4:	080076a5 	.word	0x080076a5
 80074e8:	080076e9 	.word	0x080076e9
 80074ec:	080077b9 	.word	0x080077b9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 819e 	beq.w	800783a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007504:	20c8      	movs	r0, #200	; 0xc8
 8007506:	f001 fe22 	bl	800914e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 fd15 	bl	8008f3a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007520:	e18b      	b.n	800783a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007528:	2b01      	cmp	r3, #1
 800752a:	d107      	bne.n	800753c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800753a:	e18d      	b.n	8007858 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007546:	d914      	bls.n	8007572 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800754e:	3301      	adds	r3, #1
 8007550:	b2da      	uxtb	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800755e:	2b03      	cmp	r3, #3
 8007560:	d903      	bls.n	800756a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	220d      	movs	r2, #13
 8007566:	701a      	strb	r2, [r3, #0]
      break;
 8007568:	e176      	b.n	8007858 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	701a      	strb	r2, [r3, #0]
      break;
 8007570:	e172      	b.n	8007858 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007578:	f103 020a 	add.w	r2, r3, #10
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007582:	200a      	movs	r0, #10
 8007584:	f001 fde3 	bl	800914e <USBH_Delay>
      break;
 8007588:	e166      	b.n	8007858 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800759a:	2104      	movs	r1, #4
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80075a0:	2064      	movs	r0, #100	; 0x64
 80075a2:	f001 fdd4 	bl	800914e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 fca0 	bl	8008eec <USBH_LL_GetSpeed>
 80075ac:	4603      	mov	r3, r0
 80075ae:	461a      	mov	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2205      	movs	r2, #5
 80075ba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80075bc:	2100      	movs	r1, #0
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 faab 	bl	8008b1a <USBH_AllocPipe>
 80075c4:	4603      	mov	r3, r0
 80075c6:	461a      	mov	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80075cc:	2180      	movs	r1, #128	; 0x80
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 faa3 	bl	8008b1a <USBH_AllocPipe>
 80075d4:	4603      	mov	r3, r0
 80075d6:	461a      	mov	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	7919      	ldrb	r1, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80075f0:	b292      	uxth	r2, r2
 80075f2:	9202      	str	r2, [sp, #8]
 80075f4:	2200      	movs	r2, #0
 80075f6:	9201      	str	r2, [sp, #4]
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	4603      	mov	r3, r0
 80075fc:	2280      	movs	r2, #128	; 0x80
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 fa5c 	bl	8008abc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	7959      	ldrb	r1, [r3, #5]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007618:	b292      	uxth	r2, r2
 800761a:	9202      	str	r2, [sp, #8]
 800761c:	2200      	movs	r2, #0
 800761e:	9201      	str	r2, [sp, #4]
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	4603      	mov	r3, r0
 8007624:	2200      	movs	r2, #0
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fa48 	bl	8008abc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800762c:	e114      	b.n	8007858 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f918 	bl	8007864 <USBH_HandleEnum>
 8007634:	4603      	mov	r3, r0
 8007636:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 80fe 	bne.w	800783e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007650:	2b01      	cmp	r3, #1
 8007652:	d103      	bne.n	800765c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2208      	movs	r2, #8
 8007658:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800765a:	e0f0      	b.n	800783e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2207      	movs	r2, #7
 8007660:	701a      	strb	r2, [r3, #0]
      break;
 8007662:	e0ec      	b.n	800783e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 80e9 	beq.w	8007842 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007676:	2101      	movs	r1, #1
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2208      	movs	r2, #8
 8007680:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007682:	e0de      	b.n	8007842 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800768a:	b29b      	uxth	r3, r3
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fc3f 	bl	8007f12 <USBH_SetCfg>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	f040 80d5 	bne.w	8007846 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2209      	movs	r2, #9
 80076a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076a2:	e0d0      	b.n	8007846 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80076aa:	f003 0320 	and.w	r3, r3, #32
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d016      	beq.n	80076e0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80076b2:	2101      	movs	r1, #1
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fc4f 	bl	8007f58 <USBH_SetFeature>
 80076ba:	4603      	mov	r3, r0
 80076bc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d103      	bne.n	80076ce <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	220a      	movs	r2, #10
 80076ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076cc:	e0bd      	b.n	800784a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	f040 80b9 	bne.w	800784a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	220a      	movs	r2, #10
 80076dc:	701a      	strb	r2, [r3, #0]
      break;
 80076de:	e0b4      	b.n	800784a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	220a      	movs	r2, #10
 80076e4:	701a      	strb	r2, [r3, #0]
      break;
 80076e6:	e0b0      	b.n	800784a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 80ad 	beq.w	800784e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]
 8007700:	e016      	b.n	8007730 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007702:	7bfa      	ldrb	r2, [r7, #15]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	32de      	adds	r2, #222	; 0xde
 8007708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800770c:	791a      	ldrb	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007714:	429a      	cmp	r2, r3
 8007716:	d108      	bne.n	800772a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007718:	7bfa      	ldrb	r2, [r7, #15]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	32de      	adds	r2, #222	; 0xde
 800771e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007728:	e005      	b.n	8007736 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	3301      	adds	r3, #1
 800772e:	73fb      	strb	r3, [r7, #15]
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0e5      	beq.n	8007702 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800773c:	2b00      	cmp	r3, #0
 800773e:	d016      	beq.n	800776e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	4798      	blx	r3
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d109      	bne.n	8007766 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2206      	movs	r2, #6
 8007756:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800775e:	2103      	movs	r1, #3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007764:	e073      	b.n	800784e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	220d      	movs	r2, #13
 800776a:	701a      	strb	r2, [r3, #0]
      break;
 800776c:	e06f      	b.n	800784e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	220d      	movs	r2, #13
 8007772:	701a      	strb	r2, [r3, #0]
      break;
 8007774:	e06b      	b.n	800784e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800777c:	2b00      	cmp	r3, #0
 800777e:	d017      	beq.n	80077b0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	4798      	blx	r3
 800778c:	4603      	mov	r3, r0
 800778e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d103      	bne.n	80077a0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	220b      	movs	r2, #11
 800779c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800779e:	e058      	b.n	8007852 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d154      	bne.n	8007852 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	220d      	movs	r2, #13
 80077ac:	701a      	strb	r2, [r3, #0]
      break;
 80077ae:	e050      	b.n	8007852 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	220d      	movs	r2, #13
 80077b4:	701a      	strb	r2, [r3, #0]
      break;
 80077b6:	e04c      	b.n	8007852 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d049      	beq.n	8007856 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	4798      	blx	r3
      }
      break;
 80077ce:	e042      	b.n	8007856 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff fd47 	bl	800726c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d009      	beq.n	80077fc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007802:	2b00      	cmp	r3, #0
 8007804:	d005      	beq.n	8007812 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800780c:	2105      	movs	r1, #5
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b01      	cmp	r3, #1
 800781c:	d107      	bne.n	800782e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff fe1f 	bl	800746a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800782c:	e014      	b.n	8007858 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 fb26 	bl	8008e80 <USBH_LL_Start>
      break;
 8007834:	e010      	b.n	8007858 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007836:	bf00      	nop
 8007838:	e00e      	b.n	8007858 <USBH_Process+0x3cc>
      break;
 800783a:	bf00      	nop
 800783c:	e00c      	b.n	8007858 <USBH_Process+0x3cc>
      break;
 800783e:	bf00      	nop
 8007840:	e00a      	b.n	8007858 <USBH_Process+0x3cc>
    break;
 8007842:	bf00      	nop
 8007844:	e008      	b.n	8007858 <USBH_Process+0x3cc>
      break;
 8007846:	bf00      	nop
 8007848:	e006      	b.n	8007858 <USBH_Process+0x3cc>
      break;
 800784a:	bf00      	nop
 800784c:	e004      	b.n	8007858 <USBH_Process+0x3cc>
      break;
 800784e:	bf00      	nop
 8007850:	e002      	b.n	8007858 <USBH_Process+0x3cc>
      break;
 8007852:	bf00      	nop
 8007854:	e000      	b.n	8007858 <USBH_Process+0x3cc>
      break;
 8007856:	bf00      	nop
  }
  return USBH_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop

08007864 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af04      	add	r7, sp, #16
 800786a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800786c:	2301      	movs	r3, #1
 800786e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007870:	2301      	movs	r3, #1
 8007872:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	785b      	ldrb	r3, [r3, #1]
 8007878:	2b07      	cmp	r3, #7
 800787a:	f200 81c1 	bhi.w	8007c00 <USBH_HandleEnum+0x39c>
 800787e:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <USBH_HandleEnum+0x20>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	080078a5 	.word	0x080078a5
 8007888:	08007963 	.word	0x08007963
 800788c:	080079cd 	.word	0x080079cd
 8007890:	08007a5b 	.word	0x08007a5b
 8007894:	08007ac5 	.word	0x08007ac5
 8007898:	08007b35 	.word	0x08007b35
 800789c:	08007b7b 	.word	0x08007b7b
 80078a0:	08007bc1 	.word	0x08007bc1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80078a4:	2108      	movs	r1, #8
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fa50 	bl	8007d4c <USBH_Get_DevDesc>
 80078ac:	4603      	mov	r3, r0
 80078ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d130      	bne.n	8007918 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	7919      	ldrb	r1, [r3, #4]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80078da:	b292      	uxth	r2, r2
 80078dc:	9202      	str	r2, [sp, #8]
 80078de:	2200      	movs	r2, #0
 80078e0:	9201      	str	r2, [sp, #4]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	4603      	mov	r3, r0
 80078e6:	2280      	movs	r2, #128	; 0x80
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 f8e7 	bl	8008abc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7959      	ldrb	r1, [r3, #5]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007902:	b292      	uxth	r2, r2
 8007904:	9202      	str	r2, [sp, #8]
 8007906:	2200      	movs	r2, #0
 8007908:	9201      	str	r2, [sp, #4]
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	4603      	mov	r3, r0
 800790e:	2200      	movs	r2, #0
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 f8d3 	bl	8008abc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007916:	e175      	b.n	8007c04 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	2b03      	cmp	r3, #3
 800791c:	f040 8172 	bne.w	8007c04 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007926:	3301      	adds	r3, #1
 8007928:	b2da      	uxtb	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007936:	2b03      	cmp	r3, #3
 8007938:	d903      	bls.n	8007942 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	220d      	movs	r2, #13
 800793e:	701a      	strb	r2, [r3, #0]
      break;
 8007940:	e160      	b.n	8007c04 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	795b      	ldrb	r3, [r3, #5]
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f907 	bl	8008b5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	791b      	ldrb	r3, [r3, #4]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 f901 	bl	8008b5c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	701a      	strb	r2, [r3, #0]
      break;
 8007960:	e150      	b.n	8007c04 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007962:	2112      	movs	r1, #18
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f9f1 	bl	8007d4c <USBH_Get_DevDesc>
 800796a:	4603      	mov	r3, r0
 800796c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d103      	bne.n	800797c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800797a:	e145      	b.n	8007c08 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	2b03      	cmp	r3, #3
 8007980:	f040 8142 	bne.w	8007c08 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800798a:	3301      	adds	r3, #1
 800798c:	b2da      	uxtb	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800799a:	2b03      	cmp	r3, #3
 800799c:	d903      	bls.n	80079a6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	220d      	movs	r2, #13
 80079a2:	701a      	strb	r2, [r3, #0]
      break;
 80079a4:	e130      	b.n	8007c08 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	795b      	ldrb	r3, [r3, #5]
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 f8d5 	bl	8008b5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	791b      	ldrb	r3, [r3, #4]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 f8cf 	bl	8008b5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	701a      	strb	r2, [r3, #0]
      break;
 80079ca:	e11d      	b.n	8007c08 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80079cc:	2101      	movs	r1, #1
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa7b 	bl	8007eca <USBH_SetAddress>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d132      	bne.n	8007a44 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80079de:	2002      	movs	r0, #2
 80079e0:	f001 fbb5 	bl	800914e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2203      	movs	r2, #3
 80079f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7919      	ldrb	r1, [r3, #4]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a06:	b292      	uxth	r2, r2
 8007a08:	9202      	str	r2, [sp, #8]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	9201      	str	r2, [sp, #4]
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	4603      	mov	r3, r0
 8007a12:	2280      	movs	r2, #128	; 0x80
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 f851 	bl	8008abc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7959      	ldrb	r1, [r3, #5]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a2e:	b292      	uxth	r2, r2
 8007a30:	9202      	str	r2, [sp, #8]
 8007a32:	2200      	movs	r2, #0
 8007a34:	9201      	str	r2, [sp, #4]
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 f83d 	bl	8008abc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a42:	e0e3      	b.n	8007c0c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	f040 80e0 	bne.w	8007c0c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	220d      	movs	r2, #13
 8007a50:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	705a      	strb	r2, [r3, #1]
      break;
 8007a58:	e0d8      	b.n	8007c0c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007a5a:	2109      	movs	r1, #9
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f9a1 	bl	8007da4 <USBH_Get_CfgDesc>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d103      	bne.n	8007a74 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2204      	movs	r2, #4
 8007a70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a72:	e0cd      	b.n	8007c10 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	f040 80ca 	bne.w	8007c10 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a82:	3301      	adds	r3, #1
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d903      	bls.n	8007a9e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	220d      	movs	r2, #13
 8007a9a:	701a      	strb	r2, [r3, #0]
      break;
 8007a9c:	e0b8      	b.n	8007c10 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	795b      	ldrb	r3, [r3, #5]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 f859 	bl	8008b5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	791b      	ldrb	r3, [r3, #4]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 f853 	bl	8008b5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	701a      	strb	r2, [r3, #0]
      break;
 8007ac2:	e0a5      	b.n	8007c10 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f969 	bl	8007da4 <USBH_Get_CfgDesc>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d103      	bne.n	8007ae4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2205      	movs	r2, #5
 8007ae0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ae2:	e097      	b.n	8007c14 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	f040 8094 	bne.w	8007c14 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007af2:	3301      	adds	r3, #1
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d903      	bls.n	8007b0e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	220d      	movs	r2, #13
 8007b0a:	701a      	strb	r2, [r3, #0]
      break;
 8007b0c:	e082      	b.n	8007c14 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	795b      	ldrb	r3, [r3, #5]
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 f821 	bl	8008b5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	791b      	ldrb	r3, [r3, #4]
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f001 f81b 	bl	8008b5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	701a      	strb	r2, [r3, #0]
      break;
 8007b32:	e06f      	b.n	8007c14 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d019      	beq.n	8007b72 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b4a:	23ff      	movs	r3, #255	; 0xff
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f953 	bl	8007df8 <USBH_Get_StringDesc>
 8007b52:	4603      	mov	r3, r0
 8007b54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d103      	bne.n	8007b64 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2206      	movs	r2, #6
 8007b60:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b62:	e059      	b.n	8007c18 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d156      	bne.n	8007c18 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2206      	movs	r2, #6
 8007b6e:	705a      	strb	r2, [r3, #1]
      break;
 8007b70:	e052      	b.n	8007c18 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2206      	movs	r2, #6
 8007b76:	705a      	strb	r2, [r3, #1]
      break;
 8007b78:	e04e      	b.n	8007c18 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d019      	beq.n	8007bb8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b90:	23ff      	movs	r3, #255	; 0xff
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f930 	bl	8007df8 <USBH_Get_StringDesc>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d103      	bne.n	8007baa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2207      	movs	r2, #7
 8007ba6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ba8:	e038      	b.n	8007c1c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d135      	bne.n	8007c1c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2207      	movs	r2, #7
 8007bb4:	705a      	strb	r2, [r3, #1]
      break;
 8007bb6:	e031      	b.n	8007c1c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2207      	movs	r2, #7
 8007bbc:	705a      	strb	r2, [r3, #1]
      break;
 8007bbe:	e02d      	b.n	8007c1c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d017      	beq.n	8007bfa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007bd6:	23ff      	movs	r3, #255	; 0xff
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f90d 	bl	8007df8 <USBH_Get_StringDesc>
 8007bde:	4603      	mov	r3, r0
 8007be0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d102      	bne.n	8007bee <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007bec:	e018      	b.n	8007c20 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d115      	bne.n	8007c20 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8007bf8:	e012      	b.n	8007c20 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8007bfe:	e00f      	b.n	8007c20 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007c00:	bf00      	nop
 8007c02:	e00e      	b.n	8007c22 <USBH_HandleEnum+0x3be>
      break;
 8007c04:	bf00      	nop
 8007c06:	e00c      	b.n	8007c22 <USBH_HandleEnum+0x3be>
      break;
 8007c08:	bf00      	nop
 8007c0a:	e00a      	b.n	8007c22 <USBH_HandleEnum+0x3be>
      break;
 8007c0c:	bf00      	nop
 8007c0e:	e008      	b.n	8007c22 <USBH_HandleEnum+0x3be>
      break;
 8007c10:	bf00      	nop
 8007c12:	e006      	b.n	8007c22 <USBH_HandleEnum+0x3be>
      break;
 8007c14:	bf00      	nop
 8007c16:	e004      	b.n	8007c22 <USBH_HandleEnum+0x3be>
      break;
 8007c18:	bf00      	nop
 8007c1a:	e002      	b.n	8007c22 <USBH_HandleEnum+0x3be>
      break;
 8007c1c:	bf00      	nop
 8007c1e:	e000      	b.n	8007c22 <USBH_HandleEnum+0x3be>
      break;
 8007c20:	bf00      	nop
  }
  return Status;
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b082      	sub	sp, #8
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f804 	bl	8007c6e <USBH_HandleSof>
}
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b082      	sub	sp, #8
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b0b      	cmp	r3, #11
 8007c7e:	d10a      	bne.n	8007c96 <USBH_HandleSof+0x28>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d005      	beq.n	8007c96 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	4798      	blx	r3
  }
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007cae:	bf00      	nop
}
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b083      	sub	sp, #12
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007cca:	bf00      	nop
}
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 f8c6 	bl	8008eb6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	791b      	ldrb	r3, [r3, #4]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 ff13 	bl	8008b5c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	795b      	ldrb	r3, [r3, #5]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 ff0d 	bl	8008b5c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007d58:	887b      	ldrh	r3, [r7, #2]
 8007d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d5e:	d901      	bls.n	8007d64 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e01b      	b.n	8007d9c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007d6a:	887b      	ldrh	r3, [r7, #2]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d74:	2100      	movs	r1, #0
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f872 	bl	8007e60 <USBH_GetDescriptor>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d109      	bne.n	8007d9a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d8c:	887a      	ldrh	r2, [r7, #2]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f929 	bl	8007fe8 <USBH_ParseDevDesc>
 8007d96:	4603      	mov	r3, r0
 8007d98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	331c      	adds	r3, #28
 8007db4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007db6:	887b      	ldrh	r3, [r7, #2]
 8007db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbc:	d901      	bls.n	8007dc2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e016      	b.n	8007df0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007dc2:	887b      	ldrh	r3, [r7, #2]
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dcc:	2100      	movs	r1, #0
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f846 	bl	8007e60 <USBH_GetDescriptor>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d107      	bne.n	8007dee <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007dde:	887b      	ldrh	r3, [r7, #2]
 8007de0:	461a      	mov	r2, r3
 8007de2:	68b9      	ldr	r1, [r7, #8]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f9b3 	bl	8008150 <USBH_ParseCfgDesc>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	607a      	str	r2, [r7, #4]
 8007e02:	461a      	mov	r2, r3
 8007e04:	460b      	mov	r3, r1
 8007e06:	72fb      	strb	r3, [r7, #11]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007e0c:	893b      	ldrh	r3, [r7, #8]
 8007e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e12:	d802      	bhi.n	8007e1a <USBH_Get_StringDesc+0x22>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e01c      	b.n	8007e58 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007e1e:	7afb      	ldrb	r3, [r7, #11]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007e26:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007e2e:	893b      	ldrh	r3, [r7, #8]
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	460b      	mov	r3, r1
 8007e34:	2100      	movs	r1, #0
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f812 	bl	8007e60 <USBH_GetDescriptor>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d107      	bne.n	8007e56 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e4c:	893a      	ldrh	r2, [r7, #8]
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 fb93 	bl	800857c <USBH_ParseStringDesc>
  }

  return status;
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3718      	adds	r7, #24
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	607b      	str	r3, [r7, #4]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	72fb      	strb	r3, [r7, #11]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	789b      	ldrb	r3, [r3, #2]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d11c      	bne.n	8007eb4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e7a:	7afb      	ldrb	r3, [r7, #11]
 8007e7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2206      	movs	r2, #6
 8007e8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	893a      	ldrh	r2, [r7, #8]
 8007e90:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e92:	893b      	ldrh	r3, [r7, #8]
 8007e94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e9c:	d104      	bne.n	8007ea8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f240 4209 	movw	r2, #1033	; 0x409
 8007ea4:	829a      	strh	r2, [r3, #20]
 8007ea6:	e002      	b.n	8007eae <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8b3a      	ldrh	r2, [r7, #24]
 8007eb2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007eb4:	8b3b      	ldrh	r3, [r7, #24]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 fbac 	bl	8008618 <USBH_CtlReq>
 8007ec0:	4603      	mov	r3, r0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b082      	sub	sp, #8
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	789b      	ldrb	r3, [r3, #2]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d10f      	bne.n	8007efe <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2205      	movs	r2, #5
 8007ee8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007eea:	78fb      	ldrb	r3, [r7, #3]
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007efe:	2200      	movs	r2, #0
 8007f00:	2100      	movs	r1, #0
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fb88 	bl	8008618 <USBH_CtlReq>
 8007f08:	4603      	mov	r3, r0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	789b      	ldrb	r3, [r3, #2]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d10e      	bne.n	8007f44 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2209      	movs	r2, #9
 8007f30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	887a      	ldrh	r2, [r7, #2]
 8007f36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f44:	2200      	movs	r2, #0
 8007f46:	2100      	movs	r1, #0
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fb65 	bl	8008618 <USBH_CtlReq>
 8007f4e:	4603      	mov	r3, r0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	789b      	ldrb	r3, [r3, #2]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d10f      	bne.n	8007f8c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2203      	movs	r2, #3
 8007f76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	2100      	movs	r1, #0
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fb41 	bl	8008618 <USBH_CtlReq>
 8007f96:	4603      	mov	r3, r0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	789b      	ldrb	r3, [r3, #2]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d10f      	bne.n	8007fd4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fb1d 	bl	8008618 <USBH_CtlReq>
 8007fde:	4603      	mov	r3, r0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007ffc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008008:	2302      	movs	r3, #2
 800800a:	e098      	b.n	800813e <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	781a      	ldrb	r2, [r3, #0]
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	785a      	ldrb	r2, [r3, #1]
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	3302      	adds	r3, #2
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	b29a      	uxth	r2, r3
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	3303      	adds	r3, #3
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	b29b      	uxth	r3, r3
 800802c:	021b      	lsls	r3, r3, #8
 800802e:	b29b      	uxth	r3, r3
 8008030:	4313      	orrs	r3, r2
 8008032:	b29a      	uxth	r2, r3
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	791a      	ldrb	r2, [r3, #4]
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	795a      	ldrb	r2, [r3, #5]
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	799a      	ldrb	r2, [r3, #6]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	79da      	ldrb	r2, [r3, #7]
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008068:	2b01      	cmp	r3, #1
 800806a:	d11b      	bne.n	80080a4 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	79db      	ldrb	r3, [r3, #7]
 8008070:	2b20      	cmp	r3, #32
 8008072:	dc0f      	bgt.n	8008094 <USBH_ParseDevDesc+0xac>
 8008074:	2b08      	cmp	r3, #8
 8008076:	db0f      	blt.n	8008098 <USBH_ParseDevDesc+0xb0>
 8008078:	3b08      	subs	r3, #8
 800807a:	4a34      	ldr	r2, [pc, #208]	; (800814c <USBH_ParseDevDesc+0x164>)
 800807c:	fa22 f303 	lsr.w	r3, r2, r3
 8008080:	f003 0301 	and.w	r3, r3, #1
 8008084:	2b00      	cmp	r3, #0
 8008086:	bf14      	ite	ne
 8008088:	2301      	movne	r3, #1
 800808a:	2300      	moveq	r3, #0
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <USBH_ParseDevDesc+0xb8>
 8008092:	e001      	b.n	8008098 <USBH_ParseDevDesc+0xb0>
 8008094:	2b40      	cmp	r3, #64	; 0x40
 8008096:	d003      	beq.n	80080a0 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	2208      	movs	r2, #8
 800809c:	71da      	strb	r2, [r3, #7]
        break;
 800809e:	e000      	b.n	80080a2 <USBH_ParseDevDesc+0xba>
        break;
 80080a0:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80080a2:	e00e      	b.n	80080c2 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d107      	bne.n	80080be <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	79db      	ldrb	r3, [r3, #7]
 80080b2:	2b08      	cmp	r3, #8
 80080b4:	d005      	beq.n	80080c2 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	2208      	movs	r2, #8
 80080ba:	71da      	strb	r2, [r3, #7]
 80080bc:	e001      	b.n	80080c2 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80080be:	2303      	movs	r3, #3
 80080c0:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80080c2:	88fb      	ldrh	r3, [r7, #6]
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d939      	bls.n	800813c <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	3308      	adds	r3, #8
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	3309      	adds	r3, #9
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	021b      	lsls	r3, r3, #8
 80080da:	b29b      	uxth	r3, r3
 80080dc:	4313      	orrs	r3, r2
 80080de:	b29a      	uxth	r2, r3
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	330a      	adds	r3, #10
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	330b      	adds	r3, #11
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	021b      	lsls	r3, r3, #8
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	4313      	orrs	r3, r2
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	330c      	adds	r3, #12
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	b29a      	uxth	r2, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	330d      	adds	r3, #13
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	021b      	lsls	r3, r3, #8
 8008112:	b29b      	uxth	r3, r3
 8008114:	4313      	orrs	r3, r2
 8008116:	b29a      	uxth	r2, r3
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	7b9a      	ldrb	r2, [r3, #14]
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	7bda      	ldrb	r2, [r3, #15]
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	7c1a      	ldrb	r2, [r3, #16]
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	7c5a      	ldrb	r2, [r3, #17]
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
}
 800813e:	4618      	mov	r0, r3
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	01000101 	.word	0x01000101

08008150 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b08c      	sub	sp, #48	; 0x30
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	4613      	mov	r3, r2
 800815c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008164:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d101      	bne.n	8008182 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800817e:	2302      	movs	r3, #2
 8008180:	e0db      	b.n	800833a <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	781a      	ldrb	r2, [r3, #0]
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	785a      	ldrb	r2, [r3, #1]
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	3302      	adds	r3, #2
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	b29a      	uxth	r2, r3
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	3303      	adds	r3, #3
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	021b      	lsls	r3, r3, #8
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	4313      	orrs	r3, r2
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b2:	bf28      	it	cs
 80081b4:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	791a      	ldrb	r2, [r3, #4]
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	795a      	ldrb	r2, [r3, #5]
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	799a      	ldrb	r2, [r3, #6]
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	79da      	ldrb	r2, [r3, #7]
 80081da:	6a3b      	ldr	r3, [r7, #32]
 80081dc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	7a1a      	ldrb	r2, [r3, #8]
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b09      	cmp	r3, #9
 80081ec:	d002      	beq.n	80081f4 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	2209      	movs	r2, #9
 80081f2:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80081f4:	88fb      	ldrh	r3, [r7, #6]
 80081f6:	2b09      	cmp	r3, #9
 80081f8:	f240 809d 	bls.w	8008336 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 80081fc:	2309      	movs	r3, #9
 80081fe:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008200:	2300      	movs	r3, #0
 8008202:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008204:	e081      	b.n	800830a <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008206:	f107 0316 	add.w	r3, r7, #22
 800820a:	4619      	mov	r1, r3
 800820c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800820e:	f000 f9e8 	bl	80085e2 <USBH_GetNextDesc>
 8008212:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	2b04      	cmp	r3, #4
 800821a:	d176      	bne.n	800830a <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800821c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	2b09      	cmp	r3, #9
 8008222:	d002      	beq.n	800822a <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	2209      	movs	r2, #9
 8008228:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800822a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800822e:	221a      	movs	r2, #26
 8008230:	fb02 f303 	mul.w	r3, r2, r3
 8008234:	3308      	adds	r3, #8
 8008236:	6a3a      	ldr	r2, [r7, #32]
 8008238:	4413      	add	r3, r2
 800823a:	3302      	adds	r3, #2
 800823c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800823e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008240:	69f8      	ldr	r0, [r7, #28]
 8008242:	f000 f87e 	bl	8008342 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008246:	2300      	movs	r3, #0
 8008248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800824c:	2300      	movs	r3, #0
 800824e:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008250:	e043      	b.n	80082da <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008252:	f107 0316 	add.w	r3, r7, #22
 8008256:	4619      	mov	r1, r3
 8008258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800825a:	f000 f9c2 	bl	80085e2 <USBH_GetNextDesc>
 800825e:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008262:	785b      	ldrb	r3, [r3, #1]
 8008264:	2b05      	cmp	r3, #5
 8008266:	d138      	bne.n	80082da <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	795b      	ldrb	r3, [r3, #5]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d113      	bne.n	8008298 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008274:	2b02      	cmp	r3, #2
 8008276:	d003      	beq.n	8008280 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	799b      	ldrb	r3, [r3, #6]
 800827c:	2b03      	cmp	r3, #3
 800827e:	d10b      	bne.n	8008298 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	79db      	ldrb	r3, [r3, #7]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10b      	bne.n	80082a0 <USBH_ParseCfgDesc+0x150>
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	2b09      	cmp	r3, #9
 800828e:	d007      	beq.n	80082a0 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	2209      	movs	r2, #9
 8008294:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008296:	e003      	b.n	80082a0 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	2207      	movs	r2, #7
 800829c:	701a      	strb	r2, [r3, #0]
 800829e:	e000      	b.n	80082a2 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082a0:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80082a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082aa:	3201      	adds	r2, #1
 80082ac:	00d2      	lsls	r2, r2, #3
 80082ae:	211a      	movs	r1, #26
 80082b0:	fb01 f303 	mul.w	r3, r1, r3
 80082b4:	4413      	add	r3, r2
 80082b6:	3308      	adds	r3, #8
 80082b8:	6a3a      	ldr	r2, [r7, #32]
 80082ba:	4413      	add	r3, r2
 80082bc:	3304      	adds	r3, #4
 80082be:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80082c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082c2:	69b9      	ldr	r1, [r7, #24]
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 f870 	bl	80083aa <USBH_ParseEPDesc>
 80082ca:	4603      	mov	r3, r0
 80082cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80082d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082d4:	3301      	adds	r3, #1
 80082d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	791b      	ldrb	r3, [r3, #4]
 80082de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d204      	bcs.n	80082f0 <USBH_ParseCfgDesc+0x1a0>
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	885a      	ldrh	r2, [r3, #2]
 80082ea:	8afb      	ldrh	r3, [r7, #22]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d8b0      	bhi.n	8008252 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	791b      	ldrb	r3, [r3, #4]
 80082f4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d201      	bcs.n	8008300 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e01c      	b.n	800833a <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8008300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008304:	3301      	adds	r3, #1
 8008306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800830a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800830e:	2b01      	cmp	r3, #1
 8008310:	d805      	bhi.n	800831e <USBH_ParseCfgDesc+0x1ce>
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	885a      	ldrh	r2, [r3, #2]
 8008316:	8afb      	ldrh	r3, [r7, #22]
 8008318:	429a      	cmp	r2, r3
 800831a:	f63f af74 	bhi.w	8008206 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	791b      	ldrb	r3, [r3, #4]
 8008322:	2b02      	cmp	r3, #2
 8008324:	bf28      	it	cs
 8008326:	2302      	movcs	r3, #2
 8008328:	b2db      	uxtb	r3, r3
 800832a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800832e:	429a      	cmp	r2, r3
 8008330:	d201      	bcs.n	8008336 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8008332:	2303      	movs	r3, #3
 8008334:	e001      	b.n	800833a <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8008336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800833a:	4618      	mov	r0, r3
 800833c:	3730      	adds	r7, #48	; 0x30
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781a      	ldrb	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	785a      	ldrb	r2, [r3, #1]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	789a      	ldrb	r2, [r3, #2]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	78da      	ldrb	r2, [r3, #3]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	3304      	adds	r3, #4
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	2b02      	cmp	r3, #2
 8008374:	bf28      	it	cs
 8008376:	2302      	movcs	r3, #2
 8008378:	b2da      	uxtb	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	795a      	ldrb	r2, [r3, #5]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	799a      	ldrb	r2, [r3, #6]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	79da      	ldrb	r2, [r3, #7]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	7a1a      	ldrb	r2, [r3, #8]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	721a      	strb	r2, [r3, #8]
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b087      	sub	sp, #28
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	781a      	ldrb	r2, [r3, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	785a      	ldrb	r2, [r3, #1]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	789a      	ldrb	r2, [r3, #2]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	78da      	ldrb	r2, [r3, #3]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	3304      	adds	r3, #4
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	3305      	adds	r3, #5
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	021b      	lsls	r3, r3, #8
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	4313      	orrs	r3, r2
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	799a      	ldrb	r2, [r3, #6]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	889b      	ldrh	r3, [r3, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d009      	beq.n	800841a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800840a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800840e:	d804      	bhi.n	800841a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008418:	d901      	bls.n	800841e <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800841a:	2303      	movs	r3, #3
 800841c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008424:	2b00      	cmp	r3, #0
 8008426:	d136      	bne.n	8008496 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	78db      	ldrb	r3, [r3, #3]
 800842c:	f003 0303 	and.w	r3, r3, #3
 8008430:	2b02      	cmp	r3, #2
 8008432:	d108      	bne.n	8008446 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	889b      	ldrh	r3, [r3, #4]
 8008438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800843c:	f240 8097 	bls.w	800856e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008440:	2303      	movs	r3, #3
 8008442:	75fb      	strb	r3, [r7, #23]
 8008444:	e093      	b.n	800856e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	78db      	ldrb	r3, [r3, #3]
 800844a:	f003 0303 	and.w	r3, r3, #3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d107      	bne.n	8008462 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	889b      	ldrh	r3, [r3, #4]
 8008456:	2b40      	cmp	r3, #64	; 0x40
 8008458:	f240 8089 	bls.w	800856e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800845c:	2303      	movs	r3, #3
 800845e:	75fb      	strb	r3, [r7, #23]
 8008460:	e085      	b.n	800856e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	78db      	ldrb	r3, [r3, #3]
 8008466:	f003 0303 	and.w	r3, r3, #3
 800846a:	2b01      	cmp	r3, #1
 800846c:	d005      	beq.n	800847a <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	78db      	ldrb	r3, [r3, #3]
 8008472:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008476:	2b03      	cmp	r3, #3
 8008478:	d10a      	bne.n	8008490 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	799b      	ldrb	r3, [r3, #6]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <USBH_ParseEPDesc+0xe0>
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	799b      	ldrb	r3, [r3, #6]
 8008486:	2b10      	cmp	r3, #16
 8008488:	d970      	bls.n	800856c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800848a:	2303      	movs	r3, #3
 800848c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800848e:	e06d      	b.n	800856c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008490:	2303      	movs	r3, #3
 8008492:	75fb      	strb	r3, [r7, #23]
 8008494:	e06b      	b.n	800856e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800849c:	2b01      	cmp	r3, #1
 800849e:	d13c      	bne.n	800851a <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	78db      	ldrb	r3, [r3, #3]
 80084a4:	f003 0303 	and.w	r3, r3, #3
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d005      	beq.n	80084b8 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	78db      	ldrb	r3, [r3, #3]
 80084b0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d106      	bne.n	80084c6 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	889b      	ldrh	r3, [r3, #4]
 80084bc:	2b40      	cmp	r3, #64	; 0x40
 80084be:	d956      	bls.n	800856e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80084c0:	2303      	movs	r3, #3
 80084c2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80084c4:	e053      	b.n	800856e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	78db      	ldrb	r3, [r3, #3]
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d10e      	bne.n	80084f0 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	799b      	ldrb	r3, [r3, #6]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d007      	beq.n	80084ea <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80084de:	2b10      	cmp	r3, #16
 80084e0:	d803      	bhi.n	80084ea <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80084e6:	2b40      	cmp	r3, #64	; 0x40
 80084e8:	d941      	bls.n	800856e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80084ea:	2303      	movs	r3, #3
 80084ec:	75fb      	strb	r3, [r7, #23]
 80084ee:	e03e      	b.n	800856e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	78db      	ldrb	r3, [r3, #3]
 80084f4:	f003 0303 	and.w	r3, r3, #3
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d10b      	bne.n	8008514 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	799b      	ldrb	r3, [r3, #6]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d004      	beq.n	800850e <USBH_ParseEPDesc+0x164>
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	889b      	ldrh	r3, [r3, #4]
 8008508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800850c:	d32f      	bcc.n	800856e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800850e:	2303      	movs	r3, #3
 8008510:	75fb      	strb	r3, [r7, #23]
 8008512:	e02c      	b.n	800856e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008514:	2303      	movs	r3, #3
 8008516:	75fb      	strb	r3, [r7, #23]
 8008518:	e029      	b.n	800856e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008520:	2b02      	cmp	r3, #2
 8008522:	d120      	bne.n	8008566 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	78db      	ldrb	r3, [r3, #3]
 8008528:	f003 0303 	and.w	r3, r3, #3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d106      	bne.n	800853e <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	889b      	ldrh	r3, [r3, #4]
 8008534:	2b08      	cmp	r3, #8
 8008536:	d01a      	beq.n	800856e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008538:	2303      	movs	r3, #3
 800853a:	75fb      	strb	r3, [r7, #23]
 800853c:	e017      	b.n	800856e <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	78db      	ldrb	r3, [r3, #3]
 8008542:	f003 0303 	and.w	r3, r3, #3
 8008546:	2b03      	cmp	r3, #3
 8008548:	d10a      	bne.n	8008560 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	799b      	ldrb	r3, [r3, #6]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <USBH_ParseEPDesc+0x1b0>
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	889b      	ldrh	r3, [r3, #4]
 8008556:	2b08      	cmp	r3, #8
 8008558:	d909      	bls.n	800856e <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800855a:	2303      	movs	r3, #3
 800855c:	75fb      	strb	r3, [r7, #23]
 800855e:	e006      	b.n	800856e <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008560:	2303      	movs	r3, #3
 8008562:	75fb      	strb	r3, [r7, #23]
 8008564:	e003      	b.n	800856e <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008566:	2303      	movs	r3, #3
 8008568:	75fb      	strb	r3, [r7, #23]
 800856a:	e000      	b.n	800856e <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800856c:	bf00      	nop
  }

  return status;
 800856e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008570:	4618      	mov	r0, r3
 8008572:	371c      	adds	r7, #28
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	4613      	mov	r3, r2
 8008588:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3301      	adds	r3, #1
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b03      	cmp	r3, #3
 8008592:	d120      	bne.n	80085d6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	1e9a      	subs	r2, r3, #2
 800859a:	88fb      	ldrh	r3, [r7, #6]
 800859c:	4293      	cmp	r3, r2
 800859e:	bf28      	it	cs
 80085a0:	4613      	movcs	r3, r2
 80085a2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3302      	adds	r3, #2
 80085a8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80085aa:	2300      	movs	r3, #0
 80085ac:	82fb      	strh	r3, [r7, #22]
 80085ae:	e00b      	b.n	80085c8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80085b0:	8afb      	ldrh	r3, [r7, #22]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4413      	add	r3, r2
 80085b6:	781a      	ldrb	r2, [r3, #0]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	701a      	strb	r2, [r3, #0]
      pdest++;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	3301      	adds	r3, #1
 80085c0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80085c2:	8afb      	ldrh	r3, [r7, #22]
 80085c4:	3302      	adds	r3, #2
 80085c6:	82fb      	strh	r3, [r7, #22]
 80085c8:	8afa      	ldrh	r2, [r7, #22]
 80085ca:	8abb      	ldrh	r3, [r7, #20]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d3ef      	bcc.n	80085b0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	2200      	movs	r2, #0
 80085d4:	701a      	strb	r2, [r3, #0]
  }
}
 80085d6:	bf00      	nop
 80085d8:	371c      	adds	r7, #28
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	881a      	ldrh	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	4413      	add	r3, r2
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4413      	add	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800860a:	68fb      	ldr	r3, [r7, #12]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	4613      	mov	r3, r2
 8008624:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008626:	2301      	movs	r3, #1
 8008628:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	789b      	ldrb	r3, [r3, #2]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d002      	beq.n	8008638 <USBH_CtlReq+0x20>
 8008632:	2b02      	cmp	r3, #2
 8008634:	d00f      	beq.n	8008656 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008636:	e027      	b.n	8008688 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	88fa      	ldrh	r2, [r7, #6]
 8008642:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2201      	movs	r2, #1
 8008648:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2202      	movs	r2, #2
 800864e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008650:	2301      	movs	r3, #1
 8008652:	75fb      	strb	r3, [r7, #23]
      break;
 8008654:	e018      	b.n	8008688 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 f81c 	bl	8008694 <USBH_HandleControl>
 800865c:	4603      	mov	r3, r0
 800865e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d002      	beq.n	800866c <USBH_CtlReq+0x54>
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	2b03      	cmp	r3, #3
 800866a:	d106      	bne.n	800867a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2201      	movs	r2, #1
 8008670:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	761a      	strb	r2, [r3, #24]
      break;
 8008678:	e005      	b.n	8008686 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	2b02      	cmp	r3, #2
 800867e:	d102      	bne.n	8008686 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	709a      	strb	r2, [r3, #2]
      break;
 8008686:	bf00      	nop
  }
  return status;
 8008688:	7dfb      	ldrb	r3, [r7, #23]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
	...

08008694 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af02      	add	r7, sp, #8
 800869a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800869c:	2301      	movs	r3, #1
 800869e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086a0:	2300      	movs	r3, #0
 80086a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	7e1b      	ldrb	r3, [r3, #24]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	2b0a      	cmp	r3, #10
 80086ac:	f200 8156 	bhi.w	800895c <USBH_HandleControl+0x2c8>
 80086b0:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <USBH_HandleControl+0x24>)
 80086b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b6:	bf00      	nop
 80086b8:	080086e5 	.word	0x080086e5
 80086bc:	080086ff 	.word	0x080086ff
 80086c0:	08008769 	.word	0x08008769
 80086c4:	0800878f 	.word	0x0800878f
 80086c8:	080087c7 	.word	0x080087c7
 80086cc:	080087f1 	.word	0x080087f1
 80086d0:	08008843 	.word	0x08008843
 80086d4:	08008865 	.word	0x08008865
 80086d8:	080088a1 	.word	0x080088a1
 80086dc:	080088c7 	.word	0x080088c7
 80086e0:	08008905 	.word	0x08008905
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f103 0110 	add.w	r1, r3, #16
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	795b      	ldrb	r3, [r3, #5]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f943 	bl	800897c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2202      	movs	r2, #2
 80086fa:	761a      	strb	r2, [r3, #24]
      break;
 80086fc:	e139      	b.n	8008972 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	795b      	ldrb	r3, [r3, #5]
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fcc5 	bl	8009094 <USBH_LL_GetURBState>
 800870a:	4603      	mov	r3, r0
 800870c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d11e      	bne.n	8008752 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	7c1b      	ldrb	r3, [r3, #16]
 8008718:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800871c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	8adb      	ldrh	r3, [r3, #22]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008726:	7b7b      	ldrb	r3, [r7, #13]
 8008728:	2b80      	cmp	r3, #128	; 0x80
 800872a:	d103      	bne.n	8008734 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2203      	movs	r2, #3
 8008730:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008732:	e115      	b.n	8008960 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2205      	movs	r2, #5
 8008738:	761a      	strb	r2, [r3, #24]
      break;
 800873a:	e111      	b.n	8008960 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800873c:	7b7b      	ldrb	r3, [r7, #13]
 800873e:	2b80      	cmp	r3, #128	; 0x80
 8008740:	d103      	bne.n	800874a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2209      	movs	r2, #9
 8008746:	761a      	strb	r2, [r3, #24]
      break;
 8008748:	e10a      	b.n	8008960 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2207      	movs	r2, #7
 800874e:	761a      	strb	r2, [r3, #24]
      break;
 8008750:	e106      	b.n	8008960 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b04      	cmp	r3, #4
 8008756:	d003      	beq.n	8008760 <USBH_HandleControl+0xcc>
 8008758:	7bbb      	ldrb	r3, [r7, #14]
 800875a:	2b02      	cmp	r3, #2
 800875c:	f040 8100 	bne.w	8008960 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	220b      	movs	r2, #11
 8008764:	761a      	strb	r2, [r3, #24]
      break;
 8008766:	e0fb      	b.n	8008960 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800876e:	b29a      	uxth	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6899      	ldr	r1, [r3, #8]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	899a      	ldrh	r2, [r3, #12]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	791b      	ldrb	r3, [r3, #4]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f93a 	bl	80089fa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2204      	movs	r2, #4
 800878a:	761a      	strb	r2, [r3, #24]
      break;
 800878c:	e0f1      	b.n	8008972 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	791b      	ldrb	r3, [r3, #4]
 8008792:	4619      	mov	r1, r3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fc7d 	bl	8009094 <USBH_LL_GetURBState>
 800879a:	4603      	mov	r3, r0
 800879c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800879e:	7bbb      	ldrb	r3, [r7, #14]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d102      	bne.n	80087aa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2209      	movs	r2, #9
 80087a8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	2b05      	cmp	r3, #5
 80087ae:	d102      	bne.n	80087b6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80087b0:	2303      	movs	r3, #3
 80087b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087b4:	e0d6      	b.n	8008964 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
 80087b8:	2b04      	cmp	r3, #4
 80087ba:	f040 80d3 	bne.w	8008964 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	220b      	movs	r2, #11
 80087c2:	761a      	strb	r2, [r3, #24]
      break;
 80087c4:	e0ce      	b.n	8008964 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6899      	ldr	r1, [r3, #8]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	899a      	ldrh	r2, [r3, #12]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	795b      	ldrb	r3, [r3, #5]
 80087d2:	2001      	movs	r0, #1
 80087d4:	9000      	str	r0, [sp, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f8ea 	bl	80089b0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2206      	movs	r2, #6
 80087ec:	761a      	strb	r2, [r3, #24]
      break;
 80087ee:	e0c0      	b.n	8008972 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	795b      	ldrb	r3, [r3, #5]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fc4c 	bl	8009094 <USBH_LL_GetURBState>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d103      	bne.n	800880e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2207      	movs	r2, #7
 800880a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800880c:	e0ac      	b.n	8008968 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	2b05      	cmp	r3, #5
 8008812:	d105      	bne.n	8008820 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	220c      	movs	r2, #12
 8008818:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800881a:	2303      	movs	r3, #3
 800881c:	73fb      	strb	r3, [r7, #15]
      break;
 800881e:	e0a3      	b.n	8008968 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d103      	bne.n	800882e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2205      	movs	r2, #5
 800882a:	761a      	strb	r2, [r3, #24]
      break;
 800882c:	e09c      	b.n	8008968 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800882e:	7bbb      	ldrb	r3, [r7, #14]
 8008830:	2b04      	cmp	r3, #4
 8008832:	f040 8099 	bne.w	8008968 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	220b      	movs	r2, #11
 800883a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800883c:	2302      	movs	r3, #2
 800883e:	73fb      	strb	r3, [r7, #15]
      break;
 8008840:	e092      	b.n	8008968 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	791b      	ldrb	r3, [r3, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	2100      	movs	r1, #0
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f8d5 	bl	80089fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008856:	b29a      	uxth	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2208      	movs	r2, #8
 8008860:	761a      	strb	r2, [r3, #24]

      break;
 8008862:	e086      	b.n	8008972 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	791b      	ldrb	r3, [r3, #4]
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fc12 	bl	8009094 <USBH_LL_GetURBState>
 8008870:	4603      	mov	r3, r0
 8008872:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d105      	bne.n	8008886 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	220d      	movs	r2, #13
 800887e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008884:	e072      	b.n	800896c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008886:	7bbb      	ldrb	r3, [r7, #14]
 8008888:	2b04      	cmp	r3, #4
 800888a:	d103      	bne.n	8008894 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	220b      	movs	r2, #11
 8008890:	761a      	strb	r2, [r3, #24]
      break;
 8008892:	e06b      	b.n	800896c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008894:	7bbb      	ldrb	r3, [r7, #14]
 8008896:	2b05      	cmp	r3, #5
 8008898:	d168      	bne.n	800896c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800889a:	2303      	movs	r3, #3
 800889c:	73fb      	strb	r3, [r7, #15]
      break;
 800889e:	e065      	b.n	800896c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	795b      	ldrb	r3, [r3, #5]
 80088a4:	2201      	movs	r2, #1
 80088a6:	9200      	str	r2, [sp, #0]
 80088a8:	2200      	movs	r2, #0
 80088aa:	2100      	movs	r1, #0
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f87f 	bl	80089b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	220a      	movs	r2, #10
 80088c2:	761a      	strb	r2, [r3, #24]
      break;
 80088c4:	e055      	b.n	8008972 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	795b      	ldrb	r3, [r3, #5]
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fbe1 	bl	8009094 <USBH_LL_GetURBState>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d105      	bne.n	80088e8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	220d      	movs	r2, #13
 80088e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088e6:	e043      	b.n	8008970 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d103      	bne.n	80088f6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2209      	movs	r2, #9
 80088f2:	761a      	strb	r2, [r3, #24]
      break;
 80088f4:	e03c      	b.n	8008970 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	2b04      	cmp	r3, #4
 80088fa:	d139      	bne.n	8008970 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	220b      	movs	r2, #11
 8008900:	761a      	strb	r2, [r3, #24]
      break;
 8008902:	e035      	b.n	8008970 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	7e5b      	ldrb	r3, [r3, #25]
 8008908:	3301      	adds	r3, #1
 800890a:	b2da      	uxtb	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	765a      	strb	r2, [r3, #25]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	7e5b      	ldrb	r3, [r3, #25]
 8008914:	2b02      	cmp	r3, #2
 8008916:	d806      	bhi.n	8008926 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008924:	e025      	b.n	8008972 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800892c:	2106      	movs	r1, #6
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	795b      	ldrb	r3, [r3, #5]
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f90c 	bl	8008b5c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	791b      	ldrb	r3, [r3, #4]
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f906 	bl	8008b5c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008956:	2302      	movs	r3, #2
 8008958:	73fb      	strb	r3, [r7, #15]
      break;
 800895a:	e00a      	b.n	8008972 <USBH_HandleControl+0x2de>

    default:
      break;
 800895c:	bf00      	nop
 800895e:	e008      	b.n	8008972 <USBH_HandleControl+0x2de>
      break;
 8008960:	bf00      	nop
 8008962:	e006      	b.n	8008972 <USBH_HandleControl+0x2de>
      break;
 8008964:	bf00      	nop
 8008966:	e004      	b.n	8008972 <USBH_HandleControl+0x2de>
      break;
 8008968:	bf00      	nop
 800896a:	e002      	b.n	8008972 <USBH_HandleControl+0x2de>
      break;
 800896c:	bf00      	nop
 800896e:	e000      	b.n	8008972 <USBH_HandleControl+0x2de>
      break;
 8008970:	bf00      	nop
  }

  return status;
 8008972:	7bfb      	ldrb	r3, [r7, #15]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b088      	sub	sp, #32
 8008980:	af04      	add	r7, sp, #16
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	4613      	mov	r3, r2
 8008988:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800898a:	79f9      	ldrb	r1, [r7, #7]
 800898c:	2300      	movs	r3, #0
 800898e:	9303      	str	r3, [sp, #12]
 8008990:	2308      	movs	r3, #8
 8008992:	9302      	str	r3, [sp, #8]
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	9301      	str	r3, [sp, #4]
 8008998:	2300      	movs	r3, #0
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	2300      	movs	r3, #0
 800899e:	2200      	movs	r2, #0
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 fb46 	bl	8009032 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b088      	sub	sp, #32
 80089b4:	af04      	add	r7, sp, #16
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	4611      	mov	r1, r2
 80089bc:	461a      	mov	r2, r3
 80089be:	460b      	mov	r3, r1
 80089c0:	80fb      	strh	r3, [r7, #6]
 80089c2:	4613      	mov	r3, r2
 80089c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089d4:	7979      	ldrb	r1, [r7, #5]
 80089d6:	7e3b      	ldrb	r3, [r7, #24]
 80089d8:	9303      	str	r3, [sp, #12]
 80089da:	88fb      	ldrh	r3, [r7, #6]
 80089dc:	9302      	str	r3, [sp, #8]
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	2301      	movs	r3, #1
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	2300      	movs	r3, #0
 80089e8:	2200      	movs	r2, #0
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 fb21 	bl	8009032 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b088      	sub	sp, #32
 80089fe:	af04      	add	r7, sp, #16
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	4611      	mov	r1, r2
 8008a06:	461a      	mov	r2, r3
 8008a08:	460b      	mov	r3, r1
 8008a0a:	80fb      	strh	r3, [r7, #6]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a10:	7979      	ldrb	r1, [r7, #5]
 8008a12:	2300      	movs	r3, #0
 8008a14:	9303      	str	r3, [sp, #12]
 8008a16:	88fb      	ldrh	r3, [r7, #6]
 8008a18:	9302      	str	r3, [sp, #8]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	2301      	movs	r3, #1
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	2300      	movs	r3, #0
 8008a24:	2201      	movs	r2, #1
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 fb03 	bl	8009032 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a2c:	2300      	movs	r3, #0

}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b088      	sub	sp, #32
 8008a3a:	af04      	add	r7, sp, #16
 8008a3c:	60f8      	str	r0, [r7, #12]
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	4611      	mov	r1, r2
 8008a42:	461a      	mov	r2, r3
 8008a44:	460b      	mov	r3, r1
 8008a46:	80fb      	strh	r3, [r7, #6]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a5a:	7979      	ldrb	r1, [r7, #5]
 8008a5c:	7e3b      	ldrb	r3, [r7, #24]
 8008a5e:	9303      	str	r3, [sp, #12]
 8008a60:	88fb      	ldrh	r3, [r7, #6]
 8008a62:	9302      	str	r3, [sp, #8]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	9301      	str	r3, [sp, #4]
 8008a68:	2301      	movs	r3, #1
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	2200      	movs	r2, #0
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 fade 	bl	8009032 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b088      	sub	sp, #32
 8008a84:	af04      	add	r7, sp, #16
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	460b      	mov	r3, r1
 8008a90:	80fb      	strh	r3, [r7, #6]
 8008a92:	4613      	mov	r3, r2
 8008a94:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a96:	7979      	ldrb	r1, [r7, #5]
 8008a98:	2300      	movs	r3, #0
 8008a9a:	9303      	str	r3, [sp, #12]
 8008a9c:	88fb      	ldrh	r3, [r7, #6]
 8008a9e:	9302      	str	r3, [sp, #8]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	2201      	movs	r2, #1
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f000 fac0 	bl	8009032 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af04      	add	r7, sp, #16
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	461a      	mov	r2, r3
 8008aca:	4603      	mov	r3, r0
 8008acc:	70fb      	strb	r3, [r7, #3]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	70bb      	strb	r3, [r7, #2]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008ad6:	7878      	ldrb	r0, [r7, #1]
 8008ad8:	78ba      	ldrb	r2, [r7, #2]
 8008ada:	78f9      	ldrb	r1, [r7, #3]
 8008adc:	8b3b      	ldrh	r3, [r7, #24]
 8008ade:	9302      	str	r3, [sp, #8]
 8008ae0:	7d3b      	ldrb	r3, [r7, #20]
 8008ae2:	9301      	str	r3, [sp, #4]
 8008ae4:	7c3b      	ldrb	r3, [r7, #16]
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	4603      	mov	r3, r0
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fa53 	bl	8008f96 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b082      	sub	sp, #8
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008b06:	78fb      	ldrb	r3, [r7, #3]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fa72 	bl	8008ff4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	460b      	mov	r3, r1
 8008b24:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f836 	bl	8008b98 <USBH_GetFreePipe>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008b30:	89fb      	ldrh	r3, [r7, #14]
 8008b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00a      	beq.n	8008b50 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008b3a:	78fa      	ldrb	r2, [r7, #3]
 8008b3c:	89fb      	ldrh	r3, [r7, #14]
 8008b3e:	f003 030f 	and.w	r3, r3, #15
 8008b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	33e0      	adds	r3, #224	; 0xe0
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008b50:	89fb      	ldrh	r3, [r7, #14]
 8008b52:	b2db      	uxtb	r3, r3
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	2b0f      	cmp	r3, #15
 8008b6c:	d80d      	bhi.n	8008b8a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008b6e:	78fb      	ldrb	r3, [r7, #3]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	33e0      	adds	r3, #224	; 0xe0
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4413      	add	r3, r2
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	78fb      	ldrb	r3, [r7, #3]
 8008b7c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	33e0      	adds	r3, #224	; 0xe0
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	440b      	add	r3, r1
 8008b88:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]
 8008ba8:	e00f      	b.n	8008bca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	33e0      	adds	r3, #224	; 0xe0
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	e007      	b.n	8008bd4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	73fb      	strb	r3, [r7, #15]
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	2b0f      	cmp	r3, #15
 8008bce:	d9ec      	bls.n	8008baa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008be4:	2201      	movs	r2, #1
 8008be6:	490e      	ldr	r1, [pc, #56]	; (8008c20 <MX_USB_HOST_Init+0x40>)
 8008be8:	480e      	ldr	r0, [pc, #56]	; (8008c24 <MX_USB_HOST_Init+0x44>)
 8008bea:	f7fe fb05 	bl	80071f8 <USBH_Init>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008bf4:	f7f7 fece 	bl	8000994 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008bf8:	490b      	ldr	r1, [pc, #44]	; (8008c28 <MX_USB_HOST_Init+0x48>)
 8008bfa:	480a      	ldr	r0, [pc, #40]	; (8008c24 <MX_USB_HOST_Init+0x44>)
 8008bfc:	f7fe fba9 	bl	8007352 <USBH_RegisterClass>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008c06:	f7f7 fec5 	bl	8000994 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008c0a:	4806      	ldr	r0, [pc, #24]	; (8008c24 <MX_USB_HOST_Init+0x44>)
 8008c0c:	f7fe fc2d 	bl	800746a <USBH_Start>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008c16:	f7f7 febd 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008c1a:	bf00      	nop
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	08008c41 	.word	0x08008c41
 8008c24:	200001dc 	.word	0x200001dc
 8008c28:	2000000c 	.word	0x2000000c

08008c2c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008c30:	4802      	ldr	r0, [pc, #8]	; (8008c3c <MX_USB_HOST_Process+0x10>)
 8008c32:	f7fe fc2b 	bl	800748c <USBH_Process>
}
 8008c36:	bf00      	nop
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	200001dc 	.word	0x200001dc

08008c40 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	d819      	bhi.n	8008c88 <USBH_UserProcess+0x48>
 8008c54:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <USBH_UserProcess+0x1c>)
 8008c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5a:	bf00      	nop
 8008c5c:	08008c89 	.word	0x08008c89
 8008c60:	08008c79 	.word	0x08008c79
 8008c64:	08008c89 	.word	0x08008c89
 8008c68:	08008c81 	.word	0x08008c81
 8008c6c:	08008c71 	.word	0x08008c71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008c70:	4b09      	ldr	r3, [pc, #36]	; (8008c98 <USBH_UserProcess+0x58>)
 8008c72:	2203      	movs	r2, #3
 8008c74:	701a      	strb	r2, [r3, #0]
  break;
 8008c76:	e008      	b.n	8008c8a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008c78:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <USBH_UserProcess+0x58>)
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	701a      	strb	r2, [r3, #0]
  break;
 8008c7e:	e004      	b.n	8008c8a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008c80:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <USBH_UserProcess+0x58>)
 8008c82:	2201      	movs	r2, #1
 8008c84:	701a      	strb	r2, [r3, #0]
  break;
 8008c86:	e000      	b.n	8008c8a <USBH_UserProcess+0x4a>

  default:
  break;
 8008c88:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008c8a:	bf00      	nop
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	200005b4 	.word	0x200005b4

08008c9c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08a      	sub	sp, #40	; 0x28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ca4:	f107 0314 	add.w	r3, r7, #20
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	605a      	str	r2, [r3, #4]
 8008cae:	609a      	str	r2, [r3, #8]
 8008cb0:	60da      	str	r2, [r3, #12]
 8008cb2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cbc:	d147      	bne.n	8008d4e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	613b      	str	r3, [r7, #16]
 8008cc2:	4b25      	ldr	r3, [pc, #148]	; (8008d58 <HAL_HCD_MspInit+0xbc>)
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	4a24      	ldr	r2, [pc, #144]	; (8008d58 <HAL_HCD_MspInit+0xbc>)
 8008cc8:	f043 0301 	orr.w	r3, r3, #1
 8008ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8008cce:	4b22      	ldr	r3, [pc, #136]	; (8008d58 <HAL_HCD_MspInit+0xbc>)
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	613b      	str	r3, [r7, #16]
 8008cd8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008ce8:	f107 0314 	add.w	r3, r7, #20
 8008cec:	4619      	mov	r1, r3
 8008cee:	481b      	ldr	r0, [pc, #108]	; (8008d5c <HAL_HCD_MspInit+0xc0>)
 8008cf0:	f7f8 fa24 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008cf4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d02:	2300      	movs	r3, #0
 8008d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d06:	230a      	movs	r3, #10
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d0a:	f107 0314 	add.w	r3, r7, #20
 8008d0e:	4619      	mov	r1, r3
 8008d10:	4812      	ldr	r0, [pc, #72]	; (8008d5c <HAL_HCD_MspInit+0xc0>)
 8008d12:	f7f8 fa13 	bl	800113c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d16:	4b10      	ldr	r3, [pc, #64]	; (8008d58 <HAL_HCD_MspInit+0xbc>)
 8008d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1a:	4a0f      	ldr	r2, [pc, #60]	; (8008d58 <HAL_HCD_MspInit+0xbc>)
 8008d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d20:	6353      	str	r3, [r2, #52]	; 0x34
 8008d22:	2300      	movs	r3, #0
 8008d24:	60fb      	str	r3, [r7, #12]
 8008d26:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <HAL_HCD_MspInit+0xbc>)
 8008d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d2a:	4a0b      	ldr	r2, [pc, #44]	; (8008d58 <HAL_HCD_MspInit+0xbc>)
 8008d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d30:	6453      	str	r3, [r2, #68]	; 0x44
 8008d32:	4b09      	ldr	r3, [pc, #36]	; (8008d58 <HAL_HCD_MspInit+0xbc>)
 8008d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2100      	movs	r1, #0
 8008d42:	2043      	movs	r0, #67	; 0x43
 8008d44:	f7f8 f9c3 	bl	80010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d48:	2043      	movs	r0, #67	; 0x43
 8008d4a:	f7f8 f9dc 	bl	8001106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d4e:	bf00      	nop
 8008d50:	3728      	adds	r7, #40	; 0x28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	40023800 	.word	0x40023800
 8008d5c:	40020000 	.word	0x40020000

08008d60 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe ff6b 	bl	8007c4a <USBH_LL_IncTimer>
}
 8008d74:	bf00      	nop
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe ffa3 	bl	8007cd6 <USBH_LL_Connect>
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe ffac 	bl	8007d04 <USBH_LL_Disconnect>
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70fb      	strb	r3, [r7, #3]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe ff5d 	bl	8007c9e <USBH_LL_PortEnabled>
}
 8008de4:	bf00      	nop
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fe ff5d 	bl	8007cba <USBH_LL_PortDisabled>
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d12a      	bne.n	8008e70 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008e1a:	4a18      	ldr	r2, [pc, #96]	; (8008e7c <USBH_LL_Init+0x74>)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a15      	ldr	r2, [pc, #84]	; (8008e7c <USBH_LL_Init+0x74>)
 8008e26:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e2a:	4b14      	ldr	r3, [pc, #80]	; (8008e7c <USBH_LL_Init+0x74>)
 8008e2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008e32:	4b12      	ldr	r3, [pc, #72]	; (8008e7c <USBH_LL_Init+0x74>)
 8008e34:	2208      	movs	r2, #8
 8008e36:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008e38:	4b10      	ldr	r3, [pc, #64]	; (8008e7c <USBH_LL_Init+0x74>)
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e3e:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <USBH_LL_Init+0x74>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008e44:	4b0d      	ldr	r3, [pc, #52]	; (8008e7c <USBH_LL_Init+0x74>)
 8008e46:	2202      	movs	r2, #2
 8008e48:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e4a:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <USBH_LL_Init+0x74>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008e50:	480a      	ldr	r0, [pc, #40]	; (8008e7c <USBH_LL_Init+0x74>)
 8008e52:	f7f8 fb5a 	bl	800150a <HAL_HCD_Init>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008e5c:	f7f7 fd9a 	bl	8000994 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008e60:	4806      	ldr	r0, [pc, #24]	; (8008e7c <USBH_LL_Init+0x74>)
 8008e62:	f7f8 ffbb 	bl	8001ddc <HAL_HCD_GetCurrentFrame>
 8008e66:	4603      	mov	r3, r0
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7fe fede 	bl	8007c2c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	200005b8 	.word	0x200005b8

08008e80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7f8 ff28 	bl	8001cec <HAL_HCD_Start>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 f95e 	bl	8009164 <USBH_Get_USB_Status>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7f8 ff30 	bl	8001d32 <HAL_HCD_Stop>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 f943 	bl	8009164 <USBH_Get_USB_Status>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7f8 ff7a 	bl	8001df8 <HAL_HCD_GetCurrentSpeed>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d00c      	beq.n	8008f24 <USBH_LL_GetSpeed+0x38>
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d80d      	bhi.n	8008f2a <USBH_LL_GetSpeed+0x3e>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <USBH_LL_GetSpeed+0x2c>
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d003      	beq.n	8008f1e <USBH_LL_GetSpeed+0x32>
 8008f16:	e008      	b.n	8008f2a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f1c:	e008      	b.n	8008f30 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	73fb      	strb	r3, [r7, #15]
    break;
 8008f22:	e005      	b.n	8008f30 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008f24:	2302      	movs	r3, #2
 8008f26:	73fb      	strb	r3, [r7, #15]
    break;
 8008f28:	e002      	b.n	8008f30 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f2e:	bf00      	nop
  }
  return  speed;
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7f8 ff0b 	bl	8001d6c <HAL_HCD_ResetPort>
 8008f56:	4603      	mov	r3, r0
 8008f58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 f901 	bl	8009164 <USBH_Get_USB_Status>
 8008f62:	4603      	mov	r3, r0
 8008f64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f82:	78fa      	ldrb	r2, [r7, #3]
 8008f84:	4611      	mov	r1, r2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7f8 ff13 	bl	8001db2 <HAL_HCD_HC_GetXferCount>
 8008f8c:	4603      	mov	r3, r0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f96:	b590      	push	{r4, r7, lr}
 8008f98:	b089      	sub	sp, #36	; 0x24
 8008f9a:	af04      	add	r7, sp, #16
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	4608      	mov	r0, r1
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	70fb      	strb	r3, [r7, #3]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70bb      	strb	r3, [r7, #2]
 8008fac:	4613      	mov	r3, r2
 8008fae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008fbe:	787c      	ldrb	r4, [r7, #1]
 8008fc0:	78ba      	ldrb	r2, [r7, #2]
 8008fc2:	78f9      	ldrb	r1, [r7, #3]
 8008fc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008fc6:	9302      	str	r3, [sp, #8]
 8008fc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	4623      	mov	r3, r4
 8008fd6:	f7f8 faff 	bl	80015d8 <HAL_HCD_HC_Init>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 f8bf 	bl	8009164 <USBH_Get_USB_Status>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd90      	pop	{r4, r7, pc}

08008ff4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800900e:	78fa      	ldrb	r2, [r7, #3]
 8009010:	4611      	mov	r1, r2
 8009012:	4618      	mov	r0, r3
 8009014:	f7f8 fb98 	bl	8001748 <HAL_HCD_HC_Halt>
 8009018:	4603      	mov	r3, r0
 800901a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 f8a0 	bl	8009164 <USBH_Get_USB_Status>
 8009024:	4603      	mov	r3, r0
 8009026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009028:	7bbb      	ldrb	r3, [r7, #14]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009032:	b590      	push	{r4, r7, lr}
 8009034:	b089      	sub	sp, #36	; 0x24
 8009036:	af04      	add	r7, sp, #16
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	4608      	mov	r0, r1
 800903c:	4611      	mov	r1, r2
 800903e:	461a      	mov	r2, r3
 8009040:	4603      	mov	r3, r0
 8009042:	70fb      	strb	r3, [r7, #3]
 8009044:	460b      	mov	r3, r1
 8009046:	70bb      	strb	r3, [r7, #2]
 8009048:	4613      	mov	r3, r2
 800904a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800905a:	787c      	ldrb	r4, [r7, #1]
 800905c:	78ba      	ldrb	r2, [r7, #2]
 800905e:	78f9      	ldrb	r1, [r7, #3]
 8009060:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009064:	9303      	str	r3, [sp, #12]
 8009066:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009068:	9302      	str	r3, [sp, #8]
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	9301      	str	r3, [sp, #4]
 800906e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	4623      	mov	r3, r4
 8009076:	f7f8 fb8b 	bl	8001790 <HAL_HCD_HC_SubmitRequest>
 800907a:	4603      	mov	r3, r0
 800907c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800907e:	7bfb      	ldrb	r3, [r7, #15]
 8009080:	4618      	mov	r0, r3
 8009082:	f000 f86f 	bl	8009164 <USBH_Get_USB_Status>
 8009086:	4603      	mov	r3, r0
 8009088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800908a:	7bbb      	ldrb	r3, [r7, #14]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	bd90      	pop	{r4, r7, pc}

08009094 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090a6:	78fa      	ldrb	r2, [r7, #3]
 80090a8:	4611      	mov	r1, r2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7f8 fe6c 	bl	8001d88 <HAL_HCD_HC_GetURBState>
 80090b0:	4603      	mov	r3, r0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	460b      	mov	r3, r1
 80090c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d103      	bne.n	80090d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 f872 	bl	80091bc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80090d8:	20c8      	movs	r0, #200	; 0xc8
 80090da:	f7f7 fef9 	bl	8000ed0 <HAL_Delay>
  return USBH_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
 80090f4:	4613      	mov	r3, r2
 80090f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009100:	78fa      	ldrb	r2, [r7, #3]
 8009102:	68f9      	ldr	r1, [r7, #12]
 8009104:	4613      	mov	r3, r2
 8009106:	011b      	lsls	r3, r3, #4
 8009108:	1a9b      	subs	r3, r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	440b      	add	r3, r1
 800910e:	3317      	adds	r3, #23
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00a      	beq.n	800912c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009116:	78fa      	ldrb	r2, [r7, #3]
 8009118:	68f9      	ldr	r1, [r7, #12]
 800911a:	4613      	mov	r3, r2
 800911c:	011b      	lsls	r3, r3, #4
 800911e:	1a9b      	subs	r3, r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	440b      	add	r3, r1
 8009124:	333c      	adds	r3, #60	; 0x3c
 8009126:	78ba      	ldrb	r2, [r7, #2]
 8009128:	701a      	strb	r2, [r3, #0]
 800912a:	e009      	b.n	8009140 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800912c:	78fa      	ldrb	r2, [r7, #3]
 800912e:	68f9      	ldr	r1, [r7, #12]
 8009130:	4613      	mov	r3, r2
 8009132:	011b      	lsls	r3, r3, #4
 8009134:	1a9b      	subs	r3, r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	440b      	add	r3, r1
 800913a:	333d      	adds	r3, #61	; 0x3d
 800913c:	78ba      	ldrb	r2, [r7, #2]
 800913e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b082      	sub	sp, #8
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7f7 feba 	bl	8000ed0 <HAL_Delay>
}
 800915c:	bf00      	nop
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009172:	79fb      	ldrb	r3, [r7, #7]
 8009174:	2b03      	cmp	r3, #3
 8009176:	d817      	bhi.n	80091a8 <USBH_Get_USB_Status+0x44>
 8009178:	a201      	add	r2, pc, #4	; (adr r2, 8009180 <USBH_Get_USB_Status+0x1c>)
 800917a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917e:	bf00      	nop
 8009180:	08009191 	.word	0x08009191
 8009184:	08009197 	.word	0x08009197
 8009188:	0800919d 	.word	0x0800919d
 800918c:	080091a3 	.word	0x080091a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	73fb      	strb	r3, [r7, #15]
    break;
 8009194:	e00b      	b.n	80091ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009196:	2302      	movs	r3, #2
 8009198:	73fb      	strb	r3, [r7, #15]
    break;
 800919a:	e008      	b.n	80091ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800919c:	2301      	movs	r3, #1
 800919e:	73fb      	strb	r3, [r7, #15]
    break;
 80091a0:	e005      	b.n	80091ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80091a2:	2302      	movs	r3, #2
 80091a4:	73fb      	strb	r3, [r7, #15]
    break;
 80091a6:	e002      	b.n	80091ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80091a8:	2302      	movs	r3, #2
 80091aa:	73fb      	strb	r3, [r7, #15]
    break;
 80091ac:	bf00      	nop
  }
  return usb_status;
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	4603      	mov	r3, r0
 80091c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80091c6:	79fb      	ldrb	r3, [r7, #7]
 80091c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80091ca:	79fb      	ldrb	r3, [r7, #7]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d102      	bne.n	80091d6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73fb      	strb	r3, [r7, #15]
 80091d4:	e001      	b.n	80091da <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80091d6:	2301      	movs	r3, #1
 80091d8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	461a      	mov	r2, r3
 80091de:	2101      	movs	r1, #1
 80091e0:	4803      	ldr	r0, [pc, #12]	; (80091f0 <MX_DriverVbusFS+0x34>)
 80091e2:	f7f8 f95f 	bl	80014a4 <HAL_GPIO_WritePin>
}
 80091e6:	bf00      	nop
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	40020800 	.word	0x40020800

080091f4 <malloc>:
 80091f4:	4b02      	ldr	r3, [pc, #8]	; (8009200 <malloc+0xc>)
 80091f6:	4601      	mov	r1, r0
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	f000 b82b 	b.w	8009254 <_malloc_r>
 80091fe:	bf00      	nop
 8009200:	20000078 	.word	0x20000078

08009204 <free>:
 8009204:	4b02      	ldr	r3, [pc, #8]	; (8009210 <free+0xc>)
 8009206:	4601      	mov	r1, r0
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	f000 b8f3 	b.w	80093f4 <_free_r>
 800920e:	bf00      	nop
 8009210:	20000078 	.word	0x20000078

08009214 <sbrk_aligned>:
 8009214:	b570      	push	{r4, r5, r6, lr}
 8009216:	4e0e      	ldr	r6, [pc, #56]	; (8009250 <sbrk_aligned+0x3c>)
 8009218:	460c      	mov	r4, r1
 800921a:	6831      	ldr	r1, [r6, #0]
 800921c:	4605      	mov	r5, r0
 800921e:	b911      	cbnz	r1, 8009226 <sbrk_aligned+0x12>
 8009220:	f000 f8ac 	bl	800937c <_sbrk_r>
 8009224:	6030      	str	r0, [r6, #0]
 8009226:	4621      	mov	r1, r4
 8009228:	4628      	mov	r0, r5
 800922a:	f000 f8a7 	bl	800937c <_sbrk_r>
 800922e:	1c43      	adds	r3, r0, #1
 8009230:	d00a      	beq.n	8009248 <sbrk_aligned+0x34>
 8009232:	1cc4      	adds	r4, r0, #3
 8009234:	f024 0403 	bic.w	r4, r4, #3
 8009238:	42a0      	cmp	r0, r4
 800923a:	d007      	beq.n	800924c <sbrk_aligned+0x38>
 800923c:	1a21      	subs	r1, r4, r0
 800923e:	4628      	mov	r0, r5
 8009240:	f000 f89c 	bl	800937c <_sbrk_r>
 8009244:	3001      	adds	r0, #1
 8009246:	d101      	bne.n	800924c <sbrk_aligned+0x38>
 8009248:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800924c:	4620      	mov	r0, r4
 800924e:	bd70      	pop	{r4, r5, r6, pc}
 8009250:	2000099c 	.word	0x2000099c

08009254 <_malloc_r>:
 8009254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009258:	1ccd      	adds	r5, r1, #3
 800925a:	f025 0503 	bic.w	r5, r5, #3
 800925e:	3508      	adds	r5, #8
 8009260:	2d0c      	cmp	r5, #12
 8009262:	bf38      	it	cc
 8009264:	250c      	movcc	r5, #12
 8009266:	2d00      	cmp	r5, #0
 8009268:	4607      	mov	r7, r0
 800926a:	db01      	blt.n	8009270 <_malloc_r+0x1c>
 800926c:	42a9      	cmp	r1, r5
 800926e:	d905      	bls.n	800927c <_malloc_r+0x28>
 8009270:	230c      	movs	r3, #12
 8009272:	603b      	str	r3, [r7, #0]
 8009274:	2600      	movs	r6, #0
 8009276:	4630      	mov	r0, r6
 8009278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800927c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009350 <_malloc_r+0xfc>
 8009280:	f000 f868 	bl	8009354 <__malloc_lock>
 8009284:	f8d8 3000 	ldr.w	r3, [r8]
 8009288:	461c      	mov	r4, r3
 800928a:	bb5c      	cbnz	r4, 80092e4 <_malloc_r+0x90>
 800928c:	4629      	mov	r1, r5
 800928e:	4638      	mov	r0, r7
 8009290:	f7ff ffc0 	bl	8009214 <sbrk_aligned>
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	4604      	mov	r4, r0
 8009298:	d155      	bne.n	8009346 <_malloc_r+0xf2>
 800929a:	f8d8 4000 	ldr.w	r4, [r8]
 800929e:	4626      	mov	r6, r4
 80092a0:	2e00      	cmp	r6, #0
 80092a2:	d145      	bne.n	8009330 <_malloc_r+0xdc>
 80092a4:	2c00      	cmp	r4, #0
 80092a6:	d048      	beq.n	800933a <_malloc_r+0xe6>
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	4631      	mov	r1, r6
 80092ac:	4638      	mov	r0, r7
 80092ae:	eb04 0903 	add.w	r9, r4, r3
 80092b2:	f000 f863 	bl	800937c <_sbrk_r>
 80092b6:	4581      	cmp	r9, r0
 80092b8:	d13f      	bne.n	800933a <_malloc_r+0xe6>
 80092ba:	6821      	ldr	r1, [r4, #0]
 80092bc:	1a6d      	subs	r5, r5, r1
 80092be:	4629      	mov	r1, r5
 80092c0:	4638      	mov	r0, r7
 80092c2:	f7ff ffa7 	bl	8009214 <sbrk_aligned>
 80092c6:	3001      	adds	r0, #1
 80092c8:	d037      	beq.n	800933a <_malloc_r+0xe6>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	442b      	add	r3, r5
 80092ce:	6023      	str	r3, [r4, #0]
 80092d0:	f8d8 3000 	ldr.w	r3, [r8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d038      	beq.n	800934a <_malloc_r+0xf6>
 80092d8:	685a      	ldr	r2, [r3, #4]
 80092da:	42a2      	cmp	r2, r4
 80092dc:	d12b      	bne.n	8009336 <_malloc_r+0xe2>
 80092de:	2200      	movs	r2, #0
 80092e0:	605a      	str	r2, [r3, #4]
 80092e2:	e00f      	b.n	8009304 <_malloc_r+0xb0>
 80092e4:	6822      	ldr	r2, [r4, #0]
 80092e6:	1b52      	subs	r2, r2, r5
 80092e8:	d41f      	bmi.n	800932a <_malloc_r+0xd6>
 80092ea:	2a0b      	cmp	r2, #11
 80092ec:	d917      	bls.n	800931e <_malloc_r+0xca>
 80092ee:	1961      	adds	r1, r4, r5
 80092f0:	42a3      	cmp	r3, r4
 80092f2:	6025      	str	r5, [r4, #0]
 80092f4:	bf18      	it	ne
 80092f6:	6059      	strne	r1, [r3, #4]
 80092f8:	6863      	ldr	r3, [r4, #4]
 80092fa:	bf08      	it	eq
 80092fc:	f8c8 1000 	streq.w	r1, [r8]
 8009300:	5162      	str	r2, [r4, r5]
 8009302:	604b      	str	r3, [r1, #4]
 8009304:	4638      	mov	r0, r7
 8009306:	f104 060b 	add.w	r6, r4, #11
 800930a:	f000 f829 	bl	8009360 <__malloc_unlock>
 800930e:	f026 0607 	bic.w	r6, r6, #7
 8009312:	1d23      	adds	r3, r4, #4
 8009314:	1af2      	subs	r2, r6, r3
 8009316:	d0ae      	beq.n	8009276 <_malloc_r+0x22>
 8009318:	1b9b      	subs	r3, r3, r6
 800931a:	50a3      	str	r3, [r4, r2]
 800931c:	e7ab      	b.n	8009276 <_malloc_r+0x22>
 800931e:	42a3      	cmp	r3, r4
 8009320:	6862      	ldr	r2, [r4, #4]
 8009322:	d1dd      	bne.n	80092e0 <_malloc_r+0x8c>
 8009324:	f8c8 2000 	str.w	r2, [r8]
 8009328:	e7ec      	b.n	8009304 <_malloc_r+0xb0>
 800932a:	4623      	mov	r3, r4
 800932c:	6864      	ldr	r4, [r4, #4]
 800932e:	e7ac      	b.n	800928a <_malloc_r+0x36>
 8009330:	4634      	mov	r4, r6
 8009332:	6876      	ldr	r6, [r6, #4]
 8009334:	e7b4      	b.n	80092a0 <_malloc_r+0x4c>
 8009336:	4613      	mov	r3, r2
 8009338:	e7cc      	b.n	80092d4 <_malloc_r+0x80>
 800933a:	230c      	movs	r3, #12
 800933c:	603b      	str	r3, [r7, #0]
 800933e:	4638      	mov	r0, r7
 8009340:	f000 f80e 	bl	8009360 <__malloc_unlock>
 8009344:	e797      	b.n	8009276 <_malloc_r+0x22>
 8009346:	6025      	str	r5, [r4, #0]
 8009348:	e7dc      	b.n	8009304 <_malloc_r+0xb0>
 800934a:	605b      	str	r3, [r3, #4]
 800934c:	deff      	udf	#255	; 0xff
 800934e:	bf00      	nop
 8009350:	20000998 	.word	0x20000998

08009354 <__malloc_lock>:
 8009354:	4801      	ldr	r0, [pc, #4]	; (800935c <__malloc_lock+0x8>)
 8009356:	f000 b84b 	b.w	80093f0 <__retarget_lock_acquire_recursive>
 800935a:	bf00      	nop
 800935c:	20000adc 	.word	0x20000adc

08009360 <__malloc_unlock>:
 8009360:	4801      	ldr	r0, [pc, #4]	; (8009368 <__malloc_unlock+0x8>)
 8009362:	f000 b846 	b.w	80093f2 <__retarget_lock_release_recursive>
 8009366:	bf00      	nop
 8009368:	20000adc 	.word	0x20000adc

0800936c <memset>:
 800936c:	4402      	add	r2, r0
 800936e:	4603      	mov	r3, r0
 8009370:	4293      	cmp	r3, r2
 8009372:	d100      	bne.n	8009376 <memset+0xa>
 8009374:	4770      	bx	lr
 8009376:	f803 1b01 	strb.w	r1, [r3], #1
 800937a:	e7f9      	b.n	8009370 <memset+0x4>

0800937c <_sbrk_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4d06      	ldr	r5, [pc, #24]	; (8009398 <_sbrk_r+0x1c>)
 8009380:	2300      	movs	r3, #0
 8009382:	4604      	mov	r4, r0
 8009384:	4608      	mov	r0, r1
 8009386:	602b      	str	r3, [r5, #0]
 8009388:	f7f7 fcbe 	bl	8000d08 <_sbrk>
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d102      	bne.n	8009396 <_sbrk_r+0x1a>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	b103      	cbz	r3, 8009396 <_sbrk_r+0x1a>
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	bd38      	pop	{r3, r4, r5, pc}
 8009398:	20000ad8 	.word	0x20000ad8

0800939c <__errno>:
 800939c:	4b01      	ldr	r3, [pc, #4]	; (80093a4 <__errno+0x8>)
 800939e:	6818      	ldr	r0, [r3, #0]
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	20000078 	.word	0x20000078

080093a8 <__libc_init_array>:
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	4d0d      	ldr	r5, [pc, #52]	; (80093e0 <__libc_init_array+0x38>)
 80093ac:	4c0d      	ldr	r4, [pc, #52]	; (80093e4 <__libc_init_array+0x3c>)
 80093ae:	1b64      	subs	r4, r4, r5
 80093b0:	10a4      	asrs	r4, r4, #2
 80093b2:	2600      	movs	r6, #0
 80093b4:	42a6      	cmp	r6, r4
 80093b6:	d109      	bne.n	80093cc <__libc_init_array+0x24>
 80093b8:	4d0b      	ldr	r5, [pc, #44]	; (80093e8 <__libc_init_array+0x40>)
 80093ba:	4c0c      	ldr	r4, [pc, #48]	; (80093ec <__libc_init_array+0x44>)
 80093bc:	f000 f866 	bl	800948c <_init>
 80093c0:	1b64      	subs	r4, r4, r5
 80093c2:	10a4      	asrs	r4, r4, #2
 80093c4:	2600      	movs	r6, #0
 80093c6:	42a6      	cmp	r6, r4
 80093c8:	d105      	bne.n	80093d6 <__libc_init_array+0x2e>
 80093ca:	bd70      	pop	{r4, r5, r6, pc}
 80093cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d0:	4798      	blx	r3
 80093d2:	3601      	adds	r6, #1
 80093d4:	e7ee      	b.n	80093b4 <__libc_init_array+0xc>
 80093d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093da:	4798      	blx	r3
 80093dc:	3601      	adds	r6, #1
 80093de:	e7f2      	b.n	80093c6 <__libc_init_array+0x1e>
 80093e0:	080094d0 	.word	0x080094d0
 80093e4:	080094d0 	.word	0x080094d0
 80093e8:	080094d0 	.word	0x080094d0
 80093ec:	080094d4 	.word	0x080094d4

080093f0 <__retarget_lock_acquire_recursive>:
 80093f0:	4770      	bx	lr

080093f2 <__retarget_lock_release_recursive>:
 80093f2:	4770      	bx	lr

080093f4 <_free_r>:
 80093f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093f6:	2900      	cmp	r1, #0
 80093f8:	d044      	beq.n	8009484 <_free_r+0x90>
 80093fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093fe:	9001      	str	r0, [sp, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	f1a1 0404 	sub.w	r4, r1, #4
 8009406:	bfb8      	it	lt
 8009408:	18e4      	addlt	r4, r4, r3
 800940a:	f7ff ffa3 	bl	8009354 <__malloc_lock>
 800940e:	4a1e      	ldr	r2, [pc, #120]	; (8009488 <_free_r+0x94>)
 8009410:	9801      	ldr	r0, [sp, #4]
 8009412:	6813      	ldr	r3, [r2, #0]
 8009414:	b933      	cbnz	r3, 8009424 <_free_r+0x30>
 8009416:	6063      	str	r3, [r4, #4]
 8009418:	6014      	str	r4, [r2, #0]
 800941a:	b003      	add	sp, #12
 800941c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009420:	f7ff bf9e 	b.w	8009360 <__malloc_unlock>
 8009424:	42a3      	cmp	r3, r4
 8009426:	d908      	bls.n	800943a <_free_r+0x46>
 8009428:	6825      	ldr	r5, [r4, #0]
 800942a:	1961      	adds	r1, r4, r5
 800942c:	428b      	cmp	r3, r1
 800942e:	bf01      	itttt	eq
 8009430:	6819      	ldreq	r1, [r3, #0]
 8009432:	685b      	ldreq	r3, [r3, #4]
 8009434:	1949      	addeq	r1, r1, r5
 8009436:	6021      	streq	r1, [r4, #0]
 8009438:	e7ed      	b.n	8009416 <_free_r+0x22>
 800943a:	461a      	mov	r2, r3
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	b10b      	cbz	r3, 8009444 <_free_r+0x50>
 8009440:	42a3      	cmp	r3, r4
 8009442:	d9fa      	bls.n	800943a <_free_r+0x46>
 8009444:	6811      	ldr	r1, [r2, #0]
 8009446:	1855      	adds	r5, r2, r1
 8009448:	42a5      	cmp	r5, r4
 800944a:	d10b      	bne.n	8009464 <_free_r+0x70>
 800944c:	6824      	ldr	r4, [r4, #0]
 800944e:	4421      	add	r1, r4
 8009450:	1854      	adds	r4, r2, r1
 8009452:	42a3      	cmp	r3, r4
 8009454:	6011      	str	r1, [r2, #0]
 8009456:	d1e0      	bne.n	800941a <_free_r+0x26>
 8009458:	681c      	ldr	r4, [r3, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	6053      	str	r3, [r2, #4]
 800945e:	440c      	add	r4, r1
 8009460:	6014      	str	r4, [r2, #0]
 8009462:	e7da      	b.n	800941a <_free_r+0x26>
 8009464:	d902      	bls.n	800946c <_free_r+0x78>
 8009466:	230c      	movs	r3, #12
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	e7d6      	b.n	800941a <_free_r+0x26>
 800946c:	6825      	ldr	r5, [r4, #0]
 800946e:	1961      	adds	r1, r4, r5
 8009470:	428b      	cmp	r3, r1
 8009472:	bf04      	itt	eq
 8009474:	6819      	ldreq	r1, [r3, #0]
 8009476:	685b      	ldreq	r3, [r3, #4]
 8009478:	6063      	str	r3, [r4, #4]
 800947a:	bf04      	itt	eq
 800947c:	1949      	addeq	r1, r1, r5
 800947e:	6021      	streq	r1, [r4, #0]
 8009480:	6054      	str	r4, [r2, #4]
 8009482:	e7ca      	b.n	800941a <_free_r+0x26>
 8009484:	b003      	add	sp, #12
 8009486:	bd30      	pop	{r4, r5, pc}
 8009488:	20000998 	.word	0x20000998

0800948c <_init>:
 800948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948e:	bf00      	nop
 8009490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009492:	bc08      	pop	{r3}
 8009494:	469e      	mov	lr, r3
 8009496:	4770      	bx	lr

08009498 <_fini>:
 8009498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949a:	bf00      	nop
 800949c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949e:	bc08      	pop	{r3}
 80094a0:	469e      	mov	lr, r3
 80094a2:	4770      	bx	lr
